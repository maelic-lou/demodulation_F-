// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="demodulationFM,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.771000,HLS_SYN_LAT=8700016,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=10,HLS_SYN_FF=1395,HLS_SYN_LUT=2210,HLS_VERSION=2019_2}" *)

module demodulationFM (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y_I_V_V_dout,
        y_I_V_V_empty_n,
        y_I_V_V_read,
        y_Q_V_V_dout,
        y_Q_V_V_empty_n,
        y_Q_V_V_read,
        y_demod_d_V_V_din,
        y_demod_d_V_V_full_n,
        y_demod_d_V_V_write,
        ap_return
);

parameter    ap_ST_fsm_state1 = 89'd1;
parameter    ap_ST_fsm_state2 = 89'd2;
parameter    ap_ST_fsm_state3 = 89'd4;
parameter    ap_ST_fsm_state4 = 89'd8;
parameter    ap_ST_fsm_state5 = 89'd16;
parameter    ap_ST_fsm_state6 = 89'd32;
parameter    ap_ST_fsm_state7 = 89'd64;
parameter    ap_ST_fsm_state8 = 89'd128;
parameter    ap_ST_fsm_state9 = 89'd256;
parameter    ap_ST_fsm_state10 = 89'd512;
parameter    ap_ST_fsm_state11 = 89'd1024;
parameter    ap_ST_fsm_state12 = 89'd2048;
parameter    ap_ST_fsm_state13 = 89'd4096;
parameter    ap_ST_fsm_state14 = 89'd8192;
parameter    ap_ST_fsm_state15 = 89'd16384;
parameter    ap_ST_fsm_state16 = 89'd32768;
parameter    ap_ST_fsm_state17 = 89'd65536;
parameter    ap_ST_fsm_state18 = 89'd131072;
parameter    ap_ST_fsm_state19 = 89'd262144;
parameter    ap_ST_fsm_state20 = 89'd524288;
parameter    ap_ST_fsm_state21 = 89'd1048576;
parameter    ap_ST_fsm_state22 = 89'd2097152;
parameter    ap_ST_fsm_state23 = 89'd4194304;
parameter    ap_ST_fsm_state24 = 89'd8388608;
parameter    ap_ST_fsm_state25 = 89'd16777216;
parameter    ap_ST_fsm_state26 = 89'd33554432;
parameter    ap_ST_fsm_state27 = 89'd67108864;
parameter    ap_ST_fsm_state28 = 89'd134217728;
parameter    ap_ST_fsm_state29 = 89'd268435456;
parameter    ap_ST_fsm_state30 = 89'd536870912;
parameter    ap_ST_fsm_state31 = 89'd1073741824;
parameter    ap_ST_fsm_state32 = 89'd2147483648;
parameter    ap_ST_fsm_state33 = 89'd4294967296;
parameter    ap_ST_fsm_state34 = 89'd8589934592;
parameter    ap_ST_fsm_state35 = 89'd17179869184;
parameter    ap_ST_fsm_state36 = 89'd34359738368;
parameter    ap_ST_fsm_state37 = 89'd68719476736;
parameter    ap_ST_fsm_state38 = 89'd137438953472;
parameter    ap_ST_fsm_state39 = 89'd274877906944;
parameter    ap_ST_fsm_state40 = 89'd549755813888;
parameter    ap_ST_fsm_state41 = 89'd1099511627776;
parameter    ap_ST_fsm_state42 = 89'd2199023255552;
parameter    ap_ST_fsm_state43 = 89'd4398046511104;
parameter    ap_ST_fsm_state44 = 89'd8796093022208;
parameter    ap_ST_fsm_state45 = 89'd17592186044416;
parameter    ap_ST_fsm_state46 = 89'd35184372088832;
parameter    ap_ST_fsm_state47 = 89'd70368744177664;
parameter    ap_ST_fsm_state48 = 89'd140737488355328;
parameter    ap_ST_fsm_state49 = 89'd281474976710656;
parameter    ap_ST_fsm_state50 = 89'd562949953421312;
parameter    ap_ST_fsm_state51 = 89'd1125899906842624;
parameter    ap_ST_fsm_state52 = 89'd2251799813685248;
parameter    ap_ST_fsm_state53 = 89'd4503599627370496;
parameter    ap_ST_fsm_state54 = 89'd9007199254740992;
parameter    ap_ST_fsm_state55 = 89'd18014398509481984;
parameter    ap_ST_fsm_state56 = 89'd36028797018963968;
parameter    ap_ST_fsm_state57 = 89'd72057594037927936;
parameter    ap_ST_fsm_state58 = 89'd144115188075855872;
parameter    ap_ST_fsm_state59 = 89'd288230376151711744;
parameter    ap_ST_fsm_state60 = 89'd576460752303423488;
parameter    ap_ST_fsm_state61 = 89'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 89'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 89'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 89'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 89'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 89'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 89'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 89'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 89'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 89'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 89'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 89'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 89'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 89'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 89'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 89'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 89'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 89'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 89'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 89'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 89'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 89'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 89'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 89'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 89'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 89'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 89'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 89'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 89'd309485009821345068724781056;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] y_I_V_V_dout;
input   y_I_V_V_empty_n;
output   y_I_V_V_read;
input  [17:0] y_Q_V_V_dout;
input   y_Q_V_V_empty_n;
output   y_Q_V_V_read;
output  [17:0] y_demod_d_V_V_din;
input   y_demod_d_V_V_full_n;
output   y_demod_d_V_V_write;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_I_V_V_read;
reg y_Q_V_V_read;
reg y_demod_d_V_V_write;

(* fsm_encoding = "none" *) reg   [88:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] cos_table_address0;
reg    cos_table_ce0;
wire   [8:0] cos_table_q0;
wire   [6:0] sin_table_address0;
reg    sin_table_ce0;
wire   [8:0] sin_table_q0;
wire   [4:0] coef_address0;
reg    coef_ce0;
wire   [9:0] coef_q0;
reg    y_I_V_V_blk_n;
wire    ap_CS_fsm_state17;
wire   [0:0] icmp_ln176_fu_846_p2;
reg    y_Q_V_V_blk_n;
reg    y_demod_d_V_V_blk_n;
wire    ap_CS_fsm_state89;
reg   [0:0] icmp_ln219_reg_1751;
reg   [0:0] icmp_ln225_reg_1760;
wire   [2:0] trunc_ln176_fu_842_p1;
reg   [2:0] trunc_ln176_reg_1557;
reg    ap_block_state17;
wire   [16:0] l_fu_852_p2;
reg   [16:0] l_reg_1565;
wire   [17:0] value_V_4_fu_870_p3;
reg   [17:0] value_V_4_reg_1570;
wire   [9:0] select_ln850_fu_920_p3;
reg   [9:0] select_ln850_reg_1575;
wire   [5:0] idx_1_fu_933_p1;
reg   [5:0] idx_1_reg_1593;
reg  signed [17:0] tmp_V_1_reg_1601;
reg   [17:0] tmp_V_2_reg_1606;
wire   [0:0] icmp_ln42_fu_937_p2;
reg   [0:0] icmp_ln42_reg_1611;
wire   [0:0] and_ln46_fu_957_p2;
reg   [0:0] and_ln46_reg_1615;
wire   [0:0] grp_fu_800_p2;
reg   [0:0] and_ln50_reg_1619;
wire   [0:0] grp_fu_826_p2;
reg   [0:0] and_ln54_reg_1623;
wire   [9:0] zext_ln55_fu_963_p1;
wire   [9:0] zext_ln51_1_fu_977_p1;
wire    ap_CS_fsm_state18;
reg   [8:0] p_Val2_9_reg_1642;
wire    ap_CS_fsm_state19;
wire  signed [26:0] r_V_fu_1054_p1;
reg  signed [26:0] r_V_reg_1648;
wire    ap_CS_fsm_state20;
wire  signed [26:0] sext_ln1118_fu_1058_p1;
reg  signed [26:0] sext_ln1118_reg_1653;
wire  signed [26:0] r_V_14_fu_1470_p2;
reg  signed [26:0] r_V_14_reg_1658;
wire   [0:0] icmp_ln190_fu_1159_p2;
reg   [0:0] icmp_ln190_reg_1677;
wire   [0:0] icmp_ln195_fu_1164_p2;
reg   [0:0] icmp_ln195_reg_1684;
wire   [8:0] p_Val2_12_fu_1175_p3;
reg   [8:0] p_Val2_12_reg_1689;
wire    ap_CS_fsm_state21;
reg   [17:0] tmp_r_V_reg_1694;
wire    ap_CS_fsm_state22;
reg   [17:0] tmp_i_V_reg_1700;
wire   [17:0] tmp_r_V_4_fu_1246_p3;
reg   [17:0] tmp_r_V_4_reg_1706;
wire    ap_CS_fsm_state23;
wire   [17:0] tmp_i_V_4_fu_1260_p3;
reg   [17:0] tmp_i_V_4_reg_1711;
wire   [4:0] i_fu_1274_p2;
reg   [4:0] i_reg_1719;
wire    ap_CS_fsm_state24;
wire   [63:0] zext_ln210_fu_1280_p1;
reg   [63:0] zext_ln210_reg_1724;
wire   [0:0] icmp_ln209_fu_1268_p2;
wire   [0:0] icmp_ln210_fu_1285_p2;
reg   [0:0] icmp_ln210_reg_1730;
wire   [0:0] icmp_ln219_fu_1297_p2;
wire   [17:0] dii_V_fu_1308_p2;
reg  signed [17:0] dii_V_reg_1755;
wire   [0:0] icmp_ln225_fu_1324_p2;
wire  signed [35:0] r_V_20_fu_1496_p2;
reg  signed [35:0] r_V_20_reg_1764;
wire  signed [35:0] r_V_22_fu_1502_p2;
reg  signed [35:0] r_V_22_reg_1769;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire   [16:0] select_ln233_fu_1457_p3;
reg    ap_predicate_op427_write_state89;
reg    ap_block_state89;
wire   [17:0] add_ln176_fu_1465_p2;
reg   [4:0] hwin_I_V_address0;
reg    hwin_I_V_ce0;
reg    hwin_I_V_we0;
wire   [17:0] hwin_I_V_q0;
reg   [4:0] hwin_Q_V_address0;
reg    hwin_Q_V_ce0;
reg    hwin_Q_V_we0;
reg   [17:0] hwin_Q_V_d0;
reg   [4:0] hwin_Q_V_address1;
reg    hwin_Q_V_ce1;
reg    hwin_Q_V_we1;
wire   [17:0] hwin_Q_V_q1;
reg   [17:0] value_V_3_reg_619;
wire    ap_CS_fsm_state16;
reg   [16:0] l_0_reg_630;
reg   [16:0] phi_urem_reg_641;
reg   [9:0] ap_phi_mux_idx_3_i_phi_fu_657_p10;
reg   [9:0] idx_3_i_reg_653;
wire   [9:0] zext_ln59_fu_1032_p1;
reg   [0:0] sign_3_i_reg_670;
wire   [9:0] zext_ln16_1_fu_1149_p1;
reg   [9:0] ap_phi_mux_idx_3_i9_phi_fu_695_p10;
wire   [0:0] and_ln11_fu_1074_p2;
wire   [9:0] zext_ln20_fu_1136_p1;
wire   [9:0] zext_ln24_fu_1131_p1;
reg   [0:0] sign_3_i10_reg_708;
reg  signed [17:0] p_Val2_s_reg_730;
reg  signed [17:0] p_Val2_31_reg_742;
reg   [4:0] i_0_reg_754;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire  signed [63:0] sext_ln1265_fu_1037_p1;
wire  signed [63:0] sext_ln1265_1_fu_1154_p1;
wire   [63:0] zext_ln210_1_fu_1291_p1;
reg   [17:0] p_Val2_1_fu_252;
reg   [17:0] p_Val2_2_fu_256;
wire  signed [17:0] select_ln210_1_fu_1370_p3;
wire   [17:0] select_ln210_fu_1338_p3;
reg   [9:0] grp_fu_765_p0;
reg   [9:0] grp_fu_770_p1;
wire   [3:0] grp_fu_770_p4;
reg   [9:0] grp_fu_785_p1;
wire   [2:0] grp_fu_785_p4;
wire   [0:0] grp_fu_779_p2;
wire   [0:0] grp_fu_794_p2;
reg   [9:0] grp_fu_806_p1;
wire   [2:0] grp_fu_806_p4;
reg   [9:0] grp_fu_821_p0;
wire   [0:0] grp_fu_815_p2;
wire   [0:0] grp_fu_821_p2;
wire   [0:0] icmp_ln1494_fu_858_p2;
wire   [17:0] value_V_fu_864_p2;
wire   [7:0] trunc_ln851_fu_896_p1;
wire   [9:0] ret_V_fu_878_p4;
wire   [0:0] icmp_ln851_fu_900_p2;
wire   [9:0] ret_V_1_fu_906_p2;
wire   [0:0] p_Result_s_fu_888_p3;
wire   [9:0] select_ln851_fu_912_p3;
wire   [0:0] tmp_2_fu_943_p3;
wire   [0:0] grp_fu_765_p2;
wire   [0:0] xor_ln46_fu_951_p2;
wire   [6:0] zext_ln51_fu_967_p1;
wire   [6:0] idx_fu_971_p2;
wire   [5:0] trunc_ln59_fu_988_p1;
wire   [5:0] sub_ln59_fu_991_p2;
wire   [6:0] tmp_10_fu_997_p3;
wire   [0:0] tmp_7_fu_981_p3;
wire   [6:0] sub_ln59_1_fu_1005_p2;
wire   [6:0] tmp_4_fu_1011_p3;
wire   [6:0] select_ln59_fu_1018_p3;
wire   [6:0] idx_2_fu_1026_p2;
wire   [8:0] sub_ln703_fu_1042_p2;
wire  signed [8:0] p_Val2_10_fu_1047_p3;
wire   [0:0] tmp_11_fu_1061_p3;
wire   [0:0] xor_ln11_fu_1068_p2;
wire   [5:0] trunc_ln24_fu_1087_p1;
wire   [5:0] sub_ln24_fu_1090_p2;
wire   [6:0] tmp_16_fu_1096_p3;
wire   [0:0] tmp_15_fu_1080_p3;
wire   [6:0] sub_ln24_1_fu_1104_p2;
wire   [6:0] tmp_8_fu_1110_p3;
wire   [6:0] select_ln24_fu_1117_p3;
wire   [6:0] idx_4_fu_1125_p2;
wire   [6:0] zext_ln16_fu_1140_p1;
wire   [6:0] idx_3_fu_1143_p2;
wire   [8:0] sub_ln703_1_fu_1169_p2;
wire  signed [26:0] grp_fu_1476_p3;
wire  signed [26:0] r_V_16_fu_1484_p2;
wire  signed [26:0] r_V_17_fu_1490_p2;
wire   [27:0] zext_ln703_fu_1198_p1;
wire   [27:0] zext_ln703_1_fu_1201_p1;
wire   [27:0] ret_V_7_fu_1204_p2;
wire   [17:0] tmp_r_V_2_fu_1220_p2;
wire   [0:0] xor_ln190_fu_1236_p2;
wire   [0:0] and_ln195_fu_1241_p2;
wire   [17:0] tmp_r_V_3_fu_1230_p3;
wire   [17:0] tmp_i_V_2_fu_1225_p2;
wire   [17:0] tmp_i_V_3_fu_1254_p3;
wire   [6:0] trunc_ln225_fu_1320_p1;
wire  signed [17:0] dqq_V_fu_1314_p2;
wire  signed [31:0] grp_fu_1508_p3;
wire  signed [31:0] grp_fu_1517_p3;
wire  signed [35:0] grp_fu_1526_p3;
wire  signed [36:0] grp_fu_1534_p3;
wire   [59:0] grp_fu_1418_p0;
wire   [59:0] grp_fu_1418_p2;
wire   [16:0] add_ln233_fu_1445_p2;
wire   [0:0] icmp_ln233_fu_1451_p2;
wire  signed [8:0] grp_fu_1476_p0;
wire  signed [26:0] r_V_2_fu_1183_p1;
wire  signed [17:0] grp_fu_1476_p1;
wire  signed [26:0] sext_ln1118_1_fu_1186_p1;
wire  signed [8:0] r_V_16_fu_1484_p0;
wire  signed [17:0] r_V_16_fu_1484_p1;
wire  signed [8:0] r_V_17_fu_1490_p0;
wire  signed [17:0] r_V_17_fu_1490_p1;
wire  signed [17:0] r_V_20_fu_1496_p0;
wire  signed [35:0] r_V_8_fu_1330_p1;
wire  signed [17:0] r_V_22_fu_1502_p0;
wire  signed [17:0] r_V_22_fu_1502_p1;
wire   [9:0] grp_fu_1508_p0;
wire   [27:0] zext_ln1118_fu_1349_p1;
wire   [31:0] grp_fu_1508_p2;
wire   [9:0] grp_fu_1517_p0;
wire   [31:0] grp_fu_1517_p2;
wire  signed [17:0] grp_fu_1526_p0;
wire  signed [35:0] r_V_10_fu_1398_p1;
wire  signed [17:0] grp_fu_1534_p0;
wire  signed [17:0] grp_fu_1534_p1;
reg    grp_fu_1418_ap_start;
wire    grp_fu_1418_ap_done;
reg    grp_fu_1418_ce;
reg   [88:0] ap_NS_fsm;
reg    ap_condition_403;
reg    ap_condition_407;
reg    ap_condition_411;

// power-on initialization
initial begin
#0 ap_CS_fsm = 89'd1;
end

demodulationFM_cobkb #(
    .DataWidth( 9 ),
    .AddressRange( 65 ),
    .AddressWidth( 7 ))
cos_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cos_table_address0),
    .ce0(cos_table_ce0),
    .q0(cos_table_q0)
);

demodulationFM_sicud #(
    .DataWidth( 9 ),
    .AddressRange( 65 ),
    .AddressWidth( 7 ))
sin_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sin_table_address0),
    .ce0(sin_table_ce0),
    .q0(sin_table_q0)
);

demodulationFM_coef #(
    .DataWidth( 10 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
coef_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(coef_address0),
    .ce0(coef_ce0),
    .q0(coef_q0)
);

demodulationFM_hwdEe #(
    .DataWidth( 18 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
hwin_I_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(hwin_I_V_address0),
    .ce0(hwin_I_V_ce0),
    .we0(hwin_I_V_we0),
    .d0(select_ln210_fu_1338_p3),
    .q0(hwin_I_V_q0)
);

demodulationFM_hweOg #(
    .DataWidth( 18 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
hwin_Q_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(hwin_Q_V_address0),
    .ce0(hwin_Q_V_ce0),
    .we0(hwin_Q_V_we0),
    .d0(hwin_Q_V_d0),
    .address1(hwin_Q_V_address1),
    .ce1(hwin_Q_V_ce1),
    .we1(hwin_Q_V_we1),
    .d1(18'd0),
    .q1(hwin_Q_V_q1)
);

demodulationFM_sdfYi #(
    .ID( 1 ),
    .NUM_STAGE( 64 ),
    .din0_WIDTH( 60 ),
    .din1_WIDTH( 37 ),
    .dout_WIDTH( 60 ))
demodulationFM_sdfYi_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1418_ap_start),
    .done(grp_fu_1418_ap_done),
    .din0(grp_fu_1418_p0),
    .din1(grp_fu_1534_p3),
    .ce(grp_fu_1418_ce),
    .dout(grp_fu_1418_p2)
);

demodulationFM_mug8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 27 ))
demodulationFM_mug8j_U2(
    .din0(tmp_V_1_reg_1601),
    .din1(p_Val2_10_fu_1047_p3),
    .dout(r_V_14_fu_1470_p2)
);

demodulationFM_mahbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 27 ),
    .dout_WIDTH( 27 ))
demodulationFM_mahbi_U3(
    .din0(grp_fu_1476_p0),
    .din1(grp_fu_1476_p1),
    .din2(r_V_14_reg_1658),
    .dout(grp_fu_1476_p3)
);

demodulationFM_muibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 27 ))
demodulationFM_muibs_U4(
    .din0(r_V_16_fu_1484_p0),
    .din1(r_V_16_fu_1484_p1),
    .dout(r_V_16_fu_1484_p2)
);

demodulationFM_muibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 27 ))
demodulationFM_muibs_U5(
    .din0(r_V_17_fu_1490_p0),
    .din1(r_V_17_fu_1490_p1),
    .dout(r_V_17_fu_1490_p2)
);

demodulationFM_mujbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
demodulationFM_mujbC_U6(
    .din0(r_V_20_fu_1496_p0),
    .din1(dqq_V_fu_1314_p2),
    .dout(r_V_20_fu_1496_p2)
);

demodulationFM_mujbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
demodulationFM_mujbC_U7(
    .din0(r_V_22_fu_1502_p0),
    .din1(r_V_22_fu_1502_p1),
    .dout(r_V_22_fu_1502_p2)
);

demodulationFM_makbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
demodulationFM_makbM_U8(
    .din0(grp_fu_1508_p0),
    .din1(select_ln210_fu_1338_p3),
    .din2(grp_fu_1508_p2),
    .dout(grp_fu_1508_p3)
);

demodulationFM_makbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
demodulationFM_makbM_U9(
    .din0(grp_fu_1517_p0),
    .din1(select_ln210_1_fu_1370_p3),
    .din2(grp_fu_1517_p2),
    .dout(grp_fu_1517_p3)
);

demodulationFM_malbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 36 ),
    .dout_WIDTH( 36 ))
demodulationFM_malbW_U10(
    .din0(grp_fu_1526_p0),
    .din1(dii_V_reg_1755),
    .din2(r_V_20_reg_1764),
    .dout(grp_fu_1526_p3)
);

demodulationFM_mamb6 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 36 ),
    .dout_WIDTH( 37 ))
demodulationFM_mamb6_U11(
    .din0(grp_fu_1534_p0),
    .din1(grp_fu_1534_p1),
    .din2(r_V_22_reg_1769),
    .dout(grp_fu_1534_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        i_0_reg_754 <= i_reg_1719;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        i_0_reg_754 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (1'd1 == and_ln46_fu_957_p2) & (icmp_ln42_fu_937_p2 == 1'd0) & (icmp_ln176_fu_846_p2 == 1'd0))) begin
        idx_3_i_reg_653 <= select_ln850_fu_920_p3;
    end else if ((~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (icmp_ln42_fu_937_p2 == 1'd1) & (icmp_ln176_fu_846_p2 == 1'd0))) begin
        idx_3_i_reg_653 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state18) & (1'd0 == and_ln54_reg_1623) & (1'd0 == and_ln50_reg_1619) & (1'd0 == and_ln46_reg_1615) & (icmp_ln42_reg_1611 == 1'd0))) begin
        idx_3_i_reg_653 <= zext_ln59_fu_1032_p1;
    end else if ((~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (grp_fu_826_p2 == 1'd1) & (grp_fu_800_p2 == 1'd0) & (1'd0 == and_ln46_fu_957_p2) & (icmp_ln42_fu_937_p2 == 1'd0) & (icmp_ln176_fu_846_p2 == 1'd0))) begin
        idx_3_i_reg_653 <= zext_ln55_fu_963_p1;
    end else if ((~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (grp_fu_800_p2 == 1'd1) & (1'd0 == and_ln46_fu_957_p2) & (icmp_ln42_fu_937_p2 == 1'd0) & (icmp_ln176_fu_846_p2 == 1'd0))) begin
        idx_3_i_reg_653 <= zext_ln51_1_fu_977_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((y_demod_d_V_V_full_n == 1'b0) & (ap_predicate_op427_write_state89 == 1'b1)) & (1'b1 == ap_CS_fsm_state89))) begin
        l_0_reg_630 <= l_reg_1565;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        l_0_reg_630 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((y_demod_d_V_V_full_n == 1'b0) & (ap_predicate_op427_write_state89 == 1'b1)) & (1'b1 == ap_CS_fsm_state89) & (icmp_ln219_reg_1751 == 1'd1))) begin
        p_Val2_1_fu_252 <= p_Val2_s_reg_730;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_1_fu_252 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((y_demod_d_V_V_full_n == 1'b0) & (ap_predicate_op427_write_state89 == 1'b1)) & (1'b1 == ap_CS_fsm_state89) & (icmp_ln219_reg_1751 == 1'd1))) begin
        p_Val2_2_fu_256 <= p_Val2_31_reg_742;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_2_fu_256 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        p_Val2_31_reg_742 <= {{grp_fu_1517_p3[31:14]}};
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        p_Val2_31_reg_742 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        p_Val2_s_reg_730 <= {{grp_fu_1508_p3[31:14]}};
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        p_Val2_s_reg_730 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((y_demod_d_V_V_full_n == 1'b0) & (ap_predicate_op427_write_state89 == 1'b1)) & (1'b1 == ap_CS_fsm_state89))) begin
        phi_urem_reg_641 <= select_ln233_fu_1457_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        phi_urem_reg_641 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state20) & (1'd0 == and_ln11_fu_1074_p2) & (grp_fu_826_p2 == 1'd0) & (grp_fu_800_p2 == 1'd0) & (icmp_ln42_reg_1611 == 1'd0)) | ((1'b1 == ap_CS_fsm_state20) & (grp_fu_826_p2 == 1'd1) & (1'd0 == and_ln11_fu_1074_p2) & (grp_fu_800_p2 == 1'd0) & (icmp_ln42_reg_1611 == 1'd0)))) begin
        sign_3_i10_reg_708 <= 1'd1;
    end else if ((((1'b1 == ap_CS_fsm_state20) & (icmp_ln42_reg_1611 == 1'd1)) | ((1'b1 == ap_CS_fsm_state20) & (1'd1 == and_ln11_fu_1074_p2) & (icmp_ln42_reg_1611 == 1'd0)) | ((1'b1 == ap_CS_fsm_state20) & (grp_fu_800_p2 == 1'd1) & (1'd0 == and_ln11_fu_1074_p2) & (icmp_ln42_reg_1611 == 1'd0)))) begin
        sign_3_i10_reg_708 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state18) & (1'd0 == and_ln54_reg_1623) & (1'd0 == and_ln50_reg_1619) & (1'd0 == and_ln46_reg_1615) & (icmp_ln42_reg_1611 == 1'd0)) | (~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (icmp_ln42_fu_937_p2 == 1'd1) & (icmp_ln176_fu_846_p2 == 1'd0)) | (~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (1'd1 == and_ln46_fu_957_p2) & (icmp_ln42_fu_937_p2 == 1'd0) & (icmp_ln176_fu_846_p2 == 1'd0)))) begin
        sign_3_i_reg_670 <= 1'd0;
    end else if (((~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (grp_fu_800_p2 == 1'd1) & (1'd0 == and_ln46_fu_957_p2) & (icmp_ln42_fu_937_p2 == 1'd0) & (icmp_ln176_fu_846_p2 == 1'd0)) | (~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (grp_fu_826_p2 == 1'd1) & (grp_fu_800_p2 == 1'd0) & (1'd0 == and_ln46_fu_957_p2) & (icmp_ln42_fu_937_p2 == 1'd0) & (icmp_ln176_fu_846_p2 == 1'd0)))) begin
        sign_3_i_reg_670 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((y_demod_d_V_V_full_n == 1'b0) & (ap_predicate_op427_write_state89 == 1'b1)) & (1'b1 == ap_CS_fsm_state89))) begin
        value_V_3_reg_619 <= add_ln176_fu_1465_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        value_V_3_reg_619 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (icmp_ln42_fu_937_p2 == 1'd0) & (icmp_ln176_fu_846_p2 == 1'd0))) begin
        and_ln46_reg_1615 <= and_ln46_fu_957_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (1'd0 == and_ln46_fu_957_p2) & (icmp_ln42_fu_937_p2 == 1'd0) & (icmp_ln176_fu_846_p2 == 1'd0))) begin
        and_ln50_reg_1619 <= grp_fu_800_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (grp_fu_800_p2 == 1'd0) & (1'd0 == and_ln46_fu_957_p2) & (icmp_ln42_fu_937_p2 == 1'd0) & (icmp_ln176_fu_846_p2 == 1'd0))) begin
        and_ln54_reg_1623 <= grp_fu_826_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln219_fu_1297_p2 == 1'd1) & (icmp_ln209_fu_1268_p2 == 1'd1))) begin
        dii_V_reg_1755 <= dii_V_fu_1308_p2;
        icmp_ln225_reg_1760 <= icmp_ln225_fu_1324_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i_reg_1719 <= i_fu_1274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        icmp_ln190_reg_1677 <= icmp_ln190_fu_1159_p2;
        icmp_ln195_reg_1684 <= icmp_ln195_fu_1164_p2;
        r_V_14_reg_1658 <= r_V_14_fu_1470_p2;
        r_V_reg_1648 <= r_V_fu_1054_p1;
        sext_ln1118_reg_1653 <= sext_ln1118_fu_1058_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln209_fu_1268_p2 == 1'd0))) begin
        icmp_ln210_reg_1730 <= icmp_ln210_fu_1285_p2;
        zext_ln210_reg_1724[4 : 0] <= zext_ln210_fu_1280_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln209_fu_1268_p2 == 1'd1))) begin
        icmp_ln219_reg_1751 <= icmp_ln219_fu_1297_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (icmp_ln176_fu_846_p2 == 1'd0))) begin
        icmp_ln42_reg_1611 <= icmp_ln42_fu_937_p2;
        idx_1_reg_1593 <= idx_1_fu_933_p1;
        select_ln850_reg_1575 <= select_ln850_fu_920_p3;
        tmp_V_1_reg_1601 <= y_I_V_V_dout;
        tmp_V_2_reg_1606 <= y_Q_V_V_dout;
        value_V_4_reg_1570 <= value_V_4_fu_870_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17))) begin
        l_reg_1565 <= l_fu_852_p2;
        trunc_ln176_reg_1557 <= trunc_ln176_fu_842_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        p_Val2_12_reg_1689 <= p_Val2_12_fu_1175_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        p_Val2_9_reg_1642 <= cos_table_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln225_fu_1324_p2 == 1'd1) & (icmp_ln219_fu_1297_p2 == 1'd1) & (icmp_ln209_fu_1268_p2 == 1'd1))) begin
        r_V_20_reg_1764 <= r_V_20_fu_1496_p2;
        r_V_22_reg_1769 <= r_V_22_fu_1502_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_i_V_4_reg_1711 <= tmp_i_V_4_fu_1260_p3;
        tmp_r_V_4_reg_1706 <= tmp_r_V_4_fu_1246_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_i_V_reg_1700 <= {{ret_V_7_fu_1204_p2[25:8]}};
        tmp_r_V_reg_1694 <= {{grp_fu_1476_p3[25:8]}};
    end
end

always @ (*) begin
    if ((~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (icmp_ln176_fu_846_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        if (((1'd1 == and_ln11_fu_1074_p2) & (icmp_ln42_reg_1611 == 1'd0))) begin
            ap_phi_mux_idx_3_i9_phi_fu_695_p10 = select_ln850_reg_1575;
        end else if ((icmp_ln42_reg_1611 == 1'd1)) begin
            ap_phi_mux_idx_3_i9_phi_fu_695_p10 = 10'd0;
        end else if ((1'b1 == ap_condition_411)) begin
            ap_phi_mux_idx_3_i9_phi_fu_695_p10 = zext_ln24_fu_1131_p1;
        end else if ((1'b1 == ap_condition_407)) begin
            ap_phi_mux_idx_3_i9_phi_fu_695_p10 = zext_ln20_fu_1136_p1;
        end else if ((1'b1 == ap_condition_403)) begin
            ap_phi_mux_idx_3_i9_phi_fu_695_p10 = zext_ln16_1_fu_1149_p1;
        end else begin
            ap_phi_mux_idx_3_i9_phi_fu_695_p10 = 'bx;
        end
    end else begin
        ap_phi_mux_idx_3_i9_phi_fu_695_p10 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (1'd0 == and_ln54_reg_1623) & (1'd0 == and_ln50_reg_1619) & (1'd0 == and_ln46_reg_1615) & (icmp_ln42_reg_1611 == 1'd0))) begin
        ap_phi_mux_idx_3_i_phi_fu_657_p10 = zext_ln59_fu_1032_p1;
    end else begin
        ap_phi_mux_idx_3_i_phi_fu_657_p10 = idx_3_i_reg_653;
    end
end

always @ (*) begin
    if ((~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (icmp_ln176_fu_846_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        coef_ce0 = 1'b1;
    end else begin
        coef_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        cos_table_ce0 = 1'b1;
    end else begin
        cos_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_1418_ap_start = 1'b1;
    end else begin
        grp_fu_1418_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_1418_ce = 1'b0;
    end else begin
        grp_fu_1418_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_765_p0 = select_ln850_reg_1575;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_765_p0 = select_ln850_fu_920_p3;
    end else begin
        grp_fu_765_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_770_p1 = select_ln850_reg_1575;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_770_p1 = select_ln850_fu_920_p3;
    end else begin
        grp_fu_770_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_785_p1 = select_ln850_reg_1575;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_785_p1 = select_ln850_fu_920_p3;
    end else begin
        grp_fu_785_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_806_p1 = select_ln850_reg_1575;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_806_p1 = select_ln850_fu_920_p3;
    end else begin
        grp_fu_806_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_821_p0 = select_ln850_reg_1575;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_821_p0 = select_ln850_fu_920_p3;
    end else begin
        grp_fu_821_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        hwin_I_V_address0 = zext_ln210_reg_1724;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        hwin_I_V_address0 = zext_ln210_1_fu_1291_p1;
    end else begin
        hwin_I_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        hwin_I_V_ce0 = 1'b1;
    end else begin
        hwin_I_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        hwin_I_V_we0 = 1'b1;
    end else begin
        hwin_I_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        hwin_Q_V_address0 = zext_ln210_reg_1724;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        hwin_Q_V_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        hwin_Q_V_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        hwin_Q_V_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        hwin_Q_V_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        hwin_Q_V_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        hwin_Q_V_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        hwin_Q_V_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        hwin_Q_V_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        hwin_Q_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        hwin_Q_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        hwin_Q_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        hwin_Q_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        hwin_Q_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        hwin_Q_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hwin_Q_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        hwin_Q_V_address0 = 64'd0;
    end else begin
        hwin_Q_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        hwin_Q_V_address1 = zext_ln210_1_fu_1291_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        hwin_Q_V_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        hwin_Q_V_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        hwin_Q_V_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        hwin_Q_V_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        hwin_Q_V_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        hwin_Q_V_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        hwin_Q_V_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        hwin_Q_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        hwin_Q_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        hwin_Q_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        hwin_Q_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        hwin_Q_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        hwin_Q_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        hwin_Q_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hwin_Q_V_address1 = 64'd2;
    end else begin
        hwin_Q_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state25) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        hwin_Q_V_ce0 = 1'b1;
    end else begin
        hwin_Q_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state24))) begin
        hwin_Q_V_ce1 = 1'b1;
    end else begin
        hwin_Q_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        hwin_Q_V_d0 = select_ln210_1_fu_1370_p3;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state1))) begin
        hwin_Q_V_d0 = 18'd0;
    end else begin
        hwin_Q_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state25) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        hwin_Q_V_we0 = 1'b1;
    end else begin
        hwin_Q_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16))) begin
        hwin_Q_V_we1 = 1'b1;
    end else begin
        hwin_Q_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        sin_table_ce0 = 1'b1;
    end else begin
        sin_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln176_fu_846_p2 == 1'd0))) begin
        y_I_V_V_blk_n = y_I_V_V_empty_n;
    end else begin
        y_I_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (icmp_ln176_fu_846_p2 == 1'd0))) begin
        y_I_V_V_read = 1'b1;
    end else begin
        y_I_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln176_fu_846_p2 == 1'd0))) begin
        y_Q_V_V_blk_n = y_Q_V_V_empty_n;
    end else begin
        y_Q_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (icmp_ln176_fu_846_p2 == 1'd0))) begin
        y_Q_V_V_read = 1'b1;
    end else begin
        y_Q_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state89) & (icmp_ln225_reg_1760 == 1'd1) & (icmp_ln219_reg_1751 == 1'd1))) begin
        y_demod_d_V_V_blk_n = y_demod_d_V_V_full_n;
    end else begin
        y_demod_d_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((y_demod_d_V_V_full_n == 1'b0) & (ap_predicate_op427_write_state89 == 1'b1)) & (1'b1 == ap_CS_fsm_state89) & (ap_predicate_op427_write_state89 == 1'b1))) begin
        y_demod_d_V_V_write = 1'b1;
    end else begin
        y_demod_d_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if ((~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (icmp_ln176_fu_846_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state17) & (icmp_ln176_fu_846_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln225_fu_1324_p2 == 1'd1) & (icmp_ln219_fu_1297_p2 == 1'd1) & (icmp_ln209_fu_1268_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else if (((1'b1 == ap_CS_fsm_state24) & (((icmp_ln209_fu_1268_p2 == 1'd1) & (icmp_ln219_fu_1297_p2 == 1'd0)) | ((icmp_ln209_fu_1268_p2 == 1'd1) & (icmp_ln225_fu_1324_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            if ((~((y_demod_d_V_V_full_n == 1'b0) & (ap_predicate_op427_write_state89 == 1'b1)) & (1'b1 == ap_CS_fsm_state89))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln176_fu_1465_p2 = (value_V_4_reg_1570 + 18'd4666);

assign add_ln233_fu_1445_p2 = (phi_urem_reg_641 + 17'd1);

assign and_ln11_fu_1074_p2 = (xor_ln11_fu_1068_p2 & grp_fu_765_p2);

assign and_ln195_fu_1241_p2 = (xor_ln190_fu_1236_p2 & icmp_ln195_reg_1684);

assign and_ln46_fu_957_p2 = (xor_ln46_fu_951_p2 & grp_fu_765_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state17 = (((y_Q_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)) | ((y_I_V_V_empty_n == 1'b0) & (icmp_ln176_fu_846_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_state89 = ((y_demod_d_V_V_full_n == 1'b0) & (ap_predicate_op427_write_state89 == 1'b1));
end

always @ (*) begin
    ap_condition_403 = ((grp_fu_800_p2 == 1'd1) & (1'd0 == and_ln11_fu_1074_p2) & (icmp_ln42_reg_1611 == 1'd0));
end

always @ (*) begin
    ap_condition_407 = ((grp_fu_826_p2 == 1'd1) & (1'd0 == and_ln11_fu_1074_p2) & (grp_fu_800_p2 == 1'd0) & (icmp_ln42_reg_1611 == 1'd0));
end

always @ (*) begin
    ap_condition_411 = ((1'd0 == and_ln11_fu_1074_p2) & (grp_fu_826_p2 == 1'd0) & (grp_fu_800_p2 == 1'd0) & (icmp_ln42_reg_1611 == 1'd0));
end

always @ (*) begin
    ap_predicate_op427_write_state89 = ((icmp_ln225_reg_1760 == 1'd1) & (icmp_ln219_reg_1751 == 1'd1));
end

assign ap_return = 32'd0;

assign coef_address0 = zext_ln210_fu_1280_p1;

assign cos_table_address0 = sext_ln1265_fu_1037_p1;

assign dii_V_fu_1308_p2 = ($signed(p_Val2_s_reg_730) - $signed(p_Val2_1_fu_252));

assign dqq_V_fu_1314_p2 = ($signed(p_Val2_31_reg_742) - $signed(p_Val2_2_fu_256));

assign grp_fu_1418_p0 = {{grp_fu_1526_p3}, {24'd0}};

assign grp_fu_1476_p0 = r_V_2_fu_1183_p1;

assign grp_fu_1476_p1 = sext_ln1118_1_fu_1186_p1;

assign grp_fu_1508_p0 = zext_ln1118_fu_1349_p1;

assign grp_fu_1508_p2 = {{p_Val2_s_reg_730}, {14'd0}};

assign grp_fu_1517_p0 = zext_ln1118_fu_1349_p1;

assign grp_fu_1517_p2 = {{p_Val2_31_reg_742}, {14'd0}};

assign grp_fu_1526_p0 = r_V_10_fu_1398_p1;

assign grp_fu_1534_p0 = r_V_10_fu_1398_p1;

assign grp_fu_1534_p1 = r_V_10_fu_1398_p1;

assign grp_fu_765_p2 = (($signed(grp_fu_765_p0) < $signed(10'd65)) ? 1'b1 : 1'b0);

assign grp_fu_770_p4 = {{grp_fu_770_p1[9:6]}};

assign grp_fu_779_p2 = (($signed(grp_fu_770_p4) > $signed(4'd0)) ? 1'b1 : 1'b0);

assign grp_fu_785_p4 = {{grp_fu_785_p1[9:7]}};

assign grp_fu_794_p2 = (($signed(grp_fu_785_p4) < $signed(3'd1)) ? 1'b1 : 1'b0);

assign grp_fu_800_p2 = (grp_fu_794_p2 & grp_fu_779_p2);

assign grp_fu_806_p4 = {{grp_fu_806_p1[9:7]}};

assign grp_fu_815_p2 = (($signed(grp_fu_806_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign grp_fu_821_p2 = (($signed(grp_fu_821_p0) < $signed(10'd192)) ? 1'b1 : 1'b0);

assign grp_fu_826_p2 = (grp_fu_821_p2 & grp_fu_815_p2);

assign i_fu_1274_p2 = (i_0_reg_754 + 5'd1);

assign icmp_ln1494_fu_858_p2 = (($signed(value_V_3_reg_619) > $signed(18'd65536)) ? 1'b1 : 1'b0);

assign icmp_ln176_fu_846_p2 = ((l_0_reg_630 == 17'd100000) ? 1'b1 : 1'b0);

assign icmp_ln190_fu_1159_p2 = ((select_ln850_reg_1575 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln195_fu_1164_p2 = ((select_ln850_reg_1575 == 10'd64) ? 1'b1 : 1'b0);

assign icmp_ln209_fu_1268_p2 = ((i_0_reg_754 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln210_fu_1285_p2 = ((i_0_reg_754 < 5'd30) ? 1'b1 : 1'b0);

assign icmp_ln219_fu_1297_p2 = ((trunc_ln176_reg_1557 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln225_fu_1324_p2 = ((trunc_ln225_fu_1320_p1 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln233_fu_1451_p2 = ((add_ln233_fu_1445_p2 < 17'd80) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_937_p2 = ((select_ln850_fu_920_p3 == 10'd256) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_900_p2 = ((trunc_ln851_fu_896_p1 == 8'd0) ? 1'b1 : 1'b0);

assign idx_1_fu_933_p1 = select_ln850_fu_920_p3[5:0];

assign idx_2_fu_1026_p2 = ($signed(7'd64) - $signed(select_ln59_fu_1018_p3));

assign idx_3_fu_1143_p2 = ($signed(7'd64) - $signed(zext_ln16_fu_1140_p1));

assign idx_4_fu_1125_p2 = ($signed(7'd64) - $signed(select_ln24_fu_1117_p3));

assign idx_fu_971_p2 = ($signed(7'd64) - $signed(zext_ln51_fu_967_p1));

assign l_fu_852_p2 = (17'd1 + l_0_reg_630);

assign p_Result_s_fu_888_p3 = value_V_4_fu_870_p3[32'd17];

assign p_Val2_10_fu_1047_p3 = ((sign_3_i_reg_670[0:0] === 1'b1) ? sub_ln703_fu_1042_p2 : p_Val2_9_reg_1642);

assign p_Val2_12_fu_1175_p3 = ((sign_3_i10_reg_708[0:0] === 1'b1) ? sub_ln703_1_fu_1169_p2 : sin_table_q0);

assign r_V_10_fu_1398_p1 = p_Val2_31_reg_742;

assign r_V_16_fu_1484_p0 = r_V_reg_1648;

assign r_V_16_fu_1484_p1 = sext_ln1118_1_fu_1186_p1;

assign r_V_17_fu_1490_p0 = r_V_2_fu_1183_p1;

assign r_V_17_fu_1490_p1 = sext_ln1118_reg_1653;

assign r_V_20_fu_1496_p0 = r_V_8_fu_1330_p1;

assign r_V_22_fu_1502_p0 = r_V_8_fu_1330_p1;

assign r_V_22_fu_1502_p1 = r_V_8_fu_1330_p1;

assign r_V_2_fu_1183_p1 = $signed(p_Val2_12_reg_1689);

assign r_V_8_fu_1330_p1 = p_Val2_s_reg_730;

assign r_V_fu_1054_p1 = p_Val2_10_fu_1047_p3;

assign ret_V_1_fu_906_p2 = (10'd1 + ret_V_fu_878_p4);

assign ret_V_7_fu_1204_p2 = (zext_ln703_fu_1198_p1 - zext_ln703_1_fu_1201_p1);

assign ret_V_fu_878_p4 = {{value_V_4_fu_870_p3[17:8]}};

assign select_ln210_1_fu_1370_p3 = ((icmp_ln210_reg_1730[0:0] === 1'b1) ? hwin_Q_V_q1 : tmp_i_V_4_reg_1711);

assign select_ln210_fu_1338_p3 = ((icmp_ln210_reg_1730[0:0] === 1'b1) ? hwin_I_V_q0 : tmp_r_V_4_reg_1706);

assign select_ln233_fu_1457_p3 = ((icmp_ln233_fu_1451_p2[0:0] === 1'b1) ? add_ln233_fu_1445_p2 : 17'd0);

assign select_ln24_fu_1117_p3 = ((tmp_15_fu_1080_p3[0:0] === 1'b1) ? sub_ln24_1_fu_1104_p2 : tmp_8_fu_1110_p3);

assign select_ln59_fu_1018_p3 = ((tmp_7_fu_981_p3[0:0] === 1'b1) ? sub_ln59_1_fu_1005_p2 : tmp_4_fu_1011_p3);

assign select_ln850_fu_920_p3 = ((p_Result_s_fu_888_p3[0:0] === 1'b1) ? select_ln851_fu_912_p3 : ret_V_fu_878_p4);

assign select_ln851_fu_912_p3 = ((icmp_ln851_fu_900_p2[0:0] === 1'b1) ? ret_V_fu_878_p4 : ret_V_1_fu_906_p2);

assign sext_ln1118_1_fu_1186_p1 = $signed(tmp_V_2_reg_1606);

assign sext_ln1118_fu_1058_p1 = tmp_V_1_reg_1601;

assign sext_ln1265_1_fu_1154_p1 = $signed(ap_phi_mux_idx_3_i9_phi_fu_695_p10);

assign sext_ln1265_fu_1037_p1 = $signed(ap_phi_mux_idx_3_i_phi_fu_657_p10);

assign sin_table_address0 = sext_ln1265_1_fu_1154_p1;

assign sub_ln24_1_fu_1104_p2 = (7'd0 - tmp_16_fu_1096_p3);

assign sub_ln24_fu_1090_p2 = (6'd0 - trunc_ln24_fu_1087_p1);

assign sub_ln59_1_fu_1005_p2 = (7'd0 - tmp_10_fu_997_p3);

assign sub_ln59_fu_991_p2 = (6'd0 - trunc_ln59_fu_988_p1);

assign sub_ln703_1_fu_1169_p2 = (9'd0 - sin_table_q0);

assign sub_ln703_fu_1042_p2 = (9'd0 - p_Val2_9_reg_1642);

assign tmp_10_fu_997_p3 = {{1'd0}, {sub_ln59_fu_991_p2}};

assign tmp_11_fu_1061_p3 = select_ln850_reg_1575[32'd9];

assign tmp_15_fu_1080_p3 = select_ln850_reg_1575[32'd9];

assign tmp_16_fu_1096_p3 = {{1'd0}, {sub_ln24_fu_1090_p2}};

assign tmp_2_fu_943_p3 = select_ln850_fu_920_p3[32'd9];

assign tmp_4_fu_1011_p3 = {{1'd0}, {idx_1_reg_1593}};

assign tmp_7_fu_981_p3 = select_ln850_reg_1575[32'd9];

assign tmp_8_fu_1110_p3 = {{1'd0}, {idx_1_reg_1593}};

assign tmp_i_V_2_fu_1225_p2 = (18'd0 - tmp_i_V_reg_1700);

assign tmp_i_V_3_fu_1254_p3 = ((icmp_ln190_reg_1677[0:0] === 1'b1) ? tmp_i_V_2_fu_1225_p2 : tmp_i_V_reg_1700);

assign tmp_i_V_4_fu_1260_p3 = ((and_ln195_fu_1241_p2[0:0] === 1'b1) ? tmp_i_V_2_fu_1225_p2 : tmp_i_V_3_fu_1254_p3);

assign tmp_r_V_2_fu_1220_p2 = (18'd0 - tmp_r_V_reg_1694);

assign tmp_r_V_3_fu_1230_p3 = ((icmp_ln190_reg_1677[0:0] === 1'b1) ? tmp_r_V_2_fu_1220_p2 : tmp_r_V_reg_1694);

assign tmp_r_V_4_fu_1246_p3 = ((and_ln195_fu_1241_p2[0:0] === 1'b1) ? tmp_r_V_2_fu_1220_p2 : tmp_r_V_3_fu_1230_p3);

assign trunc_ln176_fu_842_p1 = l_0_reg_630[2:0];

assign trunc_ln225_fu_1320_p1 = phi_urem_reg_641[6:0];

assign trunc_ln24_fu_1087_p1 = select_ln850_reg_1575[5:0];

assign trunc_ln59_fu_988_p1 = select_ln850_reg_1575[5:0];

assign trunc_ln851_fu_896_p1 = value_V_4_fu_870_p3[7:0];

assign value_V_4_fu_870_p3 = ((icmp_ln1494_fu_858_p2[0:0] === 1'b1) ? value_V_fu_864_p2 : value_V_3_reg_619);

assign value_V_fu_864_p2 = ($signed(18'd196608) + $signed(value_V_3_reg_619));

assign xor_ln11_fu_1068_p2 = (tmp_11_fu_1061_p3 ^ 1'd1);

assign xor_ln190_fu_1236_p2 = (icmp_ln190_reg_1677 ^ 1'd1);

assign xor_ln46_fu_951_p2 = (tmp_2_fu_943_p3 ^ 1'd1);

assign y_demod_d_V_V_din = {{grp_fu_1418_p2[29:12]}};

assign zext_ln1118_fu_1349_p1 = coef_q0;

assign zext_ln16_1_fu_1149_p1 = idx_3_fu_1143_p2;

assign zext_ln16_fu_1140_p1 = idx_1_reg_1593;

assign zext_ln20_fu_1136_p1 = idx_1_reg_1593;

assign zext_ln210_1_fu_1291_p1 = i_fu_1274_p2;

assign zext_ln210_fu_1280_p1 = i_0_reg_754;

assign zext_ln24_fu_1131_p1 = idx_4_fu_1125_p2;

assign zext_ln51_1_fu_977_p1 = idx_fu_971_p2;

assign zext_ln51_fu_967_p1 = idx_1_fu_933_p1;

assign zext_ln55_fu_963_p1 = idx_1_fu_933_p1;

assign zext_ln59_fu_1032_p1 = idx_2_fu_1026_p2;

assign zext_ln703_1_fu_1201_p1 = $unsigned(r_V_17_fu_1490_p2);

assign zext_ln703_fu_1198_p1 = $unsigned(r_V_16_fu_1484_p2);

always @ (posedge ap_clk) begin
    zext_ln210_reg_1724[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //demodulationFM
