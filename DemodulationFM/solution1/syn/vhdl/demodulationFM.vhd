-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity demodulationFM is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_I_V_V_dout : IN STD_LOGIC_VECTOR (17 downto 0);
    y_I_V_V_empty_n : IN STD_LOGIC;
    y_I_V_V_read : OUT STD_LOGIC;
    y_Q_V_V_dout : IN STD_LOGIC_VECTOR (17 downto 0);
    y_Q_V_V_empty_n : IN STD_LOGIC;
    y_Q_V_V_read : OUT STD_LOGIC;
    y_demod_d_V_V_din : OUT STD_LOGIC_VECTOR (17 downto 0);
    y_demod_d_V_V_full_n : IN STD_LOGIC;
    y_demod_d_V_V_write : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of demodulationFM is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "demodulationFM,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.771000,HLS_SYN_LAT=8700016,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=10,HLS_SYN_FF=1395,HLS_SYN_LUT=2210,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (88 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (88 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (88 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (88 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (88 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (88 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (88 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (88 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (88 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (88 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (88 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv10_41 : STD_LOGIC_VECTOR (9 downto 0) := "0001000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_C0 : STD_LOGIC_VECTOR (9 downto 0) := "0011000000";
    constant ap_const_lv17_186A0 : STD_LOGIC_VECTOR (16 downto 0) := "11000011010100000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv18_10000 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_const_lv18_30000 : STD_LOGIC_VECTOR (17 downto 0) := "110000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_100 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_40 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv17_50 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001010000";
    constant ap_const_lv18_123A : STD_LOGIC_VECTOR (17 downto 0) := "000001001000111010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cos_table_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cos_table_ce0 : STD_LOGIC;
    signal cos_table_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sin_table_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sin_table_ce0 : STD_LOGIC;
    signal sin_table_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal coef_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal coef_ce0 : STD_LOGIC;
    signal coef_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_I_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln176_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_Q_V_V_blk_n : STD_LOGIC;
    signal y_demod_d_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal icmp_ln219_reg_1751 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln225_reg_1760 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln176_fu_842_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln176_reg_1557 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state17 : BOOLEAN;
    signal l_fu_852_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal l_reg_1565 : STD_LOGIC_VECTOR (16 downto 0);
    signal value_V_4_fu_870_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal value_V_4_reg_1570 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln850_fu_920_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln850_reg_1575 : STD_LOGIC_VECTOR (9 downto 0);
    signal idx_1_fu_933_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal idx_1_reg_1593 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_V_1_reg_1601 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_V_2_reg_1606 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln42_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1611 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_1615 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_reg_1619 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_reg_1623 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln55_fu_963_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln51_1_fu_977_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal p_Val2_9_reg_1642 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal r_V_fu_1054_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_reg_1648 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal sext_ln1118_fu_1058_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln1118_reg_1653 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_14_fu_1470_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_14_reg_1658 : STD_LOGIC_VECTOR (26 downto 0);
    signal icmp_ln190_fu_1159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln190_reg_1677 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_fu_1164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_reg_1684 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_12_fu_1175_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_12_reg_1689 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_r_V_reg_1694 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_i_V_reg_1700 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_r_V_4_fu_1246_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_r_V_4_reg_1706 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_i_V_4_fu_1260_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_i_V_4_reg_1711 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_fu_1274_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1719 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal zext_ln210_fu_1280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln210_reg_1724 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln209_fu_1268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln210_fu_1285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln210_reg_1730 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln219_fu_1297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dii_V_fu_1308_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal dii_V_reg_1755 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln225_fu_1324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_20_fu_1496_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_20_reg_1764 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_22_fu_1502_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_22_reg_1769 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal select_ln233_fu_1457_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_predicate_op427_write_state89 : BOOLEAN;
    signal ap_block_state89 : BOOLEAN;
    signal add_ln176_fu_1465_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal hwin_I_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal hwin_I_V_ce0 : STD_LOGIC;
    signal hwin_I_V_we0 : STD_LOGIC;
    signal hwin_I_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal hwin_Q_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal hwin_Q_V_ce0 : STD_LOGIC;
    signal hwin_Q_V_we0 : STD_LOGIC;
    signal hwin_Q_V_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal hwin_Q_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal hwin_Q_V_ce1 : STD_LOGIC;
    signal hwin_Q_V_we1 : STD_LOGIC;
    signal hwin_Q_V_q1 : STD_LOGIC_VECTOR (17 downto 0);
    signal value_V_3_reg_619 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal l_0_reg_630 : STD_LOGIC_VECTOR (16 downto 0);
    signal phi_urem_reg_641 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_phi_mux_idx_3_i_phi_fu_657_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal idx_3_i_reg_653 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln59_fu_1032_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sign_3_i_reg_670 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln16_1_fu_1149_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_idx_3_i9_phi_fu_695_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln11_fu_1074_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln20_fu_1136_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln24_fu_1131_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sign_3_i10_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_730 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_31_reg_742 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_0_reg_754 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal sext_ln1265_fu_1037_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1265_1_fu_1154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln210_1_fu_1291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_1_fu_252 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_2_fu_256 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln210_1_fu_1370_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln210_fu_1338_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_765_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_770_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_770_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_785_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_785_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_806_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_806_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_821_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal value_V_fu_864_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln851_fu_896_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_878_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln851_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_906_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_s_fu_888_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln851_fu_912_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_943_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln46_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln51_fu_967_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal idx_fu_971_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln59_fu_988_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln59_fu_991_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_997_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_981_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln59_1_fu_1005_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_1011_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln59_fu_1018_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal idx_2_fu_1026_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln703_fu_1042_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_10_fu_1047_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_1061_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln11_fu_1068_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln24_fu_1087_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln24_fu_1090_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_fu_1096_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_fu_1080_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln24_1_fu_1104_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_1110_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_fu_1117_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal idx_4_fu_1125_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln16_fu_1140_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal idx_3_fu_1143_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln703_1_fu_1169_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1476_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_16_fu_1484_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_17_fu_1490_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln703_fu_1198_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln703_1_fu_1201_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal ret_V_7_fu_1204_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_r_V_2_fu_1220_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal xor_ln190_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln195_fu_1241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_r_V_3_fu_1230_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_i_V_2_fu_1225_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_i_V_3_fu_1254_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln225_fu_1320_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal dqq_V_fu_1314_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1508_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1517_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1526_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1534_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_1418_p0 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_1418_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln233_fu_1445_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln233_fu_1451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1476_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_2_fu_1183_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_1476_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_1_fu_1186_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_16_fu_1484_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_16_fu_1484_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_17_fu_1490_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_17_fu_1490_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_20_fu_1496_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_8_fu_1330_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_22_fu_1502_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_22_fu_1502_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1508_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1118_fu_1349_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1517_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1526_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_10_fu_1398_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1534_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1534_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1418_ap_start : STD_LOGIC;
    signal grp_fu_1418_ap_done : STD_LOGIC;
    signal grp_fu_1418_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (88 downto 0);
    signal ap_condition_403 : BOOLEAN;
    signal ap_condition_407 : BOOLEAN;
    signal ap_condition_411 : BOOLEAN;

    component demodulationFM_sdfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (59 downto 0);
        din1 : IN STD_LOGIC_VECTOR (36 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component demodulationFM_mug8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component demodulationFM_mahbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (26 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component demodulationFM_muibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component demodulationFM_mujbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component demodulationFM_makbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component demodulationFM_malbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (35 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component demodulationFM_mamb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (35 downto 0);
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;


    component demodulationFM_cobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component demodulationFM_sicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component demodulationFM_coef IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component demodulationFM_hwdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component demodulationFM_hweOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (17 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    cos_table_U : component demodulationFM_cobkb
    generic map (
        DataWidth => 9,
        AddressRange => 65,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_table_address0,
        ce0 => cos_table_ce0,
        q0 => cos_table_q0);

    sin_table_U : component demodulationFM_sicud
    generic map (
        DataWidth => 9,
        AddressRange => 65,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sin_table_address0,
        ce0 => sin_table_ce0,
        q0 => sin_table_q0);

    coef_U : component demodulationFM_coef
    generic map (
        DataWidth => 10,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => coef_address0,
        ce0 => coef_ce0,
        q0 => coef_q0);

    hwin_I_V_U : component demodulationFM_hwdEe
    generic map (
        DataWidth => 18,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hwin_I_V_address0,
        ce0 => hwin_I_V_ce0,
        we0 => hwin_I_V_we0,
        d0 => select_ln210_fu_1338_p3,
        q0 => hwin_I_V_q0);

    hwin_Q_V_U : component demodulationFM_hweOg
    generic map (
        DataWidth => 18,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hwin_Q_V_address0,
        ce0 => hwin_Q_V_ce0,
        we0 => hwin_Q_V_we0,
        d0 => hwin_Q_V_d0,
        address1 => hwin_Q_V_address1,
        ce1 => hwin_Q_V_ce1,
        we1 => hwin_Q_V_we1,
        d1 => ap_const_lv18_0,
        q1 => hwin_Q_V_q1);

    demodulationFM_sdfYi_U1 : component demodulationFM_sdfYi
    generic map (
        ID => 1,
        NUM_STAGE => 64,
        din0_WIDTH => 60,
        din1_WIDTH => 37,
        dout_WIDTH => 60)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1418_ap_start,
        done => grp_fu_1418_ap_done,
        din0 => grp_fu_1418_p0,
        din1 => grp_fu_1534_p3,
        ce => grp_fu_1418_ce,
        dout => grp_fu_1418_p2);

    demodulationFM_mug8j_U2 : component demodulationFM_mug8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 9,
        dout_WIDTH => 27)
    port map (
        din0 => tmp_V_1_reg_1601,
        din1 => p_Val2_10_fu_1047_p3,
        dout => r_V_14_fu_1470_p2);

    demodulationFM_mahbi_U3 : component demodulationFM_mahbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 18,
        din2_WIDTH => 27,
        dout_WIDTH => 27)
    port map (
        din0 => grp_fu_1476_p0,
        din1 => grp_fu_1476_p1,
        din2 => r_V_14_reg_1658,
        dout => grp_fu_1476_p3);

    demodulationFM_muibs_U4 : component demodulationFM_muibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 18,
        dout_WIDTH => 27)
    port map (
        din0 => r_V_16_fu_1484_p0,
        din1 => r_V_16_fu_1484_p1,
        dout => r_V_16_fu_1484_p2);

    demodulationFM_muibs_U5 : component demodulationFM_muibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 18,
        dout_WIDTH => 27)
    port map (
        din0 => r_V_17_fu_1490_p0,
        din1 => r_V_17_fu_1490_p1,
        dout => r_V_17_fu_1490_p2);

    demodulationFM_mujbC_U6 : component demodulationFM_mujbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        din0 => r_V_20_fu_1496_p0,
        din1 => dqq_V_fu_1314_p2,
        dout => r_V_20_fu_1496_p2);

    demodulationFM_mujbC_U7 : component demodulationFM_mujbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        din0 => r_V_22_fu_1502_p0,
        din1 => r_V_22_fu_1502_p1,
        dout => r_V_22_fu_1502_p2);

    demodulationFM_makbM_U8 : component demodulationFM_makbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 18,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1508_p0,
        din1 => select_ln210_fu_1338_p3,
        din2 => grp_fu_1508_p2,
        dout => grp_fu_1508_p3);

    demodulationFM_makbM_U9 : component demodulationFM_makbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 18,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1517_p0,
        din1 => select_ln210_1_fu_1370_p3,
        din2 => grp_fu_1517_p2,
        dout => grp_fu_1517_p3);

    demodulationFM_malbW_U10 : component demodulationFM_malbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 36,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_1526_p0,
        din1 => dii_V_reg_1755,
        din2 => r_V_20_reg_1764,
        dout => grp_fu_1526_p3);

    demodulationFM_mamb6_U11 : component demodulationFM_mamb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 36,
        dout_WIDTH => 37)
    port map (
        din0 => grp_fu_1534_p0,
        din1 => grp_fu_1534_p1,
        din2 => r_V_22_reg_1769,
        dout => grp_fu_1534_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_754_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_0_reg_754 <= i_reg_1719;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_0_reg_754 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    idx_3_i_reg_653_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = and_ln46_fu_957_p2) and (icmp_ln42_fu_937_p2 = ap_const_lv1_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0))) then 
                idx_3_i_reg_653 <= select_ln850_fu_920_p3;
            elsif ((not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln42_fu_937_p2 = ap_const_lv1_1) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0))) then 
                idx_3_i_reg_653 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = and_ln54_reg_1623) and (ap_const_lv1_0 = and_ln50_reg_1619) and (ap_const_lv1_0 = and_ln46_reg_1615) and (icmp_ln42_reg_1611 = ap_const_lv1_0))) then 
                idx_3_i_reg_653 <= zext_ln59_fu_1032_p1;
            elsif ((not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (grp_fu_826_p2 = ap_const_lv1_1) and (grp_fu_800_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_fu_957_p2) and (icmp_ln42_fu_937_p2 = ap_const_lv1_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0))) then 
                idx_3_i_reg_653 <= zext_ln55_fu_963_p1;
            elsif ((not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (grp_fu_800_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln46_fu_957_p2) and (icmp_ln42_fu_937_p2 = ap_const_lv1_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0))) then 
                idx_3_i_reg_653 <= zext_ln51_1_fu_977_p1;
            end if; 
        end if;
    end process;

    l_0_reg_630_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((y_demod_d_V_V_full_n = ap_const_logic_0) and (ap_predicate_op427_write_state89 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
                l_0_reg_630 <= l_reg_1565;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                l_0_reg_630 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    p_Val2_1_fu_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((y_demod_d_V_V_full_n = ap_const_logic_0) and (ap_predicate_op427_write_state89 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state89) and (icmp_ln219_reg_1751 = ap_const_lv1_1))) then 
                p_Val2_1_fu_252 <= p_Val2_s_reg_730;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_1_fu_252 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    p_Val2_2_fu_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((y_demod_d_V_V_full_n = ap_const_logic_0) and (ap_predicate_op427_write_state89 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state89) and (icmp_ln219_reg_1751 = ap_const_lv1_1))) then 
                p_Val2_2_fu_256 <= p_Val2_31_reg_742;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_2_fu_256 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    p_Val2_31_reg_742_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                p_Val2_31_reg_742 <= grp_fu_1517_p3(31 downto 14);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                p_Val2_31_reg_742 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_730_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                p_Val2_s_reg_730 <= grp_fu_1508_p3(31 downto 14);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                p_Val2_s_reg_730 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_641_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((y_demod_d_V_V_full_n = ap_const_logic_0) and (ap_predicate_op427_write_state89 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
                phi_urem_reg_641 <= select_ln233_fu_1457_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                phi_urem_reg_641 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    sign_3_i10_reg_708_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = and_ln11_fu_1074_p2) and (grp_fu_826_p2 = ap_const_lv1_0) and (grp_fu_800_p2 = ap_const_lv1_0) and (icmp_ln42_reg_1611 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_fu_826_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln11_fu_1074_p2) and (grp_fu_800_p2 = ap_const_lv1_0) and (icmp_ln42_reg_1611 = ap_const_lv1_0)))) then 
                sign_3_i10_reg_708 <= ap_const_lv1_1;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln42_reg_1611 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_1 = and_ln11_fu_1074_p2) and (icmp_ln42_reg_1611 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_fu_800_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln11_fu_1074_p2) and (icmp_ln42_reg_1611 = ap_const_lv1_0)))) then 
                sign_3_i10_reg_708 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    sign_3_i_reg_670_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = and_ln54_reg_1623) and (ap_const_lv1_0 = and_ln50_reg_1619) and (ap_const_lv1_0 = and_ln46_reg_1615) and (icmp_ln42_reg_1611 = ap_const_lv1_0)) or (not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln42_fu_937_p2 = ap_const_lv1_1) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or (not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = and_ln46_fu_957_p2) and (icmp_ln42_fu_937_p2 = ap_const_lv1_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) then 
                sign_3_i_reg_670 <= ap_const_lv1_0;
            elsif (((not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (grp_fu_800_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln46_fu_957_p2) and (icmp_ln42_fu_937_p2 = ap_const_lv1_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or (not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (grp_fu_826_p2 = ap_const_lv1_1) and (grp_fu_800_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_fu_957_p2) and (icmp_ln42_fu_937_p2 = ap_const_lv1_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) then 
                sign_3_i_reg_670 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    value_V_3_reg_619_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((y_demod_d_V_V_full_n = ap_const_logic_0) and (ap_predicate_op427_write_state89 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
                value_V_3_reg_619 <= add_ln176_fu_1465_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                value_V_3_reg_619 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln42_fu_937_p2 = ap_const_lv1_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0))) then
                and_ln46_reg_1615 <= and_ln46_fu_957_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = and_ln46_fu_957_p2) and (icmp_ln42_fu_937_p2 = ap_const_lv1_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0))) then
                and_ln50_reg_1619 <= grp_fu_800_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (grp_fu_800_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_fu_957_p2) and (icmp_ln42_fu_937_p2 = ap_const_lv1_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0))) then
                and_ln54_reg_1623 <= grp_fu_826_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln219_fu_1297_p2 = ap_const_lv1_1) and (icmp_ln209_fu_1268_p2 = ap_const_lv1_1))) then
                dii_V_reg_1755 <= dii_V_fu_1308_p2;
                icmp_ln225_reg_1760 <= icmp_ln225_fu_1324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                i_reg_1719 <= i_fu_1274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                icmp_ln190_reg_1677 <= icmp_ln190_fu_1159_p2;
                icmp_ln195_reg_1684 <= icmp_ln195_fu_1164_p2;
                r_V_14_reg_1658 <= r_V_14_fu_1470_p2;
                r_V_reg_1648 <= r_V_fu_1054_p1;
                sext_ln1118_reg_1653 <= sext_ln1118_fu_1058_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln209_fu_1268_p2 = ap_const_lv1_0))) then
                icmp_ln210_reg_1730 <= icmp_ln210_fu_1285_p2;
                    zext_ln210_reg_1724(4 downto 0) <= zext_ln210_fu_1280_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln209_fu_1268_p2 = ap_const_lv1_1))) then
                icmp_ln219_reg_1751 <= icmp_ln219_fu_1297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0))) then
                icmp_ln42_reg_1611 <= icmp_ln42_fu_937_p2;
                idx_1_reg_1593 <= idx_1_fu_933_p1;
                select_ln850_reg_1575 <= select_ln850_fu_920_p3;
                tmp_V_1_reg_1601 <= y_I_V_V_dout;
                tmp_V_2_reg_1606 <= y_Q_V_V_dout;
                value_V_4_reg_1570 <= value_V_4_fu_870_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                l_reg_1565 <= l_fu_852_p2;
                trunc_ln176_reg_1557 <= trunc_ln176_fu_842_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                p_Val2_12_reg_1689 <= p_Val2_12_fu_1175_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                p_Val2_9_reg_1642 <= cos_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln225_fu_1324_p2 = ap_const_lv1_1) and (icmp_ln219_fu_1297_p2 = ap_const_lv1_1) and (icmp_ln209_fu_1268_p2 = ap_const_lv1_1))) then
                r_V_20_reg_1764 <= r_V_20_fu_1496_p2;
                r_V_22_reg_1769 <= r_V_22_fu_1502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_i_V_4_reg_1711 <= tmp_i_V_4_fu_1260_p3;
                tmp_r_V_4_reg_1706 <= tmp_r_V_4_fu_1246_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_i_V_reg_1700 <= ret_V_7_fu_1204_p2(25 downto 8);
                tmp_r_V_reg_1694 <= grp_fu_1476_p3(25 downto 8);
            end if;
        end if;
    end process;
    zext_ln210_reg_1724(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, y_I_V_V_empty_n, y_Q_V_V_empty_n, y_demod_d_V_V_full_n, ap_CS_fsm_state17, icmp_ln176_fu_846_p2, ap_CS_fsm_state89, ap_CS_fsm_state24, icmp_ln209_fu_1268_p2, icmp_ln219_fu_1297_p2, icmp_ln225_fu_1324_p2, ap_predicate_op427_write_state89)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if ((not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln176_fu_846_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln225_fu_1324_p2 = ap_const_lv1_1) and (icmp_ln219_fu_1297_p2 = ap_const_lv1_1) and (icmp_ln209_fu_1268_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and (((icmp_ln209_fu_1268_p2 = ap_const_lv1_1) and (icmp_ln219_fu_1297_p2 = ap_const_lv1_0)) or ((icmp_ln209_fu_1268_p2 = ap_const_lv1_1) and (icmp_ln225_fu_1324_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                if ((not(((y_demod_d_V_V_full_n = ap_const_logic_0) and (ap_predicate_op427_write_state89 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln176_fu_1465_p2 <= std_logic_vector(unsigned(value_V_4_reg_1570) + unsigned(ap_const_lv18_123A));
    add_ln233_fu_1445_p2 <= std_logic_vector(unsigned(phi_urem_reg_641) + unsigned(ap_const_lv17_1));
    and_ln11_fu_1074_p2 <= (xor_ln11_fu_1068_p2 and grp_fu_765_p2);
    and_ln195_fu_1241_p2 <= (xor_ln190_fu_1236_p2 and icmp_ln195_reg_1684);
    and_ln46_fu_957_p2 <= (xor_ln46_fu_951_p2 and grp_fu_765_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state17_assign_proc : process(y_I_V_V_empty_n, y_Q_V_V_empty_n, icmp_ln176_fu_846_p2)
    begin
                ap_block_state17 <= (((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state89_assign_proc : process(y_demod_d_V_V_full_n, ap_predicate_op427_write_state89)
    begin
                ap_block_state89 <= ((y_demod_d_V_V_full_n = ap_const_logic_0) and (ap_predicate_op427_write_state89 = ap_const_boolean_1));
    end process;


    ap_condition_403_assign_proc : process(icmp_ln42_reg_1611, grp_fu_800_p2, and_ln11_fu_1074_p2)
    begin
                ap_condition_403 <= ((grp_fu_800_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln11_fu_1074_p2) and (icmp_ln42_reg_1611 = ap_const_lv1_0));
    end process;


    ap_condition_407_assign_proc : process(icmp_ln42_reg_1611, grp_fu_800_p2, grp_fu_826_p2, and_ln11_fu_1074_p2)
    begin
                ap_condition_407 <= ((grp_fu_826_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln11_fu_1074_p2) and (grp_fu_800_p2 = ap_const_lv1_0) and (icmp_ln42_reg_1611 = ap_const_lv1_0));
    end process;


    ap_condition_411_assign_proc : process(icmp_ln42_reg_1611, grp_fu_800_p2, grp_fu_826_p2, and_ln11_fu_1074_p2)
    begin
                ap_condition_411 <= ((ap_const_lv1_0 = and_ln11_fu_1074_p2) and (grp_fu_826_p2 = ap_const_lv1_0) and (grp_fu_800_p2 = ap_const_lv1_0) and (icmp_ln42_reg_1611 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(y_I_V_V_empty_n, y_Q_V_V_empty_n, ap_CS_fsm_state17, icmp_ln176_fu_846_p2)
    begin
        if ((not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln176_fu_846_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_idx_3_i9_phi_fu_695_p10_assign_proc : process(select_ln850_reg_1575, icmp_ln42_reg_1611, ap_CS_fsm_state20, zext_ln16_1_fu_1149_p1, and_ln11_fu_1074_p2, zext_ln20_fu_1136_p1, zext_ln24_fu_1131_p1, ap_condition_403, ap_condition_407, ap_condition_411)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
            if (((ap_const_lv1_1 = and_ln11_fu_1074_p2) and (icmp_ln42_reg_1611 = ap_const_lv1_0))) then 
                ap_phi_mux_idx_3_i9_phi_fu_695_p10 <= select_ln850_reg_1575;
            elsif ((icmp_ln42_reg_1611 = ap_const_lv1_1)) then 
                ap_phi_mux_idx_3_i9_phi_fu_695_p10 <= ap_const_lv10_0;
            elsif ((ap_const_boolean_1 = ap_condition_411)) then 
                ap_phi_mux_idx_3_i9_phi_fu_695_p10 <= zext_ln24_fu_1131_p1;
            elsif ((ap_const_boolean_1 = ap_condition_407)) then 
                ap_phi_mux_idx_3_i9_phi_fu_695_p10 <= zext_ln20_fu_1136_p1;
            elsif ((ap_const_boolean_1 = ap_condition_403)) then 
                ap_phi_mux_idx_3_i9_phi_fu_695_p10 <= zext_ln16_1_fu_1149_p1;
            else 
                ap_phi_mux_idx_3_i9_phi_fu_695_p10 <= "XXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_idx_3_i9_phi_fu_695_p10 <= "XXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_idx_3_i_phi_fu_657_p10_assign_proc : process(icmp_ln42_reg_1611, and_ln46_reg_1615, and_ln50_reg_1619, and_ln54_reg_1623, ap_CS_fsm_state18, idx_3_i_reg_653, zext_ln59_fu_1032_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = and_ln54_reg_1623) and (ap_const_lv1_0 = and_ln50_reg_1619) and (ap_const_lv1_0 = and_ln46_reg_1615) and (icmp_ln42_reg_1611 = ap_const_lv1_0))) then 
            ap_phi_mux_idx_3_i_phi_fu_657_p10 <= zext_ln59_fu_1032_p1;
        else 
            ap_phi_mux_idx_3_i_phi_fu_657_p10 <= idx_3_i_reg_653;
        end if; 
    end process;


    ap_predicate_op427_write_state89_assign_proc : process(icmp_ln219_reg_1751, icmp_ln225_reg_1760)
    begin
                ap_predicate_op427_write_state89 <= ((icmp_ln225_reg_1760 = ap_const_lv1_1) and (icmp_ln219_reg_1751 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(y_I_V_V_empty_n, y_Q_V_V_empty_n, ap_CS_fsm_state17, icmp_ln176_fu_846_p2)
    begin
        if ((not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln176_fu_846_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;
    coef_address0 <= zext_ln210_fu_1280_p1(5 - 1 downto 0);

    coef_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            coef_ce0 <= ap_const_logic_1;
        else 
            coef_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cos_table_address0 <= sext_ln1265_fu_1037_p1(7 - 1 downto 0);

    cos_table_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            cos_table_ce0 <= ap_const_logic_1;
        else 
            cos_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dii_V_fu_1308_p2 <= std_logic_vector(signed(p_Val2_s_reg_730) - signed(p_Val2_1_fu_252));
    dqq_V_fu_1314_p2 <= std_logic_vector(signed(p_Val2_31_reg_742) - signed(p_Val2_2_fu_256));

    grp_fu_1418_ap_start_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_1418_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1418_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1418_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_1418_ce <= ap_const_logic_0;
        else 
            grp_fu_1418_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1418_p0 <= (grp_fu_1526_p3 & ap_const_lv24_0);
    grp_fu_1476_p0 <= r_V_2_fu_1183_p1(9 - 1 downto 0);
    grp_fu_1476_p1 <= sext_ln1118_1_fu_1186_p1(18 - 1 downto 0);
    grp_fu_1508_p0 <= zext_ln1118_fu_1349_p1(10 - 1 downto 0);
    grp_fu_1508_p2 <= (p_Val2_s_reg_730 & ap_const_lv14_0);
    grp_fu_1517_p0 <= zext_ln1118_fu_1349_p1(10 - 1 downto 0);
    grp_fu_1517_p2 <= (p_Val2_31_reg_742 & ap_const_lv14_0);
    grp_fu_1526_p0 <= r_V_10_fu_1398_p1(18 - 1 downto 0);
    grp_fu_1534_p0 <= r_V_10_fu_1398_p1(18 - 1 downto 0);
    grp_fu_1534_p1 <= r_V_10_fu_1398_p1(18 - 1 downto 0);

    grp_fu_765_p0_assign_proc : process(ap_CS_fsm_state17, select_ln850_fu_920_p3, select_ln850_reg_1575, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_765_p0 <= select_ln850_reg_1575;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_765_p0 <= select_ln850_fu_920_p3;
        else 
            grp_fu_765_p0 <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_fu_765_p2 <= "1" when (signed(grp_fu_765_p0) < signed(ap_const_lv10_41)) else "0";

    grp_fu_770_p1_assign_proc : process(ap_CS_fsm_state17, select_ln850_fu_920_p3, select_ln850_reg_1575, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_770_p1 <= select_ln850_reg_1575;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_770_p1 <= select_ln850_fu_920_p3;
        else 
            grp_fu_770_p1 <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_fu_770_p4 <= grp_fu_770_p1(9 downto 6);
    grp_fu_779_p2 <= "1" when (signed(grp_fu_770_p4) > signed(ap_const_lv4_0)) else "0";

    grp_fu_785_p1_assign_proc : process(ap_CS_fsm_state17, select_ln850_fu_920_p3, select_ln850_reg_1575, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_785_p1 <= select_ln850_reg_1575;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_785_p1 <= select_ln850_fu_920_p3;
        else 
            grp_fu_785_p1 <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_fu_785_p4 <= grp_fu_785_p1(9 downto 7);
    grp_fu_794_p2 <= "1" when (signed(grp_fu_785_p4) < signed(ap_const_lv3_1)) else "0";
    grp_fu_800_p2 <= (grp_fu_794_p2 and grp_fu_779_p2);

    grp_fu_806_p1_assign_proc : process(ap_CS_fsm_state17, select_ln850_fu_920_p3, select_ln850_reg_1575, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_806_p1 <= select_ln850_reg_1575;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_806_p1 <= select_ln850_fu_920_p3;
        else 
            grp_fu_806_p1 <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_fu_806_p4 <= grp_fu_806_p1(9 downto 7);
    grp_fu_815_p2 <= "1" when (signed(grp_fu_806_p4) > signed(ap_const_lv3_0)) else "0";

    grp_fu_821_p0_assign_proc : process(ap_CS_fsm_state17, select_ln850_fu_920_p3, select_ln850_reg_1575, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_821_p0 <= select_ln850_reg_1575;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_821_p0 <= select_ln850_fu_920_p3;
        else 
            grp_fu_821_p0 <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_fu_821_p2 <= "1" when (signed(grp_fu_821_p0) < signed(ap_const_lv10_C0)) else "0";
    grp_fu_826_p2 <= (grp_fu_821_p2 and grp_fu_815_p2);

    hwin_I_V_address0_assign_proc : process(ap_CS_fsm_state24, zext_ln210_reg_1724, ap_CS_fsm_state25, zext_ln210_1_fu_1291_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            hwin_I_V_address0 <= zext_ln210_reg_1724(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            hwin_I_V_address0 <= zext_ln210_1_fu_1291_p1(5 - 1 downto 0);
        else 
            hwin_I_V_address0 <= "XXXXX";
        end if; 
    end process;


    hwin_I_V_ce0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            hwin_I_V_ce0 <= ap_const_logic_1;
        else 
            hwin_I_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hwin_I_V_we0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            hwin_I_V_we0 <= ap_const_logic_1;
        else 
            hwin_I_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hwin_Q_V_address0_assign_proc : process(ap_CS_fsm_state1, zext_ln210_reg_1724, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            hwin_Q_V_address0 <= zext_ln210_reg_1724(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            hwin_Q_V_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            hwin_Q_V_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hwin_Q_V_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hwin_Q_V_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            hwin_Q_V_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            hwin_Q_V_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            hwin_Q_V_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hwin_Q_V_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hwin_Q_V_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hwin_Q_V_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hwin_Q_V_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hwin_Q_V_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hwin_Q_V_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hwin_Q_V_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hwin_Q_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            hwin_Q_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            hwin_Q_V_address0 <= "XXXXX";
        end if; 
    end process;


    hwin_Q_V_address1_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state16, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, zext_ln210_1_fu_1291_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            hwin_Q_V_address1 <= zext_ln210_1_fu_1291_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            hwin_Q_V_address1 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            hwin_Q_V_address1 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hwin_Q_V_address1 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hwin_Q_V_address1 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            hwin_Q_V_address1 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            hwin_Q_V_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            hwin_Q_V_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hwin_Q_V_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hwin_Q_V_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hwin_Q_V_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hwin_Q_V_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hwin_Q_V_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hwin_Q_V_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hwin_Q_V_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hwin_Q_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        else 
            hwin_Q_V_address1 <= "XXXXX";
        end if; 
    end process;


    hwin_Q_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            hwin_Q_V_ce0 <= ap_const_logic_1;
        else 
            hwin_Q_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hwin_Q_V_ce1_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state16, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            hwin_Q_V_ce1 <= ap_const_logic_1;
        else 
            hwin_Q_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hwin_Q_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, select_ln210_1_fu_1370_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            hwin_Q_V_d0 <= select_ln210_1_fu_1370_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hwin_Q_V_d0 <= ap_const_lv18_0;
        else 
            hwin_Q_V_d0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hwin_Q_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            hwin_Q_V_we0 <= ap_const_logic_1;
        else 
            hwin_Q_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hwin_Q_V_we1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            hwin_Q_V_we1 <= ap_const_logic_1;
        else 
            hwin_Q_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_1274_p2 <= std_logic_vector(unsigned(i_0_reg_754) + unsigned(ap_const_lv5_1));
    icmp_ln1494_fu_858_p2 <= "1" when (signed(value_V_3_reg_619) > signed(ap_const_lv18_10000)) else "0";
    icmp_ln176_fu_846_p2 <= "1" when (l_0_reg_630 = ap_const_lv17_186A0) else "0";
    icmp_ln190_fu_1159_p2 <= "1" when (select_ln850_reg_1575 = ap_const_lv10_0) else "0";
    icmp_ln195_fu_1164_p2 <= "1" when (select_ln850_reg_1575 = ap_const_lv10_40) else "0";
    icmp_ln209_fu_1268_p2 <= "1" when (i_0_reg_754 = ap_const_lv5_1F) else "0";
    icmp_ln210_fu_1285_p2 <= "1" when (unsigned(i_0_reg_754) < unsigned(ap_const_lv5_1E)) else "0";
    icmp_ln219_fu_1297_p2 <= "1" when (trunc_ln176_reg_1557 = ap_const_lv3_0) else "0";
    icmp_ln225_fu_1324_p2 <= "1" when (trunc_ln225_fu_1320_p1 = ap_const_lv7_0) else "0";
    icmp_ln233_fu_1451_p2 <= "1" when (unsigned(add_ln233_fu_1445_p2) < unsigned(ap_const_lv17_50)) else "0";
    icmp_ln42_fu_937_p2 <= "1" when (select_ln850_fu_920_p3 = ap_const_lv10_100) else "0";
    icmp_ln851_fu_900_p2 <= "1" when (trunc_ln851_fu_896_p1 = ap_const_lv8_0) else "0";
    idx_1_fu_933_p1 <= select_ln850_fu_920_p3(6 - 1 downto 0);
    idx_2_fu_1026_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(select_ln59_fu_1018_p3));
    idx_3_fu_1143_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(zext_ln16_fu_1140_p1));
    idx_4_fu_1125_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(select_ln24_fu_1117_p3));
    idx_fu_971_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(zext_ln51_fu_967_p1));
    l_fu_852_p2 <= std_logic_vector(unsigned(ap_const_lv17_1) + unsigned(l_0_reg_630));
    p_Result_s_fu_888_p3 <= value_V_4_fu_870_p3(17 downto 17);
    p_Val2_10_fu_1047_p3 <= 
        sub_ln703_fu_1042_p2 when (sign_3_i_reg_670(0) = '1') else 
        p_Val2_9_reg_1642;
    p_Val2_12_fu_1175_p3 <= 
        sub_ln703_1_fu_1169_p2 when (sign_3_i10_reg_708(0) = '1') else 
        sin_table_q0;
        r_V_10_fu_1398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_31_reg_742),36));

    r_V_16_fu_1484_p0 <= r_V_reg_1648(9 - 1 downto 0);
    r_V_16_fu_1484_p1 <= sext_ln1118_1_fu_1186_p1(18 - 1 downto 0);
    r_V_17_fu_1490_p0 <= r_V_2_fu_1183_p1(9 - 1 downto 0);
    r_V_17_fu_1490_p1 <= sext_ln1118_reg_1653(18 - 1 downto 0);
    r_V_20_fu_1496_p0 <= r_V_8_fu_1330_p1(18 - 1 downto 0);
    r_V_22_fu_1502_p0 <= r_V_8_fu_1330_p1(18 - 1 downto 0);
    r_V_22_fu_1502_p1 <= r_V_8_fu_1330_p1(18 - 1 downto 0);
        r_V_2_fu_1183_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_12_reg_1689),27));

        r_V_8_fu_1330_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_730),36));

        r_V_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_10_fu_1047_p3),27));

    ret_V_1_fu_906_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(ret_V_fu_878_p4));
    ret_V_7_fu_1204_p2 <= std_logic_vector(unsigned(zext_ln703_fu_1198_p1) - unsigned(zext_ln703_1_fu_1201_p1));
    ret_V_fu_878_p4 <= value_V_4_fu_870_p3(17 downto 8);
    select_ln210_1_fu_1370_p3 <= 
        hwin_Q_V_q1 when (icmp_ln210_reg_1730(0) = '1') else 
        tmp_i_V_4_reg_1711;
    select_ln210_fu_1338_p3 <= 
        hwin_I_V_q0 when (icmp_ln210_reg_1730(0) = '1') else 
        tmp_r_V_4_reg_1706;
    select_ln233_fu_1457_p3 <= 
        add_ln233_fu_1445_p2 when (icmp_ln233_fu_1451_p2(0) = '1') else 
        ap_const_lv17_0;
    select_ln24_fu_1117_p3 <= 
        sub_ln24_1_fu_1104_p2 when (tmp_15_fu_1080_p3(0) = '1') else 
        tmp_8_fu_1110_p3;
    select_ln59_fu_1018_p3 <= 
        sub_ln59_1_fu_1005_p2 when (tmp_7_fu_981_p3(0) = '1') else 
        tmp_4_fu_1011_p3;
    select_ln850_fu_920_p3 <= 
        select_ln851_fu_912_p3 when (p_Result_s_fu_888_p3(0) = '1') else 
        ret_V_fu_878_p4;
    select_ln851_fu_912_p3 <= 
        ret_V_fu_878_p4 when (icmp_ln851_fu_900_p2(0) = '1') else 
        ret_V_1_fu_906_p2;
        sext_ln1118_1_fu_1186_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_2_reg_1606),27));

        sext_ln1118_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_1_reg_1601),27));

        sext_ln1265_1_fu_1154_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_idx_3_i9_phi_fu_695_p10),64));

        sext_ln1265_fu_1037_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_idx_3_i_phi_fu_657_p10),64));

    sin_table_address0 <= sext_ln1265_1_fu_1154_p1(7 - 1 downto 0);

    sin_table_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sin_table_ce0 <= ap_const_logic_1;
        else 
            sin_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln24_1_fu_1104_p2 <= std_logic_vector(unsigned(ap_const_lv7_0) - unsigned(tmp_16_fu_1096_p3));
    sub_ln24_fu_1090_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(trunc_ln24_fu_1087_p1));
    sub_ln59_1_fu_1005_p2 <= std_logic_vector(unsigned(ap_const_lv7_0) - unsigned(tmp_10_fu_997_p3));
    sub_ln59_fu_991_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(trunc_ln59_fu_988_p1));
    sub_ln703_1_fu_1169_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sin_table_q0));
    sub_ln703_fu_1042_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(p_Val2_9_reg_1642));
    tmp_10_fu_997_p3 <= (ap_const_lv1_0 & sub_ln59_fu_991_p2);
    tmp_11_fu_1061_p3 <= select_ln850_reg_1575(9 downto 9);
    tmp_15_fu_1080_p3 <= select_ln850_reg_1575(9 downto 9);
    tmp_16_fu_1096_p3 <= (ap_const_lv1_0 & sub_ln24_fu_1090_p2);
    tmp_2_fu_943_p3 <= select_ln850_fu_920_p3(9 downto 9);
    tmp_4_fu_1011_p3 <= (ap_const_lv1_0 & idx_1_reg_1593);
    tmp_7_fu_981_p3 <= select_ln850_reg_1575(9 downto 9);
    tmp_8_fu_1110_p3 <= (ap_const_lv1_0 & idx_1_reg_1593);
    tmp_i_V_2_fu_1225_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(tmp_i_V_reg_1700));
    tmp_i_V_3_fu_1254_p3 <= 
        tmp_i_V_2_fu_1225_p2 when (icmp_ln190_reg_1677(0) = '1') else 
        tmp_i_V_reg_1700;
    tmp_i_V_4_fu_1260_p3 <= 
        tmp_i_V_2_fu_1225_p2 when (and_ln195_fu_1241_p2(0) = '1') else 
        tmp_i_V_3_fu_1254_p3;
    tmp_r_V_2_fu_1220_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(tmp_r_V_reg_1694));
    tmp_r_V_3_fu_1230_p3 <= 
        tmp_r_V_2_fu_1220_p2 when (icmp_ln190_reg_1677(0) = '1') else 
        tmp_r_V_reg_1694;
    tmp_r_V_4_fu_1246_p3 <= 
        tmp_r_V_2_fu_1220_p2 when (and_ln195_fu_1241_p2(0) = '1') else 
        tmp_r_V_3_fu_1230_p3;
    trunc_ln176_fu_842_p1 <= l_0_reg_630(3 - 1 downto 0);
    trunc_ln225_fu_1320_p1 <= phi_urem_reg_641(7 - 1 downto 0);
    trunc_ln24_fu_1087_p1 <= select_ln850_reg_1575(6 - 1 downto 0);
    trunc_ln59_fu_988_p1 <= select_ln850_reg_1575(6 - 1 downto 0);
    trunc_ln851_fu_896_p1 <= value_V_4_fu_870_p3(8 - 1 downto 0);
    value_V_4_fu_870_p3 <= 
        value_V_fu_864_p2 when (icmp_ln1494_fu_858_p2(0) = '1') else 
        value_V_3_reg_619;
    value_V_fu_864_p2 <= std_logic_vector(signed(ap_const_lv18_30000) + signed(value_V_3_reg_619));
    xor_ln11_fu_1068_p2 <= (tmp_11_fu_1061_p3 xor ap_const_lv1_1);
    xor_ln190_fu_1236_p2 <= (icmp_ln190_reg_1677 xor ap_const_lv1_1);
    xor_ln46_fu_951_p2 <= (tmp_2_fu_943_p3 xor ap_const_lv1_1);

    y_I_V_V_blk_n_assign_proc : process(y_I_V_V_empty_n, ap_CS_fsm_state17, icmp_ln176_fu_846_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0))) then 
            y_I_V_V_blk_n <= y_I_V_V_empty_n;
        else 
            y_I_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    y_I_V_V_read_assign_proc : process(y_I_V_V_empty_n, y_Q_V_V_empty_n, ap_CS_fsm_state17, icmp_ln176_fu_846_p2)
    begin
        if ((not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0))) then 
            y_I_V_V_read <= ap_const_logic_1;
        else 
            y_I_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    y_Q_V_V_blk_n_assign_proc : process(y_Q_V_V_empty_n, ap_CS_fsm_state17, icmp_ln176_fu_846_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0))) then 
            y_Q_V_V_blk_n <= y_Q_V_V_empty_n;
        else 
            y_Q_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    y_Q_V_V_read_assign_proc : process(y_I_V_V_empty_n, y_Q_V_V_empty_n, ap_CS_fsm_state17, icmp_ln176_fu_846_p2)
    begin
        if ((not((((y_Q_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)) or ((y_I_V_V_empty_n = ap_const_logic_0) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln176_fu_846_p2 = ap_const_lv1_0))) then 
            y_Q_V_V_read <= ap_const_logic_1;
        else 
            y_Q_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    y_demod_d_V_V_blk_n_assign_proc : process(y_demod_d_V_V_full_n, ap_CS_fsm_state89, icmp_ln219_reg_1751, icmp_ln225_reg_1760)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state89) and (icmp_ln225_reg_1760 = ap_const_lv1_1) and (icmp_ln219_reg_1751 = ap_const_lv1_1))) then 
            y_demod_d_V_V_blk_n <= y_demod_d_V_V_full_n;
        else 
            y_demod_d_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y_demod_d_V_V_din <= grp_fu_1418_p2(29 downto 12);

    y_demod_d_V_V_write_assign_proc : process(y_demod_d_V_V_full_n, ap_CS_fsm_state89, ap_predicate_op427_write_state89)
    begin
        if ((not(((y_demod_d_V_V_full_n = ap_const_logic_0) and (ap_predicate_op427_write_state89 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state89) and (ap_predicate_op427_write_state89 = ap_const_boolean_1))) then 
            y_demod_d_V_V_write <= ap_const_logic_1;
        else 
            y_demod_d_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1118_fu_1349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(coef_q0),28));
    zext_ln16_1_fu_1149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_3_fu_1143_p2),10));
    zext_ln16_fu_1140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_1_reg_1593),7));
    zext_ln20_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_1_reg_1593),10));
    zext_ln210_1_fu_1291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_1274_p2),64));
    zext_ln210_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_754),64));
    zext_ln24_fu_1131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_4_fu_1125_p2),10));
    zext_ln51_1_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_fu_971_p2),10));
    zext_ln51_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_1_fu_933_p1),7));
    zext_ln55_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_1_fu_933_p1),10));
    zext_ln59_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_2_fu_1026_p2),10));
    zext_ln703_1_fu_1201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_17_fu_1490_p2),28));
    zext_ln703_fu_1198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_16_fu_1484_p2),28));
end behav;
