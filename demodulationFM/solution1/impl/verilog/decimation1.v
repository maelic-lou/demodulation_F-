// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module decimation1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ary_V_address0,
        ary_V_ce0,
        ary_V_q0,
        new_ary_V_address0,
        new_ary_V_ce0,
        new_ary_V_we0,
        new_ary_V_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [16:0] ary_V_address0;
output   ary_V_ce0;
input  [31:0] ary_V_q0;
output  [13:0] new_ary_V_address0;
output   new_ary_V_ce0;
output   new_ary_V_we0;
output  [31:0] new_ary_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ary_V_ce0;
reg new_ary_V_ce0;
reg new_ary_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [16:0] n_fu_73_p2;
reg   [16:0] n_reg_108;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln216_fu_67_p2;
wire   [0:0] icmp_ln219_fu_84_p2;
reg   [0:0] icmp_ln219_reg_118;
reg   [16:0] n_0_reg_51;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln218_fu_79_p1;
wire   [63:0] zext_ln222_fu_100_p1;
wire   [2:0] trunc_ln216_fu_63_p1;
wire   [13:0] trunc_ln2_fu_90_p4;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        n_0_reg_51 <= n_reg_108;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n_0_reg_51 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln216_fu_67_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln219_reg_118 <= icmp_ln219_fu_84_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n_reg_108 <= n_fu_73_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln216_fu_67_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln216_fu_67_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ary_V_ce0 = 1'b1;
    end else begin
        ary_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        new_ary_V_ce0 = 1'b1;
    end else begin
        new_ary_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln219_reg_118 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        new_ary_V_we0 = 1'b1;
    end else begin
        new_ary_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln216_fu_67_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ary_V_address0 = zext_ln218_fu_79_p1;

assign icmp_ln216_fu_67_p2 = ((n_0_reg_51 == 17'd100000) ? 1'b1 : 1'b0);

assign icmp_ln219_fu_84_p2 = ((trunc_ln216_fu_63_p1 == 3'd0) ? 1'b1 : 1'b0);

assign n_fu_73_p2 = (17'd1 + n_0_reg_51);

assign new_ary_V_address0 = zext_ln222_fu_100_p1;

assign new_ary_V_d0 = ary_V_q0;

assign trunc_ln216_fu_63_p1 = n_0_reg_51[2:0];

assign trunc_ln2_fu_90_p4 = {{n_0_reg_51[16:3]}};

assign zext_ln218_fu_79_p1 = n_0_reg_51;

assign zext_ln222_fu_100_p1 = trunc_ln2_fu_90_p4;

endmodule //decimation1
