// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "decimation2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic decimation2::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic decimation2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> decimation2::ap_ST_fsm_state1 = "1";
const sc_lv<3> decimation2::ap_ST_fsm_state2 = "10";
const sc_lv<3> decimation2::ap_ST_fsm_state3 = "100";
const sc_lv<32> decimation2::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> decimation2::ap_const_lv32_2 = "10";
const sc_lv<1> decimation2::ap_const_lv1_1 = "1";
const sc_lv<32> decimation2::ap_const_lv32_1 = "1";
const sc_lv<14> decimation2::ap_const_lv14_0 = "00000000000000";
const sc_lv<14> decimation2::ap_const_lv14_30D4 = "11000011010100";
const sc_lv<14> decimation2::ap_const_lv14_1 = "1";
const sc_lv<4> decimation2::ap_const_lv4_0 = "0000";
const sc_lv<14> decimation2::ap_const_lv14_A = "1010";
const bool decimation2::ap_const_boolean_1 = true;

decimation2::decimation2(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln230_1_fu_101_p2);
    sensitive << ( phi_urem_reg_62 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( new_ary_V_full_n );
    sensitive << ( icmp_ln233_fu_95_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln230_fu_74_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln230_fu_74_p2 );

    SC_METHOD(thread_ary_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln232_fu_86_p1 );

    SC_METHOD(thread_ary_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_icmp_ln230_1_fu_107_p2);
    sensitive << ( new_ary_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln233_fu_95_p2 );
    sensitive << ( add_ln230_1_fu_101_p2 );

    SC_METHOD(thread_icmp_ln230_fu_74_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( n_0_reg_51 );

    SC_METHOD(thread_icmp_ln233_fu_95_p2);
    sensitive << ( new_ary_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln233_fu_95_p2 );
    sensitive << ( trunc_ln233_fu_91_p1 );

    SC_METHOD(thread_n_fu_80_p2);
    sensitive << ( n_0_reg_51 );

    SC_METHOD(thread_new_ary_V_blk_n);
    sensitive << ( new_ary_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln233_fu_95_p2 );

    SC_METHOD(thread_new_ary_V_din);
    sensitive << ( ary_V_q0 );
    sensitive << ( new_ary_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln233_fu_95_p2 );

    SC_METHOD(thread_new_ary_V_write);
    sensitive << ( new_ary_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln233_fu_95_p2 );

    SC_METHOD(thread_select_ln230_fu_113_p3);
    sensitive << ( add_ln230_1_fu_101_p2 );
    sensitive << ( icmp_ln230_1_fu_107_p2 );

    SC_METHOD(thread_trunc_ln233_fu_91_p1);
    sensitive << ( phi_urem_reg_62 );

    SC_METHOD(thread_zext_ln232_fu_86_p1);
    sensitive << ( n_0_reg_51 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( new_ary_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln233_fu_95_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln230_fu_74_p2 );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "decimation2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ary_V_address0, "(port)ary_V_address0");
    sc_trace(mVcdFile, ary_V_ce0, "(port)ary_V_ce0");
    sc_trace(mVcdFile, ary_V_q0, "(port)ary_V_q0");
    sc_trace(mVcdFile, new_ary_V_din, "(port)new_ary_V_din");
    sc_trace(mVcdFile, new_ary_V_full_n, "(port)new_ary_V_full_n");
    sc_trace(mVcdFile, new_ary_V_write, "(port)new_ary_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, new_ary_V_blk_n, "new_ary_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln233_fu_95_p2, "icmp_ln233_fu_95_p2");
    sc_trace(mVcdFile, n_fu_80_p2, "n_fu_80_p2");
    sc_trace(mVcdFile, n_reg_124, "n_reg_124");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln230_fu_74_p2, "icmp_ln230_fu_74_p2");
    sc_trace(mVcdFile, select_ln230_fu_113_p3, "select_ln230_fu_113_p3");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, n_0_reg_51, "n_0_reg_51");
    sc_trace(mVcdFile, phi_urem_reg_62, "phi_urem_reg_62");
    sc_trace(mVcdFile, zext_ln232_fu_86_p1, "zext_ln232_fu_86_p1");
    sc_trace(mVcdFile, trunc_ln233_fu_91_p1, "trunc_ln233_fu_91_p1");
    sc_trace(mVcdFile, add_ln230_1_fu_101_p2, "add_ln230_1_fu_101_p2");
    sc_trace(mVcdFile, icmp_ln230_1_fu_107_p2, "icmp_ln230_1_fu_107_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

decimation2::~decimation2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void decimation2::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln233_fu_95_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, new_ary_V_full_n.read())))) {
        n_0_reg_51 = n_reg_124.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        n_0_reg_51 = ap_const_lv14_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln233_fu_95_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, new_ary_V_full_n.read())))) {
        phi_urem_reg_62 = select_ln230_fu_113_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_urem_reg_62 = ap_const_lv14_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        n_reg_124 = n_fu_80_p2.read();
    }
}

void decimation2::thread_add_ln230_1_fu_101_p2() {
    add_ln230_1_fu_101_p2 = (!phi_urem_reg_62.read().is_01() || !ap_const_lv14_1.is_01())? sc_lv<14>(): (sc_biguint<14>(phi_urem_reg_62.read()) + sc_biguint<14>(ap_const_lv14_1));
}

void decimation2::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void decimation2::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void decimation2::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void decimation2::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(icmp_ln233_fu_95_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, new_ary_V_full_n.read()));
}

void decimation2::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln230_fu_74_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void decimation2::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void decimation2::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln230_fu_74_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void decimation2::thread_ary_V_address0() {
    ary_V_address0 =  (sc_lv<14>) (zext_ln232_fu_86_p1.read());
}

void decimation2::thread_ary_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ary_V_ce0 = ap_const_logic_1;
    } else {
        ary_V_ce0 = ap_const_logic_0;
    }
}

void decimation2::thread_icmp_ln230_1_fu_107_p2() {
    icmp_ln230_1_fu_107_p2 = (!add_ln230_1_fu_101_p2.read().is_01() || !ap_const_lv14_A.is_01())? sc_lv<1>(): (sc_biguint<14>(add_ln230_1_fu_101_p2.read()) < sc_biguint<14>(ap_const_lv14_A));
}

void decimation2::thread_icmp_ln230_fu_74_p2() {
    icmp_ln230_fu_74_p2 = (!n_0_reg_51.read().is_01() || !ap_const_lv14_30D4.is_01())? sc_lv<1>(): sc_lv<1>(n_0_reg_51.read() == ap_const_lv14_30D4);
}

void decimation2::thread_icmp_ln233_fu_95_p2() {
    icmp_ln233_fu_95_p2 = (!trunc_ln233_fu_91_p1.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln233_fu_91_p1.read() == ap_const_lv4_0);
}

void decimation2::thread_n_fu_80_p2() {
    n_fu_80_p2 = (!n_0_reg_51.read().is_01() || !ap_const_lv14_1.is_01())? sc_lv<14>(): (sc_biguint<14>(n_0_reg_51.read()) + sc_biguint<14>(ap_const_lv14_1));
}

void decimation2::thread_new_ary_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln233_fu_95_p2.read(), ap_const_lv1_1))) {
        new_ary_V_blk_n = new_ary_V_full_n.read();
    } else {
        new_ary_V_blk_n = ap_const_logic_1;
    }
}

void decimation2::thread_new_ary_V_din() {
    new_ary_V_din = ary_V_q0.read();
}

void decimation2::thread_new_ary_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln233_fu_95_p2.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(icmp_ln233_fu_95_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, new_ary_V_full_n.read())))) {
        new_ary_V_write = ap_const_logic_1;
    } else {
        new_ary_V_write = ap_const_logic_0;
    }
}

void decimation2::thread_select_ln230_fu_113_p3() {
    select_ln230_fu_113_p3 = (!icmp_ln230_1_fu_107_p2.read()[0].is_01())? sc_lv<14>(): ((icmp_ln230_1_fu_107_p2.read()[0].to_bool())? add_ln230_1_fu_101_p2.read(): ap_const_lv14_0);
}

void decimation2::thread_trunc_ln233_fu_91_p1() {
    trunc_ln233_fu_91_p1 = phi_urem_reg_62.read().range(4-1, 0);
}

void decimation2::thread_zext_ln232_fu_86_p1() {
    zext_ln232_fu_86_p1 = esl_zext<64,14>(n_0_reg_51.read());
}

void decimation2::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln230_fu_74_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(icmp_ln233_fu_95_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, new_ary_V_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

