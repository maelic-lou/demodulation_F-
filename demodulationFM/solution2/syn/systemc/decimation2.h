// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _decimation2_HH_
#define _decimation2_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct decimation2 : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<14> > ary_V_address0;
    sc_out< sc_logic > ary_V_ce0;
    sc_in< sc_lv<32> > ary_V_q0;
    sc_out< sc_lv<32> > new_ary_V_din;
    sc_in< sc_logic > new_ary_V_full_n;
    sc_out< sc_logic > new_ary_V_write;


    // Module declarations
    decimation2(sc_module_name name);
    SC_HAS_PROCESS(decimation2);

    ~decimation2();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > new_ary_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln233_fu_95_p2;
    sc_signal< sc_lv<14> > n_fu_80_p2;
    sc_signal< sc_lv<14> > n_reg_124;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln230_fu_74_p2;
    sc_signal< sc_lv<14> > select_ln230_fu_113_p3;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<14> > n_0_reg_51;
    sc_signal< sc_lv<14> > phi_urem_reg_62;
    sc_signal< sc_lv<64> > zext_ln232_fu_86_p1;
    sc_signal< sc_lv<4> > trunc_ln233_fu_91_p1;
    sc_signal< sc_lv<14> > add_ln230_1_fu_101_p2;
    sc_signal< sc_lv<1> > icmp_ln230_1_fu_107_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<14> ap_const_lv14_30D4;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<14> ap_const_lv14_A;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln230_1_fu_101_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ary_V_address0();
    void thread_ary_V_ce0();
    void thread_icmp_ln230_1_fu_107_p2();
    void thread_icmp_ln230_fu_74_p2();
    void thread_icmp_ln233_fu_95_p2();
    void thread_n_fu_80_p2();
    void thread_new_ary_V_blk_n();
    void thread_new_ary_V_din();
    void thread_new_ary_V_write();
    void thread_select_ln230_fu_113_p3();
    void thread_trunc_ln233_fu_91_p1();
    void thread_zext_ln232_fu_86_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
