-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    x_V_ce0 : OUT STD_LOGIC;
    x_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_V_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    y_V_ce0 : OUT STD_LOGIC;
    y_V_we0 : OUT STD_LOGIC;
    y_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fir is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv17_1F : STD_LOGIC_VECTOR (16 downto 0) := "00000000000011111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv17_186A0 : STD_LOGIC_VECTOR (16 downto 0) := "11000011010100000";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal coef_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal coef_ce0 : STD_LOGIC;
    signal coef_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_fu_186_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_292 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln41_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_reg_297 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln39_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln46_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_reg_311 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln44_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_val_V_reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_fu_214_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_329 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln49_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_reg_334 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln48_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_339 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_fu_236_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln49_fu_242_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln49_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal coef_load_reg_364 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal hwin_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal hwin_V_ce0 : STD_LOGIC;
    signal hwin_V_we0 : STD_LOGIC;
    signal hwin_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_133 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal l_0_reg_144 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_s_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_169 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln49_1_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_255_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_fu_255_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_255_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal sext_ln1192_fu_269_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal lhs_V_fu_261_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_fu_273_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_255_p00 : STD_LOGIC_VECTOR (43 downto 0);

    component fir_coef IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component fir_hwin_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    coef_U : component fir_coef
    generic map (
        DataWidth => 12,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => coef_address0,
        ce0 => coef_ce0,
        q0 => coef_q0);

    hwin_V_U : component fir_hwin_V
    generic map (
        DataWidth => 32,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hwin_V_address0,
        ce0 => hwin_V_ce0,
        we0 => hwin_V_we0,
        d0 => hwin_V_d0,
        q0 => hwin_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_reg_169 <= i_reg_329;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_169 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_reg_133 <= j_reg_292;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_133 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    l_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                l_0_reg_144 <= ap_const_lv17_1F;
            elsif (((icmp_ln48_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                l_0_reg_144 <= l_fu_236_p2;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_Val2_s_reg_156 <= ret_V_fu_273_p2(47 downto 16);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_Val2_s_reg_156 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                coef_load_reg_364 <= coef_q0;
                select_ln49_reg_359 <= select_ln49_fu_242_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_reg_329 <= i_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                icmp_ln49_reg_339 <= icmp_ln49_fu_225_p2;
                    zext_ln49_reg_334(4 downto 0) <= zext_ln49_fu_220_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                in_val_V_reg_321 <= x_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_reg_292 <= j_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln41_reg_297(4 downto 0) <= zext_ln41_fu_192_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln46_reg_311(16 downto 0) <= zext_ln46_fu_203_p1(16 downto 0);
            end if;
        end if;
    end process;
    zext_ln41_reg_297(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln46_reg_311(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    zext_ln49_reg_334(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln39_fu_180_p2, ap_CS_fsm_state4, icmp_ln44_fu_197_p2, ap_CS_fsm_state6, icmp_ln48_fu_208_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln39_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln44_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln48_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln44_fu_197_p2)
    begin
        if ((((icmp_ln44_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln44_fu_197_p2)
    begin
        if (((icmp_ln44_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    coef_address0 <= zext_ln49_fu_220_p1(5 - 1 downto 0);

    coef_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            coef_ce0 <= ap_const_logic_1;
        else 
            coef_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hwin_V_address0_assign_proc : process(zext_ln41_reg_297, ap_CS_fsm_state6, zext_ln49_reg_334, ap_CS_fsm_state7, ap_CS_fsm_state3, zext_ln49_1_fu_231_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hwin_V_address0 <= zext_ln49_reg_334(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hwin_V_address0 <= zext_ln49_1_fu_231_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hwin_V_address0 <= zext_ln41_reg_297(5 - 1 downto 0);
        else 
            hwin_V_address0 <= "XXXXX";
        end if; 
    end process;


    hwin_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            hwin_V_ce0 <= ap_const_logic_1;
        else 
            hwin_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hwin_V_d0_assign_proc : process(x_V_q0, select_ln49_fu_242_p3, ap_CS_fsm_state7, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hwin_V_d0 <= select_ln49_fu_242_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hwin_V_d0 <= x_V_q0;
        else 
            hwin_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hwin_V_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            hwin_V_we0 <= ap_const_logic_1;
        else 
            hwin_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_214_p2 <= std_logic_vector(unsigned(i_0_reg_169) + unsigned(ap_const_lv5_1));
    icmp_ln39_fu_180_p2 <= "1" when (j_0_reg_133 = ap_const_lv5_1F) else "0";
    icmp_ln44_fu_197_p2 <= "1" when (l_0_reg_144 = ap_const_lv17_186A0) else "0";
    icmp_ln48_fu_208_p2 <= "1" when (i_0_reg_169 = ap_const_lv5_1F) else "0";
    icmp_ln49_fu_225_p2 <= "1" when (unsigned(i_0_reg_169) < unsigned(ap_const_lv5_1E)) else "0";
    j_fu_186_p2 <= std_logic_vector(unsigned(j_0_reg_133) + unsigned(ap_const_lv5_1));
    l_fu_236_p2 <= std_logic_vector(unsigned(l_0_reg_144) + unsigned(ap_const_lv17_1));
    lhs_V_fu_261_p3 <= (p_Val2_s_reg_156 & ap_const_lv16_0);
    r_V_fu_255_p0 <= r_V_fu_255_p00(12 - 1 downto 0);
    r_V_fu_255_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(coef_load_reg_364),44));
    r_V_fu_255_p1 <= select_ln49_reg_359;
    r_V_fu_255_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &r_V_fu_255_p0) * signed(r_V_fu_255_p1))), 44));
    ret_V_fu_273_p2 <= std_logic_vector(signed(sext_ln1192_fu_269_p1) + signed(lhs_V_fu_261_p3));
    select_ln49_fu_242_p3 <= 
        hwin_V_q0 when (icmp_ln49_reg_339(0) = '1') else 
        in_val_V_reg_321;
        sext_ln1192_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_255_p2),48));


    x_V_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln41_fu_192_p1, zext_ln46_fu_203_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_V_address0 <= zext_ln46_fu_203_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_V_address0 <= zext_ln41_fu_192_p1(17 - 1 downto 0);
        else 
            x_V_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_V_ce0 <= ap_const_logic_1;
        else 
            x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_V_address0_assign_proc : process(zext_ln41_reg_297, zext_ln46_reg_311, ap_CS_fsm_state6, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            y_V_address0 <= zext_ln46_reg_311(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            y_V_address0 <= zext_ln41_reg_297(17 - 1 downto 0);
        else 
            y_V_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            y_V_ce0 <= ap_const_logic_1;
        else 
            y_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_V_d0_assign_proc : process(x_V_q0, ap_CS_fsm_state6, ap_CS_fsm_state3, p_Val2_s_reg_156)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            y_V_d0 <= p_Val2_s_reg_156;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            y_V_d0 <= x_V_q0;
        else 
            y_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_V_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln48_fu_208_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln48_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            y_V_we0 <= ap_const_logic_1;
        else 
            y_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln41_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_133),64));
    zext_ln46_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_0_reg_144),64));
    zext_ln49_1_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_214_p2),64));
    zext_ln49_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_169),64));
end behav;
