-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decimation2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ary_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ary_V_ce0 : OUT STD_LOGIC;
    ary_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    new_ary_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    new_ary_V_full_n : IN STD_LOGIC;
    new_ary_V_write : OUT STD_LOGIC );
end;


architecture behav of decimation2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_30D4 : STD_LOGIC_VECTOR (13 downto 0) := "11000011010100";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv14_A : STD_LOGIC_VECTOR (13 downto 0) := "00000000001010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal new_ary_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln233_fu_95_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_fu_80_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal n_reg_124 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln230_fu_74_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln230_fu_113_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal n_0_reg_51 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_urem_reg_62 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln232_fu_86_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln233_fu_91_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln230_1_fu_101_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln230_1_fu_107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    n_0_reg_51_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln233_fu_95_p2 = ap_const_lv1_1) and (new_ary_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                n_0_reg_51 <= n_reg_124;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n_0_reg_51 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln233_fu_95_p2 = ap_const_lv1_1) and (new_ary_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_urem_reg_62 <= select_ln230_fu_113_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_urem_reg_62 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                n_reg_124 <= n_fu_80_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, new_ary_V_full_n, ap_CS_fsm_state3, icmp_ln233_fu_95_p2, ap_CS_fsm_state2, icmp_ln230_fu_74_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln230_fu_74_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((icmp_ln233_fu_95_p2 = ap_const_lv1_1) and (new_ary_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln230_1_fu_101_p2 <= std_logic_vector(unsigned(phi_urem_reg_62) + unsigned(ap_const_lv14_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state3_assign_proc : process(new_ary_V_full_n, icmp_ln233_fu_95_p2)
    begin
                ap_block_state3 <= ((icmp_ln233_fu_95_p2 = ap_const_lv1_1) and (new_ary_V_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln230_fu_74_p2)
    begin
        if ((((icmp_ln230_fu_74_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln230_fu_74_p2)
    begin
        if (((icmp_ln230_fu_74_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ary_V_address0 <= zext_ln232_fu_86_p1(14 - 1 downto 0);

    ary_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ary_V_ce0 <= ap_const_logic_1;
        else 
            ary_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln230_1_fu_107_p2 <= "1" when (unsigned(add_ln230_1_fu_101_p2) < unsigned(ap_const_lv14_A)) else "0";
    icmp_ln230_fu_74_p2 <= "1" when (n_0_reg_51 = ap_const_lv14_30D4) else "0";
    icmp_ln233_fu_95_p2 <= "1" when (trunc_ln233_fu_91_p1 = ap_const_lv4_0) else "0";
    n_fu_80_p2 <= std_logic_vector(unsigned(n_0_reg_51) + unsigned(ap_const_lv14_1));

    new_ary_V_blk_n_assign_proc : process(new_ary_V_full_n, ap_CS_fsm_state3, icmp_ln233_fu_95_p2)
    begin
        if (((icmp_ln233_fu_95_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            new_ary_V_blk_n <= new_ary_V_full_n;
        else 
            new_ary_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    new_ary_V_din <= ary_V_q0;

    new_ary_V_write_assign_proc : process(new_ary_V_full_n, ap_CS_fsm_state3, icmp_ln233_fu_95_p2)
    begin
        if ((not(((icmp_ln233_fu_95_p2 = ap_const_lv1_1) and (new_ary_V_full_n = ap_const_logic_0))) and (icmp_ln233_fu_95_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            new_ary_V_write <= ap_const_logic_1;
        else 
            new_ary_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln230_fu_113_p3 <= 
        add_ln230_1_fu_101_p2 when (icmp_ln230_1_fu_107_p2(0) = '1') else 
        ap_const_lv14_0;
    trunc_ln233_fu_91_p1 <= phi_urem_reg_62(4 - 1 downto 0);
    zext_ln232_fu_86_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_51),64));
end behav;
