// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="demodulationFM,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.566000,HLS_SYN_LAT=21306587,HLS_SYN_TPT=none,HLS_SYN_MEM=1120,HLS_SYN_DSP=26,HLS_SYN_FF=1984,HLS_SYN_LUT=3427,HLS_VERSION=2019_2}" *)

module demodulationFM (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y_I_V_dout,
        y_I_V_empty_n,
        y_I_V_read,
        y_Q_V_dout,
        y_Q_V_empty_n,
        y_Q_V_read,
        y_demod_d_V_din,
        y_demod_d_V_full_n,
        y_demod_d_V_write,
        ap_return
);

parameter    ap_ST_fsm_state1 = 114'd1;
parameter    ap_ST_fsm_state2 = 114'd2;
parameter    ap_ST_fsm_state3 = 114'd4;
parameter    ap_ST_fsm_state4 = 114'd8;
parameter    ap_ST_fsm_state5 = 114'd16;
parameter    ap_ST_fsm_state6 = 114'd32;
parameter    ap_ST_fsm_state7 = 114'd64;
parameter    ap_ST_fsm_state8 = 114'd128;
parameter    ap_ST_fsm_state9 = 114'd256;
parameter    ap_ST_fsm_state10 = 114'd512;
parameter    ap_ST_fsm_state11 = 114'd1024;
parameter    ap_ST_fsm_state12 = 114'd2048;
parameter    ap_ST_fsm_state13 = 114'd4096;
parameter    ap_ST_fsm_state14 = 114'd8192;
parameter    ap_ST_fsm_state15 = 114'd16384;
parameter    ap_ST_fsm_state16 = 114'd32768;
parameter    ap_ST_fsm_state17 = 114'd65536;
parameter    ap_ST_fsm_state18 = 114'd131072;
parameter    ap_ST_fsm_state19 = 114'd262144;
parameter    ap_ST_fsm_state20 = 114'd524288;
parameter    ap_ST_fsm_state21 = 114'd1048576;
parameter    ap_ST_fsm_state22 = 114'd2097152;
parameter    ap_ST_fsm_state23 = 114'd4194304;
parameter    ap_ST_fsm_state24 = 114'd8388608;
parameter    ap_ST_fsm_state25 = 114'd16777216;
parameter    ap_ST_fsm_state26 = 114'd33554432;
parameter    ap_ST_fsm_state27 = 114'd67108864;
parameter    ap_ST_fsm_state28 = 114'd134217728;
parameter    ap_ST_fsm_state29 = 114'd268435456;
parameter    ap_ST_fsm_state30 = 114'd536870912;
parameter    ap_ST_fsm_state31 = 114'd1073741824;
parameter    ap_ST_fsm_state32 = 114'd2147483648;
parameter    ap_ST_fsm_state33 = 114'd4294967296;
parameter    ap_ST_fsm_state34 = 114'd8589934592;
parameter    ap_ST_fsm_state35 = 114'd17179869184;
parameter    ap_ST_fsm_state36 = 114'd34359738368;
parameter    ap_ST_fsm_state37 = 114'd68719476736;
parameter    ap_ST_fsm_state38 = 114'd137438953472;
parameter    ap_ST_fsm_state39 = 114'd274877906944;
parameter    ap_ST_fsm_state40 = 114'd549755813888;
parameter    ap_ST_fsm_state41 = 114'd1099511627776;
parameter    ap_ST_fsm_state42 = 114'd2199023255552;
parameter    ap_ST_fsm_state43 = 114'd4398046511104;
parameter    ap_ST_fsm_state44 = 114'd8796093022208;
parameter    ap_ST_fsm_state45 = 114'd17592186044416;
parameter    ap_ST_fsm_state46 = 114'd35184372088832;
parameter    ap_ST_fsm_state47 = 114'd70368744177664;
parameter    ap_ST_fsm_state48 = 114'd140737488355328;
parameter    ap_ST_fsm_state49 = 114'd281474976710656;
parameter    ap_ST_fsm_state50 = 114'd562949953421312;
parameter    ap_ST_fsm_state51 = 114'd1125899906842624;
parameter    ap_ST_fsm_state52 = 114'd2251799813685248;
parameter    ap_ST_fsm_state53 = 114'd4503599627370496;
parameter    ap_ST_fsm_state54 = 114'd9007199254740992;
parameter    ap_ST_fsm_state55 = 114'd18014398509481984;
parameter    ap_ST_fsm_state56 = 114'd36028797018963968;
parameter    ap_ST_fsm_state57 = 114'd72057594037927936;
parameter    ap_ST_fsm_state58 = 114'd144115188075855872;
parameter    ap_ST_fsm_state59 = 114'd288230376151711744;
parameter    ap_ST_fsm_state60 = 114'd576460752303423488;
parameter    ap_ST_fsm_state61 = 114'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 114'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 114'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 114'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 114'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 114'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 114'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 114'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 114'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 114'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 114'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 114'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 114'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 114'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 114'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 114'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 114'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 114'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 114'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 114'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 114'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 114'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 114'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 114'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 114'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 114'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 114'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 114'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 114'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 114'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 114'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 114'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 114'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 114'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 114'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 114'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 114'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 114'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 114'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 114'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 114'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 114'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 114'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 114'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 114'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 114'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 114'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 114'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 114'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 114'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 114'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 114'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 114'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 114'd10384593717069655257060992658440192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] y_I_V_dout;
input   y_I_V_empty_n;
output   y_I_V_read;
input  [31:0] y_Q_V_dout;
input   y_Q_V_empty_n;
output   y_Q_V_read;
output  [31:0] y_demod_d_V_din;
input   y_demod_d_V_full_n;
output   y_demod_d_V_write;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_I_V_read;
reg y_Q_V_read;
reg y_demod_d_V_write;

(* fsm_encoding = "none" *) reg   [113:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state9;
wire   [31:0] y_I_d_V_q0;
wire    ap_CS_fsm_state10;
wire   [31:0] y_Q_d_V_q0;
wire   [63:0] zext_ln255_fu_217_p1;
reg   [63:0] zext_ln255_reg_347;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln252_fu_211_p2;
wire   [13:0] q_fu_223_p2;
reg   [13:0] q_reg_362;
reg  signed [31:0] ary_r_value_1_V_reg_367;
wire    ap_CS_fsm_state12;
reg  signed [31:0] ary_i_value_1_V_reg_373;
wire   [31:0] dii_V_fu_229_p2;
reg   [31:0] dii_V_reg_379;
wire   [31:0] dqq_V_fu_235_p2;
reg   [31:0] dqq_V_reg_384;
wire   [63:0] ret_V_fu_265_p2;
reg   [63:0] ret_V_reg_389;
wire    ap_CS_fsm_state13;
wire   [64:0] ret_V_6_fu_291_p2;
reg  signed [64:0] ret_V_6_reg_394;
wire    ap_CS_fsm_state14;
reg   [16:0] y_I_s_V_address0;
reg    y_I_s_V_ce0;
reg    y_I_s_V_we0;
wire   [31:0] y_I_s_V_q0;
reg   [16:0] y_Q_s_V_address0;
reg    y_Q_s_V_ce0;
reg    y_Q_s_V_we0;
wire   [31:0] y_Q_s_V_q0;
reg   [16:0] y_I_fpb_V_address0;
reg    y_I_fpb_V_ce0;
reg    y_I_fpb_V_we0;
wire   [31:0] y_I_fpb_V_q0;
reg   [16:0] y_Q_fpb_V_address0;
reg    y_Q_fpb_V_ce0;
reg    y_Q_fpb_V_we0;
wire   [31:0] y_Q_fpb_V_q0;
reg   [13:0] y_I_d_V_address0;
reg    y_I_d_V_ce0;
reg    y_I_d_V_we0;
reg   [13:0] y_Q_d_V_address0;
reg    y_Q_d_V_ce0;
reg    y_Q_d_V_we0;
reg   [13:0] y_demod_nd_V_address0;
reg    y_demod_nd_V_ce0;
reg    y_demod_nd_V_we0;
reg   [31:0] y_demod_nd_V_d0;
wire   [31:0] y_demod_nd_V_q0;
wire    grp_shift_fu_174_ap_start;
wire    grp_shift_fu_174_ap_done;
wire    grp_shift_fu_174_ap_idle;
wire    grp_shift_fu_174_ap_ready;
wire    grp_shift_fu_174_ary_r_V_read;
wire    grp_shift_fu_174_ary_i_V_read;
wire   [16:0] grp_shift_fu_174_ary_r_s_V_address0;
wire    grp_shift_fu_174_ary_r_s_V_ce0;
wire    grp_shift_fu_174_ary_r_s_V_we0;
wire   [31:0] grp_shift_fu_174_ary_r_s_V_d0;
wire   [16:0] grp_shift_fu_174_ary_i_s_V_address0;
wire    grp_shift_fu_174_ary_i_s_V_ce0;
wire    grp_shift_fu_174_ary_i_s_V_we0;
wire   [31:0] grp_shift_fu_174_ary_i_s_V_d0;
wire    grp_fir_fu_190_ap_start;
wire    grp_fir_fu_190_ap_done;
wire    grp_fir_fu_190_ap_idle;
wire    grp_fir_fu_190_ap_ready;
wire   [16:0] grp_fir_fu_190_x_V_address0;
wire    grp_fir_fu_190_x_V_ce0;
reg   [31:0] grp_fir_fu_190_x_V_q0;
wire   [16:0] grp_fir_fu_190_y_V_address0;
wire    grp_fir_fu_190_y_V_ce0;
wire    grp_fir_fu_190_y_V_we0;
wire   [31:0] grp_fir_fu_190_y_V_d0;
wire    grp_decimation2_fu_198_ap_start;
wire    grp_decimation2_fu_198_ap_done;
wire    grp_decimation2_fu_198_ap_idle;
wire    grp_decimation2_fu_198_ap_ready;
wire   [13:0] grp_decimation2_fu_198_ary_V_address0;
wire    grp_decimation2_fu_198_ary_V_ce0;
wire   [31:0] grp_decimation2_fu_198_new_ary_V_din;
wire    grp_decimation2_fu_198_new_ary_V_write;
wire    grp_decimation1_fu_205_ap_start;
wire    grp_decimation1_fu_205_ap_done;
wire    grp_decimation1_fu_205_ap_idle;
wire    grp_decimation1_fu_205_ap_ready;
wire   [16:0] grp_decimation1_fu_205_ary_V_address0;
wire    grp_decimation1_fu_205_ary_V_ce0;
reg   [31:0] grp_decimation1_fu_205_ary_V_q0;
wire   [13:0] grp_decimation1_fu_205_new_ary_V_address0;
wire    grp_decimation1_fu_205_new_ary_V_ce0;
wire    grp_decimation1_fu_205_new_ary_V_we0;
wire   [31:0] grp_decimation1_fu_205_new_ary_V_d0;
reg   [31:0] p_Val2_13_reg_143;
wire    ap_CS_fsm_state113;
reg   [31:0] p_Val2_15_reg_153;
reg   [13:0] q_0_i_reg_163;
reg    grp_shift_fu_174_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_fir_fu_190_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
reg    grp_decimation2_fu_198_ap_start_reg;
wire    ap_CS_fsm_state114;
reg    grp_decimation1_fu_205_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire  signed [31:0] dii_V_fu_229_p0;
wire  signed [31:0] dqq_V_fu_235_p0;
wire  signed [31:0] r_V_6_fu_247_p0;
wire  signed [31:0] r_V_6_fu_247_p1;
wire  signed [63:0] r_V_fu_241_p1;
wire  signed [31:0] r_V_7_fu_259_p0;
wire  signed [63:0] r_V_2_fu_253_p1;
wire  signed [31:0] r_V_7_fu_259_p1;
wire   [63:0] r_V_6_fu_247_p2;
wire   [63:0] r_V_7_fu_259_p2;
wire  signed [31:0] r_V_8_fu_271_p0;
wire  signed [31:0] r_V_8_fu_271_p1;
wire  signed [31:0] r_V_9_fu_277_p0;
wire  signed [31:0] r_V_9_fu_277_p1;
wire   [63:0] r_V_8_fu_271_p2;
wire   [63:0] r_V_9_fu_277_p2;
wire  signed [64:0] rhs_V_fu_287_p1;
wire  signed [64:0] lhs_V_fu_283_p1;
wire   [95:0] grp_fu_307_p0;
wire   [95:0] grp_fu_307_p2;
reg    grp_fu_307_ap_start;
wire    grp_fu_307_ap_done;
reg   [113:0] ap_NS_fsm;
reg    ap_block_state6_on_subcall_done;

// power-on initialization
initial begin
#0 ap_CS_fsm = 114'd1;
#0 grp_shift_fu_174_ap_start_reg = 1'b0;
#0 grp_fir_fu_190_ap_start_reg = 1'b0;
#0 grp_decimation2_fu_198_ap_start_reg = 1'b0;
#0 grp_decimation1_fu_205_ap_start_reg = 1'b0;
end

demodulationFM_y_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 100000 ),
    .AddressWidth( 17 ))
y_I_s_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_I_s_V_address0),
    .ce0(y_I_s_V_ce0),
    .we0(y_I_s_V_we0),
    .d0(grp_shift_fu_174_ary_r_s_V_d0),
    .q0(y_I_s_V_q0)
);

demodulationFM_y_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 100000 ),
    .AddressWidth( 17 ))
y_Q_s_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_Q_s_V_address0),
    .ce0(y_Q_s_V_ce0),
    .we0(y_Q_s_V_we0),
    .d0(grp_shift_fu_174_ary_i_s_V_d0),
    .q0(y_Q_s_V_q0)
);

demodulationFM_y_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 100000 ),
    .AddressWidth( 17 ))
y_I_fpb_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_I_fpb_V_address0),
    .ce0(y_I_fpb_V_ce0),
    .we0(y_I_fpb_V_we0),
    .d0(grp_fir_fu_190_y_V_d0),
    .q0(y_I_fpb_V_q0)
);

demodulationFM_y_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 100000 ),
    .AddressWidth( 17 ))
y_Q_fpb_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_Q_fpb_V_address0),
    .ce0(y_Q_fpb_V_ce0),
    .we0(y_Q_fpb_V_we0),
    .d0(grp_fir_fu_190_y_V_d0),
    .q0(y_Q_fpb_V_q0)
);

demodulationFM_y_fYi #(
    .DataWidth( 32 ),
    .AddressRange( 12500 ),
    .AddressWidth( 14 ))
y_I_d_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_I_d_V_address0),
    .ce0(y_I_d_V_ce0),
    .we0(y_I_d_V_we0),
    .d0(grp_decimation1_fu_205_new_ary_V_d0),
    .q0(y_I_d_V_q0)
);

demodulationFM_y_fYi #(
    .DataWidth( 32 ),
    .AddressRange( 12500 ),
    .AddressWidth( 14 ))
y_Q_d_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_Q_d_V_address0),
    .ce0(y_Q_d_V_ce0),
    .we0(y_Q_d_V_we0),
    .d0(grp_decimation1_fu_205_new_ary_V_d0),
    .q0(y_Q_d_V_q0)
);

demodulationFM_y_fYi #(
    .DataWidth( 32 ),
    .AddressRange( 12500 ),
    .AddressWidth( 14 ))
y_demod_nd_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_demod_nd_V_address0),
    .ce0(y_demod_nd_V_ce0),
    .we0(y_demod_nd_V_we0),
    .d0(y_demod_nd_V_d0),
    .q0(y_demod_nd_V_q0)
);

shift grp_shift_fu_174(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_shift_fu_174_ap_start),
    .ap_done(grp_shift_fu_174_ap_done),
    .ap_idle(grp_shift_fu_174_ap_idle),
    .ap_ready(grp_shift_fu_174_ap_ready),
    .ary_r_V_dout(y_I_V_dout),
    .ary_r_V_empty_n(y_I_V_empty_n),
    .ary_r_V_read(grp_shift_fu_174_ary_r_V_read),
    .ary_i_V_dout(y_Q_V_dout),
    .ary_i_V_empty_n(y_Q_V_empty_n),
    .ary_i_V_read(grp_shift_fu_174_ary_i_V_read),
    .ary_r_s_V_address0(grp_shift_fu_174_ary_r_s_V_address0),
    .ary_r_s_V_ce0(grp_shift_fu_174_ary_r_s_V_ce0),
    .ary_r_s_V_we0(grp_shift_fu_174_ary_r_s_V_we0),
    .ary_r_s_V_d0(grp_shift_fu_174_ary_r_s_V_d0),
    .ary_i_s_V_address0(grp_shift_fu_174_ary_i_s_V_address0),
    .ary_i_s_V_ce0(grp_shift_fu_174_ary_i_s_V_ce0),
    .ary_i_s_V_we0(grp_shift_fu_174_ary_i_s_V_we0),
    .ary_i_s_V_d0(grp_shift_fu_174_ary_i_s_V_d0)
);

fir grp_fir_fu_190(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_fir_fu_190_ap_start),
    .ap_done(grp_fir_fu_190_ap_done),
    .ap_idle(grp_fir_fu_190_ap_idle),
    .ap_ready(grp_fir_fu_190_ap_ready),
    .x_V_address0(grp_fir_fu_190_x_V_address0),
    .x_V_ce0(grp_fir_fu_190_x_V_ce0),
    .x_V_q0(grp_fir_fu_190_x_V_q0),
    .y_V_address0(grp_fir_fu_190_y_V_address0),
    .y_V_ce0(grp_fir_fu_190_y_V_ce0),
    .y_V_we0(grp_fir_fu_190_y_V_we0),
    .y_V_d0(grp_fir_fu_190_y_V_d0)
);

decimation2 grp_decimation2_fu_198(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_decimation2_fu_198_ap_start),
    .ap_done(grp_decimation2_fu_198_ap_done),
    .ap_idle(grp_decimation2_fu_198_ap_idle),
    .ap_ready(grp_decimation2_fu_198_ap_ready),
    .ary_V_address0(grp_decimation2_fu_198_ary_V_address0),
    .ary_V_ce0(grp_decimation2_fu_198_ary_V_ce0),
    .ary_V_q0(y_demod_nd_V_q0),
    .new_ary_V_din(grp_decimation2_fu_198_new_ary_V_din),
    .new_ary_V_full_n(y_demod_d_V_full_n),
    .new_ary_V_write(grp_decimation2_fu_198_new_ary_V_write)
);

decimation1 grp_decimation1_fu_205(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_decimation1_fu_205_ap_start),
    .ap_done(grp_decimation1_fu_205_ap_done),
    .ap_idle(grp_decimation1_fu_205_ap_idle),
    .ap_ready(grp_decimation1_fu_205_ap_ready),
    .ary_V_address0(grp_decimation1_fu_205_ary_V_address0),
    .ary_V_ce0(grp_decimation1_fu_205_ary_V_ce0),
    .ary_V_q0(grp_decimation1_fu_205_ary_V_q0),
    .new_ary_V_address0(grp_decimation1_fu_205_new_ary_V_address0),
    .new_ary_V_ce0(grp_decimation1_fu_205_new_ary_V_ce0),
    .new_ary_V_we0(grp_decimation1_fu_205_new_ary_V_we0),
    .new_ary_V_d0(grp_decimation1_fu_205_new_ary_V_d0)
);

demodulationFM_sdibs #(
    .ID( 1 ),
    .NUM_STAGE( 100 ),
    .din0_WIDTH( 96 ),
    .din1_WIDTH( 65 ),
    .dout_WIDTH( 96 ))
demodulationFM_sdibs_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_307_ap_start),
    .done(grp_fu_307_ap_done),
    .din0(grp_fu_307_p0),
    .din1(ret_V_6_reg_394),
    .ce(1'b1),
    .dout(grp_fu_307_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_decimation1_fu_205_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
            grp_decimation1_fu_205_ap_start_reg <= 1'b1;
        end else if ((grp_decimation1_fu_205_ap_ready == 1'b1)) begin
            grp_decimation1_fu_205_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_decimation2_fu_198_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln252_fu_211_p2 == 1'd1))) begin
            grp_decimation2_fu_198_ap_start_reg <= 1'b1;
        end else if ((grp_decimation2_fu_198_ap_ready == 1'b1)) begin
            grp_decimation2_fu_198_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_fir_fu_190_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
            grp_fir_fu_190_ap_start_reg <= 1'b1;
        end else if ((grp_fir_fu_190_ap_ready == 1'b1)) begin
            grp_fir_fu_190_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_shift_fu_174_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_shift_fu_174_ap_start_reg <= 1'b1;
        end else if ((grp_shift_fu_174_ap_ready == 1'b1)) begin
            grp_shift_fu_174_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        p_Val2_13_reg_143 <= ary_r_value_1_V_reg_367;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_13_reg_143 <= y_I_d_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        p_Val2_15_reg_153 <= ary_i_value_1_V_reg_373;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_15_reg_153 <= y_Q_d_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        q_0_i_reg_163 <= q_reg_362;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        q_0_i_reg_163 <= 14'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ary_i_value_1_V_reg_373 <= y_Q_d_V_q0;
        ary_r_value_1_V_reg_367 <= y_I_d_V_q0;
        dii_V_reg_379 <= dii_V_fu_229_p2;
        dqq_V_reg_384 <= dqq_V_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln252_fu_211_p2 == 1'd0))) begin
        q_reg_362 <= q_fu_223_p2;
        zext_ln255_reg_347[13 : 0] <= zext_ln255_fu_217_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ret_V_6_reg_394 <= ret_V_6_fu_291_p2;
        ret_V_reg_389 <= ret_V_fu_265_p2;
    end
end

always @ (*) begin
    if (((grp_decimation2_fu_198_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state114))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_decimation2_fu_198_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state114))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_decimation1_fu_205_ary_V_q0 = y_Q_fpb_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_decimation1_fu_205_ary_V_q0 = y_I_fpb_V_q0;
    end else begin
        grp_decimation1_fu_205_ary_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fir_fu_190_x_V_q0 = y_Q_s_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fir_fu_190_x_V_q0 = y_I_s_V_q0;
    end else begin
        grp_fir_fu_190_x_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_307_ap_start = 1'b1;
    end else begin
        grp_fu_307_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_I_V_read = grp_shift_fu_174_ary_r_V_read;
    end else begin
        y_I_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        y_I_d_V_address0 = zext_ln255_fu_217_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        y_I_d_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        y_I_d_V_address0 = grp_decimation1_fu_205_new_ary_V_address0;
    end else begin
        y_I_d_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        y_I_d_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        y_I_d_V_ce0 = grp_decimation1_fu_205_new_ary_V_ce0;
    end else begin
        y_I_d_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_I_d_V_we0 = grp_decimation1_fu_205_new_ary_V_we0;
    end else begin
        y_I_d_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_I_fpb_V_address0 = grp_decimation1_fu_205_ary_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        y_I_fpb_V_address0 = grp_fir_fu_190_y_V_address0;
    end else begin
        y_I_fpb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_I_fpb_V_ce0 = grp_decimation1_fu_205_ary_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        y_I_fpb_V_ce0 = grp_fir_fu_190_y_V_ce0;
    end else begin
        y_I_fpb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_I_fpb_V_we0 = grp_fir_fu_190_y_V_we0;
    end else begin
        y_I_fpb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_I_s_V_address0 = grp_fir_fu_190_x_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_I_s_V_address0 = grp_shift_fu_174_ary_r_s_V_address0;
    end else begin
        y_I_s_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_I_s_V_ce0 = grp_fir_fu_190_x_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_I_s_V_ce0 = grp_shift_fu_174_ary_r_s_V_ce0;
    end else begin
        y_I_s_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_I_s_V_we0 = grp_shift_fu_174_ary_r_s_V_we0;
    end else begin
        y_I_s_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_Q_V_read = grp_shift_fu_174_ary_i_V_read;
    end else begin
        y_Q_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        y_Q_d_V_address0 = zext_ln255_fu_217_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        y_Q_d_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        y_Q_d_V_address0 = grp_decimation1_fu_205_new_ary_V_address0;
    end else begin
        y_Q_d_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        y_Q_d_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        y_Q_d_V_ce0 = grp_decimation1_fu_205_new_ary_V_ce0;
    end else begin
        y_Q_d_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        y_Q_d_V_we0 = grp_decimation1_fu_205_new_ary_V_we0;
    end else begin
        y_Q_d_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        y_Q_fpb_V_address0 = grp_decimation1_fu_205_ary_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        y_Q_fpb_V_address0 = grp_fir_fu_190_y_V_address0;
    end else begin
        y_Q_fpb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        y_Q_fpb_V_ce0 = grp_decimation1_fu_205_ary_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        y_Q_fpb_V_ce0 = grp_fir_fu_190_y_V_ce0;
    end else begin
        y_Q_fpb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_Q_fpb_V_we0 = grp_fir_fu_190_y_V_we0;
    end else begin
        y_Q_fpb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_Q_s_V_address0 = grp_fir_fu_190_x_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_Q_s_V_address0 = grp_shift_fu_174_ary_i_s_V_address0;
    end else begin
        y_Q_s_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_Q_s_V_ce0 = grp_fir_fu_190_x_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_Q_s_V_ce0 = grp_shift_fu_174_ary_i_s_V_ce0;
    end else begin
        y_Q_s_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_Q_s_V_we0 = grp_shift_fu_174_ary_i_s_V_we0;
    end else begin
        y_Q_s_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        y_demod_d_V_write = grp_decimation2_fu_198_new_ary_V_write;
    end else begin
        y_demod_d_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        y_demod_nd_V_address0 = zext_ln255_reg_347;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        y_demod_nd_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        y_demod_nd_V_address0 = grp_decimation2_fu_198_ary_V_address0;
    end else begin
        y_demod_nd_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state10))) begin
        y_demod_nd_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        y_demod_nd_V_ce0 = grp_decimation2_fu_198_ary_V_ce0;
    end else begin
        y_demod_nd_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        y_demod_nd_V_d0 = {{grp_fu_307_p2[47:16]}};
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        y_demod_nd_V_d0 = 32'd0;
    end else begin
        y_demod_nd_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state10))) begin
        y_demod_nd_V_we0 = 1'b1;
    end else begin
        y_demod_nd_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_shift_fu_174_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_fir_fu_190_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_decimation1_fu_205_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln252_fu_211_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state114;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state114 : begin
            if (((grp_decimation2_fu_198_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state114))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state114;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state6_on_subcall_done = ((grp_decimation1_fu_205_ap_done == 1'b0) | (grp_fir_fu_190_ap_done == 1'b0));
end

assign ap_return = 32'd0;

assign dii_V_fu_229_p0 = y_I_d_V_q0;

assign dii_V_fu_229_p2 = ($signed(dii_V_fu_229_p0) - $signed(p_Val2_13_reg_143));

assign dqq_V_fu_235_p0 = y_Q_d_V_q0;

assign dqq_V_fu_235_p2 = ($signed(dqq_V_fu_235_p0) - $signed(p_Val2_15_reg_153));

assign grp_decimation1_fu_205_ap_start = grp_decimation1_fu_205_ap_start_reg;

assign grp_decimation2_fu_198_ap_start = grp_decimation2_fu_198_ap_start_reg;

assign grp_fir_fu_190_ap_start = grp_fir_fu_190_ap_start_reg;

assign grp_fu_307_p0 = {{ret_V_reg_389}, {32'd0}};

assign grp_shift_fu_174_ap_start = grp_shift_fu_174_ap_start_reg;

assign icmp_ln252_fu_211_p2 = ((q_0_i_reg_163 == 14'd12500) ? 1'b1 : 1'b0);

assign lhs_V_fu_283_p1 = $signed(r_V_8_fu_271_p2);

assign q_fu_223_p2 = (q_0_i_reg_163 + 14'd1);

assign r_V_2_fu_253_p1 = ary_i_value_1_V_reg_373;

assign r_V_6_fu_247_p0 = dqq_V_reg_384;

assign r_V_6_fu_247_p1 = r_V_fu_241_p1;

assign r_V_6_fu_247_p2 = ($signed(r_V_6_fu_247_p0) * $signed(r_V_6_fu_247_p1));

assign r_V_7_fu_259_p0 = r_V_2_fu_253_p1;

assign r_V_7_fu_259_p1 = dii_V_reg_379;

assign r_V_7_fu_259_p2 = ($signed(r_V_7_fu_259_p0) * $signed(r_V_7_fu_259_p1));

assign r_V_8_fu_271_p0 = r_V_fu_241_p1;

assign r_V_8_fu_271_p1 = r_V_fu_241_p1;

assign r_V_8_fu_271_p2 = ($signed(r_V_8_fu_271_p0) * $signed(r_V_8_fu_271_p1));

assign r_V_9_fu_277_p0 = r_V_2_fu_253_p1;

assign r_V_9_fu_277_p1 = r_V_2_fu_253_p1;

assign r_V_9_fu_277_p2 = ($signed(r_V_9_fu_277_p0) * $signed(r_V_9_fu_277_p1));

assign r_V_fu_241_p1 = ary_r_value_1_V_reg_367;

assign ret_V_6_fu_291_p2 = ($signed(rhs_V_fu_287_p1) + $signed(lhs_V_fu_283_p1));

assign ret_V_fu_265_p2 = (r_V_6_fu_247_p2 - r_V_7_fu_259_p2);

assign rhs_V_fu_287_p1 = $signed(r_V_9_fu_277_p2);

assign y_demod_d_V_din = grp_decimation2_fu_198_new_ary_V_din;

assign zext_ln255_fu_217_p1 = q_0_i_reg_163;

always @ (posedge ap_clk) begin
    zext_ln255_reg_347[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //demodulationFM
