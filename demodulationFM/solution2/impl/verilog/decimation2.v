// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module decimation2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ary_V_address0,
        ary_V_ce0,
        ary_V_q0,
        new_ary_V_din,
        new_ary_V_full_n,
        new_ary_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] ary_V_address0;
output   ary_V_ce0;
input  [31:0] ary_V_q0;
output  [31:0] new_ary_V_din;
input   new_ary_V_full_n;
output   new_ary_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ary_V_ce0;
reg new_ary_V_write;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    new_ary_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln233_fu_95_p2;
wire   [13:0] n_fu_80_p2;
reg   [13:0] n_reg_124;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln230_fu_74_p2;
wire   [13:0] select_ln230_fu_113_p3;
reg    ap_block_state3;
reg   [13:0] n_0_reg_51;
reg   [13:0] phi_urem_reg_62;
wire   [63:0] zext_ln232_fu_86_p1;
wire   [3:0] trunc_ln233_fu_91_p1;
wire   [13:0] add_ln230_1_fu_101_p2;
wire   [0:0] icmp_ln230_1_fu_107_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln233_fu_95_p2 == 1'd1) & (new_ary_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        n_0_reg_51 <= n_reg_124;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n_0_reg_51 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln233_fu_95_p2 == 1'd1) & (new_ary_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_urem_reg_62 <= select_ln230_fu_113_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_urem_reg_62 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n_reg_124 <= n_fu_80_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln230_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ary_V_ce0 = 1'b1;
    end else begin
        ary_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln233_fu_95_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        new_ary_V_blk_n = new_ary_V_full_n;
    end else begin
        new_ary_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln233_fu_95_p2 == 1'd1) & (new_ary_V_full_n == 1'b0)) & (icmp_ln233_fu_95_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        new_ary_V_write = 1'b1;
    end else begin
        new_ary_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln230_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((icmp_ln233_fu_95_p2 == 1'd1) & (new_ary_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln230_1_fu_101_p2 = (phi_urem_reg_62 + 14'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state3 = ((icmp_ln233_fu_95_p2 == 1'd1) & (new_ary_V_full_n == 1'b0));
end

assign ary_V_address0 = zext_ln232_fu_86_p1;

assign icmp_ln230_1_fu_107_p2 = ((add_ln230_1_fu_101_p2 < 14'd10) ? 1'b1 : 1'b0);

assign icmp_ln230_fu_74_p2 = ((n_0_reg_51 == 14'd12500) ? 1'b1 : 1'b0);

assign icmp_ln233_fu_95_p2 = ((trunc_ln233_fu_91_p1 == 4'd0) ? 1'b1 : 1'b0);

assign n_fu_80_p2 = (n_0_reg_51 + 14'd1);

assign new_ary_V_din = ary_V_q0;

assign select_ln230_fu_113_p3 = ((icmp_ln230_1_fu_107_p2[0:0] === 1'b1) ? add_ln230_1_fu_101_p2 : 14'd0);

assign trunc_ln233_fu_91_p1 = phi_urem_reg_62[3:0];

assign zext_ln232_fu_86_p1 = n_0_reg_51;

endmodule //decimation2
