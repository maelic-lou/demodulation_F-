// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="demodulationFM,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.566000,HLS_SYN_LAT=15397042,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=28,HLS_SYN_FF=2261,HLS_SYN_LUT=3269,HLS_VERSION=2019_2}" *)

module demodulationFM (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y_I_V_address0,
        y_I_V_ce0,
        y_I_V_we0,
        y_I_V_d0,
        y_I_V_q0,
        y_Q_V_address0,
        y_Q_V_ce0,
        y_Q_V_we0,
        y_Q_V_d0,
        y_Q_V_q0,
        y_demod_d_V_address0,
        y_demod_d_V_ce0,
        y_demod_d_V_we0,
        y_demod_d_V_d0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 142'd1;
parameter    ap_ST_fsm_state2 = 142'd2;
parameter    ap_ST_fsm_state3 = 142'd4;
parameter    ap_ST_fsm_state4 = 142'd8;
parameter    ap_ST_fsm_state5 = 142'd16;
parameter    ap_ST_fsm_state6 = 142'd32;
parameter    ap_ST_fsm_state7 = 142'd64;
parameter    ap_ST_fsm_state8 = 142'd128;
parameter    ap_ST_fsm_state9 = 142'd256;
parameter    ap_ST_fsm_state10 = 142'd512;
parameter    ap_ST_fsm_state11 = 142'd1024;
parameter    ap_ST_fsm_state12 = 142'd2048;
parameter    ap_ST_fsm_state13 = 142'd4096;
parameter    ap_ST_fsm_state14 = 142'd8192;
parameter    ap_ST_fsm_state15 = 142'd16384;
parameter    ap_ST_fsm_state16 = 142'd32768;
parameter    ap_ST_fsm_state17 = 142'd65536;
parameter    ap_ST_fsm_state18 = 142'd131072;
parameter    ap_ST_fsm_state19 = 142'd262144;
parameter    ap_ST_fsm_state20 = 142'd524288;
parameter    ap_ST_fsm_state21 = 142'd1048576;
parameter    ap_ST_fsm_state22 = 142'd2097152;
parameter    ap_ST_fsm_state23 = 142'd4194304;
parameter    ap_ST_fsm_state24 = 142'd8388608;
parameter    ap_ST_fsm_state25 = 142'd16777216;
parameter    ap_ST_fsm_state26 = 142'd33554432;
parameter    ap_ST_fsm_state27 = 142'd67108864;
parameter    ap_ST_fsm_state28 = 142'd134217728;
parameter    ap_ST_fsm_state29 = 142'd268435456;
parameter    ap_ST_fsm_state30 = 142'd536870912;
parameter    ap_ST_fsm_state31 = 142'd1073741824;
parameter    ap_ST_fsm_state32 = 142'd2147483648;
parameter    ap_ST_fsm_state33 = 142'd4294967296;
parameter    ap_ST_fsm_state34 = 142'd8589934592;
parameter    ap_ST_fsm_state35 = 142'd17179869184;
parameter    ap_ST_fsm_state36 = 142'd34359738368;
parameter    ap_ST_fsm_state37 = 142'd68719476736;
parameter    ap_ST_fsm_state38 = 142'd137438953472;
parameter    ap_ST_fsm_state39 = 142'd274877906944;
parameter    ap_ST_fsm_state40 = 142'd549755813888;
parameter    ap_ST_fsm_state41 = 142'd1099511627776;
parameter    ap_ST_fsm_state42 = 142'd2199023255552;
parameter    ap_ST_fsm_state43 = 142'd4398046511104;
parameter    ap_ST_fsm_state44 = 142'd8796093022208;
parameter    ap_ST_fsm_state45 = 142'd17592186044416;
parameter    ap_ST_fsm_state46 = 142'd35184372088832;
parameter    ap_ST_fsm_state47 = 142'd70368744177664;
parameter    ap_ST_fsm_state48 = 142'd140737488355328;
parameter    ap_ST_fsm_state49 = 142'd281474976710656;
parameter    ap_ST_fsm_state50 = 142'd562949953421312;
parameter    ap_ST_fsm_state51 = 142'd1125899906842624;
parameter    ap_ST_fsm_state52 = 142'd2251799813685248;
parameter    ap_ST_fsm_state53 = 142'd4503599627370496;
parameter    ap_ST_fsm_state54 = 142'd9007199254740992;
parameter    ap_ST_fsm_state55 = 142'd18014398509481984;
parameter    ap_ST_fsm_state56 = 142'd36028797018963968;
parameter    ap_ST_fsm_state57 = 142'd72057594037927936;
parameter    ap_ST_fsm_state58 = 142'd144115188075855872;
parameter    ap_ST_fsm_state59 = 142'd288230376151711744;
parameter    ap_ST_fsm_state60 = 142'd576460752303423488;
parameter    ap_ST_fsm_state61 = 142'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 142'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 142'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 142'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 142'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 142'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 142'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 142'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 142'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 142'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 142'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 142'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 142'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 142'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 142'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 142'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 142'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 142'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 142'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 142'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 142'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 142'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 142'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 142'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 142'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 142'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 142'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 142'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 142'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 142'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 142'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 142'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 142'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 142'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 142'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 142'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 142'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 142'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 142'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 142'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 142'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 142'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 142'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 142'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 142'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 142'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 142'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 142'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 142'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 142'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 142'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 142'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 142'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 142'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 142'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 142'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 142'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 142'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 142'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 142'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 142'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 142'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 142'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 142'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 142'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 142'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 142'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 142'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 142'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 142'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 142'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 142'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 142'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 142'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 142'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 142'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 142'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 142'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 142'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 142'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 142'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 142'd2787593149816327892691964784081045188247552;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [16:0] y_I_V_address0;
output   y_I_V_ce0;
output   y_I_V_we0;
output  [31:0] y_I_V_d0;
input  [31:0] y_I_V_q0;
output  [16:0] y_Q_V_address0;
output   y_Q_V_ce0;
output   y_Q_V_we0;
output  [31:0] y_Q_V_d0;
input  [31:0] y_Q_V_q0;
output  [10:0] y_demod_d_V_address0;
output   y_demod_d_V_ce0;
output   y_demod_d_V_we0;
output  [31:0] y_demod_d_V_d0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[16:0] y_I_V_address0;
reg y_I_V_ce0;
reg y_I_V_we0;
reg[31:0] y_I_V_d0;
reg[16:0] y_Q_V_address0;
reg y_Q_V_ce0;
reg y_Q_V_we0;
reg[31:0] y_Q_V_d0;
reg[10:0] y_demod_d_V_address0;
reg y_demod_d_V_ce0;
reg y_demod_d_V_we0;
reg[31:0] y_demod_d_V_d0;

(* fsm_encoding = "none" *) reg   [141:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] cos_table_address0;
reg    cos_table_ce0;
wire   [8:0] cos_table_q0;
wire   [6:0] sin_table_address0;
reg    sin_table_ce0;
wire   [8:0] sin_table_q0;
wire   [4:0] coef_V_address0;
reg    coef_V_ce0;
wire   [11:0] coef_V_q0;
reg  signed [31:0] reg_627;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state22;
reg  signed [31:0] reg_631;
wire   [16:0] m_2_fu_641_p2;
reg   [16:0] m_2_reg_1423;
wire    ap_CS_fsm_state2;
wire   [31:0] value_V_4_fu_687_p3;
reg   [31:0] value_V_4_reg_1428;
wire   [0:0] icmp_ln86_fu_635_p2;
wire   [15:0] select_ln850_fu_737_p3;
reg   [15:0] select_ln850_reg_1433;
wire   [5:0] idx_1_fu_745_p1;
reg   [5:0] idx_1_reg_1453;
reg   [16:0] y_I_V_addr_2_reg_1463;
reg   [16:0] y_Q_V_addr_2_reg_1468;
wire   [0:0] icmp_ln42_fu_755_p2;
reg   [0:0] icmp_ln42_reg_1473;
wire   [15:0] zext_ln59_fu_830_p1;
wire   [0:0] and_ln46_fu_773_p2;
wire   [0:0] grp_fu_584_p2;
wire   [0:0] grp_fu_610_p2;
wire   [15:0] zext_ln55_fu_834_p1;
wire   [15:0] zext_ln51_1_fu_846_p1;
wire    ap_CS_fsm_state4;
wire  signed [39:0] sext_ln1118_fu_869_p1;
reg  signed [39:0] sext_ln1118_reg_1506;
wire    ap_CS_fsm_state5;
wire  signed [39:0] sext_ln1118_1_fu_873_p1;
reg  signed [39:0] sext_ln1118_1_reg_1512;
wire   [15:0] zext_ln24_fu_947_p1;
wire   [0:0] and_ln11_fu_890_p2;
wire   [15:0] zext_ln20_fu_951_p1;
wire   [15:0] zext_ln16_1_fu_963_p1;
wire    ap_CS_fsm_state6;
wire   [8:0] p_Val2_25_fu_978_p3;
reg   [8:0] p_Val2_25_reg_1547;
wire    ap_CS_fsm_state7;
reg   [31:0] real_V_reg_1552;
wire    ap_CS_fsm_state8;
reg   [31:0] imag_V_reg_1558;
wire   [31:0] grp_fu_622_p2;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire   [4:0] j_fu_1061_p2;
reg   [4:0] j_reg_1583;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln155_fu_1067_p1;
reg   [63:0] zext_ln155_reg_1588;
wire   [0:0] icmp_ln153_fu_1055_p2;
reg   [16:0] y_I_V_addr_3_reg_1607;
wire    ap_CS_fsm_state15;
wire   [0:0] icmp_ln158_fu_1073_p2;
reg   [16:0] y_Q_V_addr_3_reg_1612;
wire   [4:0] i_fu_1096_p2;
reg   [4:0] i_reg_1641;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln165_fu_1102_p1;
reg   [63:0] zext_ln165_reg_1646;
wire   [0:0] icmp_ln164_fu_1090_p2;
wire   [0:0] icmp_ln165_fu_1107_p2;
reg   [0:0] icmp_ln165_reg_1652;
wire   [16:0] l_fu_1119_p2;
wire  signed [31:0] select_ln165_fu_1125_p3;
reg  signed [31:0] select_ln165_reg_1678;
wire    ap_CS_fsm_state18;
reg   [11:0] coef_V_load_reg_1683;
wire  signed [31:0] select_ln165_1_fu_1133_p3;
reg  signed [31:0] select_ln165_1_reg_1688;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln185_fu_1228_p2;
wire   [0:0] icmp_ln189_fu_1244_p2;
reg   [0:0] icmp_ln189_reg_1716;
wire   [0:0] icmp_ln195_fu_1278_p2;
reg   [0:0] icmp_ln195_reg_1720;
wire    ap_CS_fsm_state42;
wire   [63:0] r_V_10_fu_1302_p2;
reg   [63:0] r_V_10_reg_1724;
wire   [63:0] r_V_11_fu_1316_p2;
reg   [63:0] r_V_11_reg_1729;
wire   [64:0] ret_V_5_fu_1342_p2;
reg  signed [64:0] ret_V_5_reg_1734;
wire    ap_CS_fsm_state43;
wire   [16:0] n_fu_1399_p2;
wire    ap_CS_fsm_state142;
reg   [4:0] hwin_I_V_address0;
reg    hwin_I_V_ce0;
reg    hwin_I_V_we0;
reg   [31:0] hwin_I_V_d0;
wire   [31:0] hwin_I_V_q0;
reg   [4:0] hwin_Q_V_address0;
reg    hwin_Q_V_ce0;
reg    hwin_Q_V_we0;
reg   [31:0] hwin_Q_V_d0;
wire   [31:0] hwin_Q_V_q0;
reg   [31:0] p_Val2_s_reg_365;
wire    ap_CS_fsm_state12;
reg   [16:0] m_0_reg_376;
reg   [15:0] idx_3_i_reg_387;
reg   [0:0] sign_3_i_reg_404;
reg   [15:0] idx_3_i2_reg_426;
reg   [0:0] sign_3_i3_reg_443;
reg   [31:0] storemerge1771_reg_465;
wire    ap_CS_fsm_state9;
reg   [4:0] j_0_reg_477;
wire    ap_CS_fsm_state14;
reg   [16:0] l_0_reg_488;
reg   [31:0] p_Val2_5_reg_500;
reg   [31:0] p_Val2_8_reg_513;
reg   [4:0] i_0_reg_526;
reg   [16:0] n3_0_reg_537;
wire    ap_CS_fsm_state20;
wire   [63:0] zext_ln94_fu_749_p1;
wire  signed [63:0] sext_ln1265_fu_850_p1;
wire  signed [63:0] sext_ln1265_1_fu_967_p1;
wire   [63:0] zext_ln160_fu_1079_p1;
wire   [63:0] zext_ln165_1_fu_1113_p1;
wire   [63:0] zext_ln187_fu_1234_p1;
wire  signed [63:0] sext_ln198_fu_1378_p1;
reg   [31:0] m_fu_148;
wire  signed [31:0] m_1_fu_1372_p2;
reg   [31:0] p_Val2_6_fu_152;
reg   [31:0] p_Val2_7_fu_156;
wire   [31:0] grp_fu_616_p2;
wire   [9:0] grp_fu_554_p4;
wire   [8:0] grp_fu_569_p4;
wire   [0:0] grp_fu_563_p2;
wire   [0:0] grp_fu_578_p2;
wire   [8:0] grp_fu_590_p4;
wire   [0:0] grp_fu_599_p2;
wire   [0:0] grp_fu_605_p2;
wire   [39:0] lhs_V_fu_647_p3;
wire   [40:0] zext_ln728_fu_655_p1;
wire   [40:0] add_ln1192_fu_659_p2;
wire   [31:0] value_V_3_fu_665_p4;
wire   [0:0] icmp_ln1494_fu_675_p2;
wire   [31:0] value_V_fu_681_p2;
wire   [15:0] trunc_ln851_fu_713_p1;
wire   [15:0] ret_V_fu_695_p4;
wire   [0:0] icmp_ln851_fu_717_p2;
wire   [15:0] ret_V_1_fu_723_p2;
wire   [0:0] p_Result_s_fu_705_p3;
wire   [15:0] select_ln851_fu_729_p3;
wire   [0:0] tmp_fu_760_p3;
wire   [0:0] grp_fu_549_p2;
wire   [0:0] xor_ln46_fu_767_p2;
wire   [5:0] trunc_ln59_fu_786_p1;
wire   [5:0] sub_ln59_fu_789_p2;
wire   [6:0] tmp_7_fu_795_p3;
wire   [0:0] tmp_6_fu_779_p3;
wire   [6:0] sub_ln59_1_fu_803_p2;
wire   [6:0] tmp_3_fu_809_p3;
wire   [6:0] select_ln59_fu_816_p3;
wire   [6:0] idx_2_fu_824_p2;
wire   [6:0] zext_ln51_fu_837_p1;
wire   [6:0] idx_fu_840_p2;
wire   [8:0] sub_ln703_4_fu_855_p2;
wire   [8:0] p_Val2_10_fu_861_p3;
wire   [0:0] tmp_9_fu_877_p3;
wire   [0:0] xor_ln11_fu_884_p2;
wire   [5:0] trunc_ln24_fu_903_p1;
wire   [5:0] sub_ln24_fu_906_p2;
wire   [6:0] tmp_14_fu_912_p3;
wire   [0:0] tmp_13_fu_896_p3;
wire   [6:0] sub_ln24_1_fu_920_p2;
wire   [6:0] tmp_8_fu_926_p3;
wire   [6:0] select_ln24_fu_933_p3;
wire   [6:0] idx_4_fu_941_p2;
wire   [6:0] zext_ln16_fu_954_p1;
wire   [6:0] idx_3_fu_957_p2;
wire   [8:0] sub_ln703_7_fu_972_p2;
wire  signed [31:0] mul_ln700_fu_993_p0;
wire  signed [8:0] mul_ln700_fu_993_p1;
wire  signed [31:0] mul_ln1192_fu_997_p0;
wire  signed [39:0] sext_ln1118_4_fu_986_p1;
wire  signed [8:0] mul_ln1192_fu_997_p1;
wire  signed [39:0] sext_ln1118_5_fu_990_p1;
wire   [39:0] mul_ln700_fu_993_p2;
wire   [39:0] mul_ln1192_fu_997_p2;
wire   [39:0] ret_V_8_fu_1003_p2;
wire  signed [31:0] mul_ln700_1_fu_1019_p0;
wire  signed [8:0] mul_ln700_1_fu_1019_p1;
wire  signed [31:0] mul_ln1193_fu_1024_p0;
wire  signed [8:0] mul_ln1193_fu_1024_p1;
wire   [39:0] mul_ln700_1_fu_1019_p2;
wire   [39:0] mul_ln1193_fu_1024_p2;
wire   [39:0] ret_V_9_fu_1029_p2;
wire   [31:0] select_ln165_fu_1125_p2;
wire   [31:0] select_ln165_1_fu_1133_p2;
wire   [11:0] r_V_8_fu_1147_p0;
wire   [43:0] zext_ln1118_fu_1144_p1;
wire  signed [31:0] r_V_8_fu_1147_p1;
wire   [43:0] r_V_8_fu_1147_p2;
wire  signed [47:0] sext_ln1192_fu_1161_p1;
wire   [47:0] lhs_V_1_fu_1153_p3;
wire   [47:0] ret_V_10_fu_1165_p2;
wire   [11:0] r_V_9_fu_1184_p0;
wire  signed [31:0] r_V_9_fu_1184_p1;
wire   [43:0] r_V_9_fu_1184_p2;
wire  signed [47:0] sext_ln1192_1_fu_1198_p1;
wire   [47:0] lhs_V_2_fu_1190_p3;
wire   [47:0] ret_V_11_fu_1202_p2;
wire   [2:0] trunc_ln185_fu_1240_p1;
wire   [7:0] grp_fu_1250_p1;
wire   [6:0] grp_fu_1250_p2;
wire   [6:0] trunc_ln195_fu_1274_p1;
wire   [31:0] dqq_V_fu_1268_p2;
wire  signed [31:0] r_V_10_fu_1302_p0;
wire  signed [63:0] r_V_fu_1294_p1;
wire  signed [31:0] r_V_10_fu_1302_p1;
wire   [31:0] dii_V_fu_1262_p2;
wire  signed [31:0] r_V_11_fu_1316_p0;
wire  signed [31:0] r_V_11_fu_1316_p1;
wire  signed [63:0] r_V_4_fu_1308_p1;
wire  signed [31:0] r_V_12_fu_1322_p0;
wire  signed [31:0] r_V_12_fu_1322_p1;
wire  signed [31:0] r_V_13_fu_1328_p0;
wire  signed [31:0] r_V_13_fu_1328_p1;
wire   [63:0] r_V_12_fu_1322_p2;
wire   [63:0] r_V_13_fu_1328_p2;
wire  signed [64:0] lhs_V_3_fu_1334_p1;
wire  signed [64:0] rhs_V_fu_1338_p1;
wire   [63:0] ret_V_12_fu_1348_p2;
wire   [95:0] grp_fu_1363_p0;
wire   [95:0] grp_fu_1363_p2;
wire   [0:0] icmp_ln98_fu_1045_p2;
wire   [0:0] icmp_ln103_fu_1050_p2;
reg    grp_fu_1250_ap_start;
wire    grp_fu_1250_ap_done;
reg    grp_fu_1363_ap_start;
wire    grp_fu_1363_ap_done;
reg   [141:0] ap_NS_fsm;
reg    ap_condition_312;
reg    ap_condition_308;
reg    ap_condition_304;
reg    ap_condition_279;
reg    ap_condition_274;
reg    ap_condition_268;

// power-on initialization
initial begin
#0 ap_CS_fsm = 142'd1;
end

demodulationFM_cobkb #(
    .DataWidth( 9 ),
    .AddressRange( 65 ),
    .AddressWidth( 7 ))
cos_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cos_table_address0),
    .ce0(cos_table_ce0),
    .q0(cos_table_q0)
);

demodulationFM_sicud #(
    .DataWidth( 9 ),
    .AddressRange( 65 ),
    .AddressWidth( 7 ))
sin_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sin_table_address0),
    .ce0(sin_table_ce0),
    .q0(sin_table_q0)
);

demodulationFM_codEe #(
    .DataWidth( 12 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
coef_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(coef_V_address0),
    .ce0(coef_V_ce0),
    .q0(coef_V_q0)
);

demodulationFM_hweOg #(
    .DataWidth( 32 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
hwin_I_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(hwin_I_V_address0),
    .ce0(hwin_I_V_ce0),
    .we0(hwin_I_V_we0),
    .d0(hwin_I_V_d0),
    .q0(hwin_I_V_q0)
);

demodulationFM_hweOg #(
    .DataWidth( 32 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
hwin_Q_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(hwin_Q_V_address0),
    .ce0(hwin_Q_V_ce0),
    .we0(hwin_Q_V_we0),
    .d0(hwin_Q_V_d0),
    .q0(hwin_Q_V_q0)
);

demodulationFM_urg8j #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 7 ))
demodulationFM_urg8j_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1250_ap_start),
    .done(grp_fu_1250_ap_done),
    .din0(n3_0_reg_537),
    .din1(grp_fu_1250_p1),
    .ce(1'b1),
    .dout(grp_fu_1250_p2)
);

demodulationFM_sdhbi #(
    .ID( 1 ),
    .NUM_STAGE( 100 ),
    .din0_WIDTH( 96 ),
    .din1_WIDTH( 65 ),
    .dout_WIDTH( 96 ))
demodulationFM_sdhbi_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1363_ap_start),
    .done(grp_fu_1363_ap_done),
    .din0(grp_fu_1363_p0),
    .din1(ret_V_5_reg_1734),
    .ce(1'b1),
    .dout(grp_fu_1363_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i_0_reg_526 <= i_reg_1641;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i_0_reg_526 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (((1'd1 == and_ln11_fu_890_p2) & (icmp_ln42_reg_1473 == 1'd0))) begin
            idx_3_i2_reg_426 <= select_ln850_reg_1433;
        end else if ((icmp_ln42_reg_1473 == 1'd1)) begin
            idx_3_i2_reg_426 <= 16'd0;
        end else if ((1'b1 == ap_condition_304)) begin
            idx_3_i2_reg_426 <= zext_ln24_fu_947_p1;
        end else if ((1'b1 == ap_condition_308)) begin
            idx_3_i2_reg_426 <= zext_ln20_fu_951_p1;
        end else if ((1'b1 == ap_condition_312)) begin
            idx_3_i2_reg_426 <= zext_ln16_1_fu_963_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if (((1'd1 == and_ln46_fu_773_p2) & (icmp_ln42_fu_755_p2 == 1'd0))) begin
            idx_3_i_reg_387 <= select_ln850_reg_1433;
        end else if ((icmp_ln42_fu_755_p2 == 1'd1)) begin
            idx_3_i_reg_387 <= 16'd0;
        end else if ((1'b1 == ap_condition_268)) begin
            idx_3_i_reg_387 <= zext_ln59_fu_830_p1;
        end else if ((1'b1 == ap_condition_274)) begin
            idx_3_i_reg_387 <= zext_ln55_fu_834_p1;
        end else if ((1'b1 == ap_condition_279)) begin
            idx_3_i_reg_387 <= zext_ln51_1_fu_846_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_635_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_477 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        j_0_reg_477 <= j_reg_1583;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln153_fu_1055_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        l_0_reg_488 <= 17'd31;
    end else if (((icmp_ln164_fu_1090_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        l_0_reg_488 <= l_fu_1119_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        m_0_reg_376 <= m_2_reg_1423;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_0_reg_376 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln195_reg_1720 == 1'd1) & (icmp_ln189_reg_1716 == 1'd1) & (1'b1 == ap_CS_fsm_state142))) begin
        m_fu_148 <= m_1_fu_1372_p2;
    end else if (((icmp_ln158_fu_1073_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        m_fu_148 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        n3_0_reg_537 <= n_fu_1399_p2;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        n3_0_reg_537 <= 17'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        p_Val2_5_reg_500 <= {{ret_V_10_fu_1165_p2[47:16]}};
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        p_Val2_5_reg_500 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        p_Val2_6_fu_152 <= reg_631;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        p_Val2_6_fu_152 <= y_Q_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        p_Val2_7_fu_156 <= reg_627;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        p_Val2_7_fu_156 <= y_I_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        p_Val2_8_reg_513 <= {{ret_V_11_fu_1202_p2[47:16]}};
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        p_Val2_8_reg_513 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_Val2_s_reg_365 <= value_V_4_reg_1428;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_Val2_s_reg_365 <= 32'd4293772758;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_fu_610_p2 == 1'd1) & (1'd0 == and_ln11_fu_890_p2) & (grp_fu_584_p2 == 1'd0) & (icmp_ln42_reg_1473 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((1'd0 == and_ln11_fu_890_p2) & (grp_fu_610_p2 == 1'd0) & (grp_fu_584_p2 == 1'd0) & (icmp_ln42_reg_1473 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        sign_3_i3_reg_443 <= 1'd1;
    end else if ((((icmp_ln42_reg_1473 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((1'd1 == and_ln11_fu_890_p2) & (icmp_ln42_reg_1473 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((grp_fu_584_p2 == 1'd1) & (1'd0 == and_ln11_fu_890_p2) & (icmp_ln42_reg_1473 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        sign_3_i3_reg_443 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln42_fu_755_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((1'd1 == and_ln46_fu_773_p2) & (icmp_ln42_fu_755_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((grp_fu_610_p2 == 1'd0) & (grp_fu_584_p2 == 1'd0) & (1'd0 == and_ln46_fu_773_p2) & (icmp_ln42_fu_755_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        sign_3_i_reg_404 <= 1'd0;
    end else if ((((grp_fu_584_p2 == 1'd1) & (1'd0 == and_ln46_fu_773_p2) & (icmp_ln42_fu_755_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((grp_fu_610_p2 == 1'd1) & (grp_fu_584_p2 == 1'd0) & (1'd0 == and_ln46_fu_773_p2) & (icmp_ln42_fu_755_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        sign_3_i_reg_404 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        storemerge1771_reg_465 <= imag_V_reg_1558;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        storemerge1771_reg_465 <= grp_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        coef_V_load_reg_1683 <= coef_V_q0;
        select_ln165_1_reg_1688 <= select_ln165_1_fu_1133_p3;
        select_ln165_reg_1678 <= select_ln165_fu_1125_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_reg_1641 <= i_fu_1096_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_fu_1090_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        icmp_ln165_reg_1652 <= icmp_ln165_fu_1107_p2;
        zext_ln165_reg_1646[4 : 0] <= zext_ln165_fu_1102_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        icmp_ln189_reg_1716 <= icmp_ln189_fu_1244_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        icmp_ln195_reg_1720 <= icmp_ln195_fu_1278_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln42_reg_1473 <= icmp_ln42_fu_755_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_635_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        idx_1_reg_1453 <= idx_1_fu_745_p1;
        select_ln850_reg_1433 <= select_ln850_fu_737_p3;
        value_V_4_reg_1428 <= value_V_4_fu_687_p3;
        y_I_V_addr_2_reg_1463 <= zext_ln94_fu_749_p1;
        y_Q_V_addr_2_reg_1468 <= zext_ln94_fu_749_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        imag_V_reg_1558 <= {{ret_V_9_fu_1029_p2[39:8]}};
        real_V_reg_1552 <= {{ret_V_8_fu_1003_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_reg_1583 <= j_fu_1061_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m_2_reg_1423 <= m_2_fu_641_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_25_reg_1547 <= p_Val2_25_fu_978_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln195_fu_1278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        r_V_10_reg_1724 <= r_V_10_fu_1302_p2;
        r_V_11_reg_1729 <= r_V_11_fu_1316_p2;
        ret_V_5_reg_1734 <= ret_V_5_fu_1342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_627 <= y_I_V_q0;
        reg_631 <= y_Q_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sext_ln1118_1_reg_1512 <= sext_ln1118_1_fu_873_p1;
        sext_ln1118_reg_1506 <= sext_ln1118_fu_869_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln158_fu_1073_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        y_I_V_addr_3_reg_1607 <= zext_ln160_fu_1079_p1;
        y_Q_V_addr_3_reg_1612 <= zext_ln160_fu_1079_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln153_fu_1055_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        zext_ln155_reg_1588[4 : 0] <= zext_ln155_fu_1067_p1[4 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln185_fu_1228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln185_fu_1228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        coef_V_ce0 = 1'b1;
    end else begin
        coef_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cos_table_ce0 = 1'b1;
    end else begin
        cos_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln189_fu_1244_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_1250_ap_start = 1'b1;
    end else begin
        grp_fu_1250_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_1363_ap_start = 1'b1;
    end else begin
        grp_fu_1363_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        hwin_I_V_address0 = zext_ln165_reg_1646;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        hwin_I_V_address0 = zext_ln165_1_fu_1113_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        hwin_I_V_address0 = zext_ln155_reg_1588;
    end else begin
        hwin_I_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17))) begin
        hwin_I_V_ce0 = 1'b1;
    end else begin
        hwin_I_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        hwin_I_V_d0 = select_ln165_fu_1125_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        hwin_I_V_d0 = y_I_V_q0;
    end else begin
        hwin_I_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18))) begin
        hwin_I_V_we0 = 1'b1;
    end else begin
        hwin_I_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        hwin_Q_V_address0 = zext_ln165_reg_1646;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        hwin_Q_V_address0 = zext_ln165_1_fu_1113_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        hwin_Q_V_address0 = zext_ln155_reg_1588;
    end else begin
        hwin_Q_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17))) begin
        hwin_Q_V_ce0 = 1'b1;
    end else begin
        hwin_Q_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        hwin_Q_V_d0 = select_ln165_1_fu_1133_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        hwin_Q_V_d0 = y_Q_V_q0;
    end else begin
        hwin_Q_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18))) begin
        hwin_Q_V_we0 = 1'b1;
    end else begin
        hwin_Q_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sin_table_ce0 = 1'b1;
    end else begin
        sin_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        y_I_V_address0 = zext_ln187_fu_1234_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        y_I_V_address0 = y_I_V_addr_3_reg_1607;
    end else if (((icmp_ln158_fu_1073_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        y_I_V_address0 = 64'd0;
    end else if (((icmp_ln158_fu_1073_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        y_I_V_address0 = zext_ln160_fu_1079_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        y_I_V_address0 = zext_ln155_fu_1067_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        y_I_V_address0 = y_I_V_addr_2_reg_1463;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_I_V_address0 = zext_ln94_fu_749_p1;
    end else begin
        y_I_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln158_fu_1073_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15)) | ((icmp_ln158_fu_1073_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15)))) begin
        y_I_V_ce0 = 1'b1;
    end else begin
        y_I_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        y_I_V_d0 = p_Val2_5_reg_500;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        y_I_V_d0 = grp_fu_616_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        y_I_V_d0 = real_V_reg_1552;
    end else begin
        y_I_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((icmp_ln164_fu_1090_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17)))) begin
        y_I_V_we0 = 1'b1;
    end else begin
        y_I_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        y_Q_V_address0 = zext_ln187_fu_1234_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        y_Q_V_address0 = y_Q_V_addr_3_reg_1612;
    end else if (((icmp_ln158_fu_1073_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        y_Q_V_address0 = 64'd0;
    end else if (((icmp_ln158_fu_1073_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        y_Q_V_address0 = zext_ln160_fu_1079_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        y_Q_V_address0 = zext_ln155_fu_1067_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        y_Q_V_address0 = y_Q_V_addr_2_reg_1468;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_Q_V_address0 = zext_ln94_fu_749_p1;
    end else begin
        y_Q_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln158_fu_1073_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15)) | ((icmp_ln158_fu_1073_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15)))) begin
        y_Q_V_ce0 = 1'b1;
    end else begin
        y_Q_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        y_Q_V_d0 = p_Val2_8_reg_513;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        y_Q_V_d0 = storemerge1771_reg_465;
    end else begin
        y_Q_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((icmp_ln164_fu_1090_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17)))) begin
        y_Q_V_we0 = 1'b1;
    end else begin
        y_Q_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        y_demod_d_V_address0 = sext_ln198_fu_1378_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        y_demod_d_V_address0 = 64'd0;
    end else begin
        y_demod_d_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state15))) begin
        y_demod_d_V_ce0 = 1'b1;
    end else begin
        y_demod_d_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        y_demod_d_V_d0 = {{grp_fu_1363_p2[47:16]}};
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        y_demod_d_V_d0 = 32'd0;
    end else begin
        y_demod_d_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln195_reg_1720 == 1'd1) & (icmp_ln189_reg_1716 == 1'd1) & (1'b1 == ap_CS_fsm_state142)) | ((icmp_ln158_fu_1073_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15)))) begin
        y_demod_d_V_we0 = 1'b1;
    end else begin
        y_demod_d_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln86_fu_635_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln103_fu_1050_p2 == 1'd1) & (icmp_ln98_fu_1045_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((icmp_ln103_fu_1050_p2 == 1'd0) & (icmp_ln98_fu_1045_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln153_fu_1055_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln158_fu_1073_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((icmp_ln164_fu_1090_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln185_fu_1228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln189_fu_1244_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state142;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((icmp_ln195_fu_1278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state142;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_fu_659_p2 = (41'd305801472 + zext_ln728_fu_655_p1);

assign and_ln11_fu_890_p2 = (xor_ln11_fu_884_p2 & grp_fu_549_p2);

assign and_ln46_fu_773_p2 = (xor_ln46_fu_767_p2 & grp_fu_549_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_condition_268 = ((grp_fu_610_p2 == 1'd0) & (grp_fu_584_p2 == 1'd0) & (1'd0 == and_ln46_fu_773_p2) & (icmp_ln42_fu_755_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_274 = ((grp_fu_610_p2 == 1'd1) & (grp_fu_584_p2 == 1'd0) & (1'd0 == and_ln46_fu_773_p2) & (icmp_ln42_fu_755_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_279 = ((grp_fu_584_p2 == 1'd1) & (1'd0 == and_ln46_fu_773_p2) & (icmp_ln42_fu_755_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_304 = ((1'd0 == and_ln11_fu_890_p2) & (grp_fu_610_p2 == 1'd0) & (grp_fu_584_p2 == 1'd0) & (icmp_ln42_reg_1473 == 1'd0));
end

always @ (*) begin
    ap_condition_308 = ((grp_fu_610_p2 == 1'd1) & (1'd0 == and_ln11_fu_890_p2) & (grp_fu_584_p2 == 1'd0) & (icmp_ln42_reg_1473 == 1'd0));
end

always @ (*) begin
    ap_condition_312 = ((grp_fu_584_p2 == 1'd1) & (1'd0 == and_ln11_fu_890_p2) & (icmp_ln42_reg_1473 == 1'd0));
end

assign ap_return = 32'd0;

assign coef_V_address0 = zext_ln165_fu_1102_p1;

assign cos_table_address0 = sext_ln1265_fu_850_p1;

assign dii_V_fu_1262_p2 = ($signed(reg_627) - $signed(p_Val2_7_fu_156));

assign dqq_V_fu_1268_p2 = ($signed(reg_631) - $signed(p_Val2_6_fu_152));

assign grp_fu_1250_p1 = 17'd80;

assign grp_fu_1363_p0 = {{ret_V_12_fu_1348_p2}, {32'd0}};

assign grp_fu_549_p2 = (($signed(select_ln850_reg_1433) < $signed(16'd65)) ? 1'b1 : 1'b0);

assign grp_fu_554_p4 = {{select_ln850_reg_1433[15:6]}};

assign grp_fu_563_p2 = (($signed(grp_fu_554_p4) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign grp_fu_569_p4 = {{select_ln850_reg_1433[15:7]}};

assign grp_fu_578_p2 = (($signed(grp_fu_569_p4) < $signed(9'd1)) ? 1'b1 : 1'b0);

assign grp_fu_584_p2 = (grp_fu_578_p2 & grp_fu_563_p2);

assign grp_fu_590_p4 = {{select_ln850_reg_1433[15:7]}};

assign grp_fu_599_p2 = (($signed(grp_fu_590_p4) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign grp_fu_605_p2 = (($signed(select_ln850_reg_1433) < $signed(16'd192)) ? 1'b1 : 1'b0);

assign grp_fu_610_p2 = (grp_fu_605_p2 & grp_fu_599_p2);

assign grp_fu_616_p2 = (32'd0 - real_V_reg_1552);

assign grp_fu_622_p2 = (32'd0 - imag_V_reg_1558);

assign i_fu_1096_p2 = (i_0_reg_526 + 5'd1);

assign icmp_ln103_fu_1050_p2 = ((select_ln850_reg_1433 == 16'd64) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_675_p2 = (($signed(value_V_3_fu_665_p4) > $signed(32'd16777216)) ? 1'b1 : 1'b0);

assign icmp_ln153_fu_1055_p2 = ((j_0_reg_477 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln158_fu_1073_p2 = ((l_0_reg_488 == 17'd100000) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_1090_p2 = ((i_0_reg_526 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln165_fu_1107_p2 = ((i_0_reg_526 < 5'd30) ? 1'b1 : 1'b0);

assign icmp_ln185_fu_1228_p2 = ((n3_0_reg_537 == 17'd100000) ? 1'b1 : 1'b0);

assign icmp_ln189_fu_1244_p2 = ((trunc_ln185_fu_1240_p1 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln195_fu_1278_p2 = ((trunc_ln195_fu_1274_p1 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_755_p2 = ((select_ln850_reg_1433 == 16'd256) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_717_p2 = ((trunc_ln851_fu_713_p1 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_635_p2 = ((m_0_reg_376 == 17'd100000) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_1045_p2 = ((select_ln850_reg_1433 == 16'd0) ? 1'b1 : 1'b0);

assign idx_1_fu_745_p1 = select_ln850_fu_737_p3[5:0];

assign idx_2_fu_824_p2 = ($signed(7'd64) - $signed(select_ln59_fu_816_p3));

assign idx_3_fu_957_p2 = ($signed(7'd64) - $signed(zext_ln16_fu_954_p1));

assign idx_4_fu_941_p2 = ($signed(7'd64) - $signed(select_ln24_fu_933_p3));

assign idx_fu_840_p2 = ($signed(7'd64) - $signed(zext_ln51_fu_837_p1));

assign j_fu_1061_p2 = (j_0_reg_477 + 5'd1);

assign l_fu_1119_p2 = (l_0_reg_488 + 17'd1);

assign lhs_V_1_fu_1153_p3 = {{p_Val2_5_reg_500}, {16'd0}};

assign lhs_V_2_fu_1190_p3 = {{p_Val2_8_reg_513}, {16'd0}};

assign lhs_V_3_fu_1334_p1 = $signed(r_V_12_fu_1322_p2);

assign lhs_V_fu_647_p3 = {{p_Val2_s_reg_365}, {8'd0}};

assign m_1_fu_1372_p2 = (m_fu_148 + 32'd1);

assign m_2_fu_641_p2 = (m_0_reg_376 + 17'd1);

assign mul_ln1192_fu_997_p0 = sext_ln1118_4_fu_986_p1;

assign mul_ln1192_fu_997_p1 = sext_ln1118_5_fu_990_p1;

assign mul_ln1192_fu_997_p2 = ($signed(mul_ln1192_fu_997_p0) * $signed(mul_ln1192_fu_997_p1));

assign mul_ln1193_fu_1024_p0 = sext_ln1118_reg_1506;

assign mul_ln1193_fu_1024_p1 = sext_ln1118_5_fu_990_p1;

assign mul_ln1193_fu_1024_p2 = ($signed(mul_ln1193_fu_1024_p0) * $signed(mul_ln1193_fu_1024_p1));

assign mul_ln700_1_fu_1019_p0 = sext_ln1118_4_fu_986_p1;

assign mul_ln700_1_fu_1019_p1 = sext_ln1118_1_reg_1512;

assign mul_ln700_1_fu_1019_p2 = ($signed(mul_ln700_1_fu_1019_p0) * $signed(mul_ln700_1_fu_1019_p1));

assign mul_ln700_fu_993_p0 = sext_ln1118_reg_1506;

assign mul_ln700_fu_993_p1 = sext_ln1118_1_reg_1512;

assign mul_ln700_fu_993_p2 = ($signed(mul_ln700_fu_993_p0) * $signed(mul_ln700_fu_993_p1));

assign n_fu_1399_p2 = (n3_0_reg_537 + 17'd1);

assign p_Result_s_fu_705_p3 = value_V_4_fu_687_p3[32'd31];

assign p_Val2_10_fu_861_p3 = ((sign_3_i_reg_404[0:0] === 1'b1) ? sub_ln703_4_fu_855_p2 : cos_table_q0);

assign p_Val2_25_fu_978_p3 = ((sign_3_i3_reg_443[0:0] === 1'b1) ? sub_ln703_7_fu_972_p2 : sin_table_q0);

assign r_V_10_fu_1302_p0 = r_V_fu_1294_p1;

assign r_V_10_fu_1302_p1 = dqq_V_fu_1268_p2;

assign r_V_10_fu_1302_p2 = ($signed(r_V_10_fu_1302_p0) * $signed(r_V_10_fu_1302_p1));

assign r_V_11_fu_1316_p0 = dii_V_fu_1262_p2;

assign r_V_11_fu_1316_p1 = r_V_4_fu_1308_p1;

assign r_V_11_fu_1316_p2 = ($signed(r_V_11_fu_1316_p0) * $signed(r_V_11_fu_1316_p1));

assign r_V_12_fu_1322_p0 = r_V_fu_1294_p1;

assign r_V_12_fu_1322_p1 = r_V_fu_1294_p1;

assign r_V_12_fu_1322_p2 = ($signed(r_V_12_fu_1322_p0) * $signed(r_V_12_fu_1322_p1));

assign r_V_13_fu_1328_p0 = r_V_4_fu_1308_p1;

assign r_V_13_fu_1328_p1 = r_V_4_fu_1308_p1;

assign r_V_13_fu_1328_p2 = ($signed(r_V_13_fu_1328_p0) * $signed(r_V_13_fu_1328_p1));

assign r_V_4_fu_1308_p1 = reg_631;

assign r_V_8_fu_1147_p0 = zext_ln1118_fu_1144_p1;

assign r_V_8_fu_1147_p1 = select_ln165_reg_1678;

assign r_V_8_fu_1147_p2 = ($signed({{1'b0}, {r_V_8_fu_1147_p0}}) * $signed(r_V_8_fu_1147_p1));

assign r_V_9_fu_1184_p0 = zext_ln1118_fu_1144_p1;

assign r_V_9_fu_1184_p1 = select_ln165_1_reg_1688;

assign r_V_9_fu_1184_p2 = ($signed({{1'b0}, {r_V_9_fu_1184_p0}}) * $signed(r_V_9_fu_1184_p1));

assign r_V_fu_1294_p1 = reg_627;

assign ret_V_10_fu_1165_p2 = ($signed(sext_ln1192_fu_1161_p1) + $signed(lhs_V_1_fu_1153_p3));

assign ret_V_11_fu_1202_p2 = ($signed(sext_ln1192_1_fu_1198_p1) + $signed(lhs_V_2_fu_1190_p3));

assign ret_V_12_fu_1348_p2 = (r_V_10_reg_1724 - r_V_11_reg_1729);

assign ret_V_1_fu_723_p2 = (16'd1 + ret_V_fu_695_p4);

assign ret_V_5_fu_1342_p2 = ($signed(lhs_V_3_fu_1334_p1) + $signed(rhs_V_fu_1338_p1));

assign ret_V_8_fu_1003_p2 = (mul_ln700_fu_993_p2 + mul_ln1192_fu_997_p2);

assign ret_V_9_fu_1029_p2 = (mul_ln700_1_fu_1019_p2 - mul_ln1193_fu_1024_p2);

assign ret_V_fu_695_p4 = {{value_V_4_fu_687_p3[31:16]}};

assign rhs_V_fu_1338_p1 = $signed(r_V_13_fu_1328_p2);

assign select_ln165_1_fu_1133_p2 = reg_631;

assign select_ln165_1_fu_1133_p3 = ((icmp_ln165_reg_1652[0:0] === 1'b1) ? hwin_Q_V_q0 : select_ln165_1_fu_1133_p2);

assign select_ln165_fu_1125_p2 = reg_627;

assign select_ln165_fu_1125_p3 = ((icmp_ln165_reg_1652[0:0] === 1'b1) ? hwin_I_V_q0 : select_ln165_fu_1125_p2);

assign select_ln24_fu_933_p3 = ((tmp_13_fu_896_p3[0:0] === 1'b1) ? sub_ln24_1_fu_920_p2 : tmp_8_fu_926_p3);

assign select_ln59_fu_816_p3 = ((tmp_6_fu_779_p3[0:0] === 1'b1) ? sub_ln59_1_fu_803_p2 : tmp_3_fu_809_p3);

assign select_ln850_fu_737_p3 = ((p_Result_s_fu_705_p3[0:0] === 1'b1) ? select_ln851_fu_729_p3 : ret_V_fu_695_p4);

assign select_ln851_fu_729_p3 = ((icmp_ln851_fu_717_p2[0:0] === 1'b1) ? ret_V_fu_695_p4 : ret_V_1_fu_723_p2);

assign sext_ln1118_1_fu_873_p1 = $signed(p_Val2_10_fu_861_p3);

assign sext_ln1118_4_fu_986_p1 = reg_631;

assign sext_ln1118_5_fu_990_p1 = $signed(p_Val2_25_reg_1547);

assign sext_ln1118_fu_869_p1 = reg_627;

assign sext_ln1192_1_fu_1198_p1 = $signed(r_V_9_fu_1184_p2);

assign sext_ln1192_fu_1161_p1 = $signed(r_V_8_fu_1147_p2);

assign sext_ln1265_1_fu_967_p1 = $signed(idx_3_i2_reg_426);

assign sext_ln1265_fu_850_p1 = $signed(idx_3_i_reg_387);

assign sext_ln198_fu_1378_p1 = m_1_fu_1372_p2;

assign sin_table_address0 = sext_ln1265_1_fu_967_p1;

assign sub_ln24_1_fu_920_p2 = (7'd0 - tmp_14_fu_912_p3);

assign sub_ln24_fu_906_p2 = (6'd0 - trunc_ln24_fu_903_p1);

assign sub_ln59_1_fu_803_p2 = (7'd0 - tmp_7_fu_795_p3);

assign sub_ln59_fu_789_p2 = (6'd0 - trunc_ln59_fu_786_p1);

assign sub_ln703_4_fu_855_p2 = (9'd0 - cos_table_q0);

assign sub_ln703_7_fu_972_p2 = (9'd0 - sin_table_q0);

assign tmp_13_fu_896_p3 = select_ln850_reg_1433[32'd15];

assign tmp_14_fu_912_p3 = {{1'd0}, {sub_ln24_fu_906_p2}};

assign tmp_3_fu_809_p3 = {{1'd0}, {idx_1_reg_1453}};

assign tmp_6_fu_779_p3 = select_ln850_reg_1433[32'd15];

assign tmp_7_fu_795_p3 = {{1'd0}, {sub_ln59_fu_789_p2}};

assign tmp_8_fu_926_p3 = {{1'd0}, {idx_1_reg_1453}};

assign tmp_9_fu_877_p3 = select_ln850_reg_1433[32'd15];

assign tmp_fu_760_p3 = select_ln850_reg_1433[32'd15];

assign trunc_ln185_fu_1240_p1 = n3_0_reg_537[2:0];

assign trunc_ln195_fu_1274_p1 = grp_fu_1250_p2[6:0];

assign trunc_ln24_fu_903_p1 = select_ln850_reg_1433[5:0];

assign trunc_ln59_fu_786_p1 = select_ln850_reg_1433[5:0];

assign trunc_ln851_fu_713_p1 = value_V_4_fu_687_p3[15:0];

assign value_V_3_fu_665_p4 = {{add_ln1192_fu_659_p2[39:8]}};

assign value_V_4_fu_687_p3 = ((icmp_ln1494_fu_675_p2[0:0] === 1'b1) ? value_V_fu_681_p2 : value_V_3_fu_665_p4);

assign value_V_fu_681_p2 = ($signed(32'd4278190080) + $signed(value_V_3_fu_665_p4));

assign xor_ln11_fu_884_p2 = (tmp_9_fu_877_p3 ^ 1'd1);

assign xor_ln46_fu_767_p2 = (tmp_fu_760_p3 ^ 1'd1);

assign zext_ln1118_fu_1144_p1 = coef_V_load_reg_1683;

assign zext_ln155_fu_1067_p1 = j_0_reg_477;

assign zext_ln160_fu_1079_p1 = l_0_reg_488;

assign zext_ln165_1_fu_1113_p1 = i_fu_1096_p2;

assign zext_ln165_fu_1102_p1 = i_0_reg_526;

assign zext_ln16_1_fu_963_p1 = idx_3_fu_957_p2;

assign zext_ln16_fu_954_p1 = idx_1_reg_1453;

assign zext_ln187_fu_1234_p1 = n3_0_reg_537;

assign zext_ln20_fu_951_p1 = idx_1_reg_1453;

assign zext_ln24_fu_947_p1 = idx_4_fu_941_p2;

assign zext_ln51_1_fu_846_p1 = idx_fu_840_p2;

assign zext_ln51_fu_837_p1 = idx_1_reg_1453;

assign zext_ln55_fu_834_p1 = idx_1_reg_1453;

assign zext_ln59_fu_830_p1 = idx_2_fu_824_p2;

assign zext_ln728_fu_655_p1 = lhs_V_fu_647_p3;

assign zext_ln94_fu_749_p1 = m_0_reg_376;

always @ (posedge ap_clk) begin
    zext_ln155_reg_1588[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln165_reg_1646[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //demodulationFM
