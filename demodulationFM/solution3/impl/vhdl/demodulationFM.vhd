-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity demodulationFM is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_I_V_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    y_I_V_ce0 : OUT STD_LOGIC;
    y_I_V_we0 : OUT STD_LOGIC;
    y_I_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_I_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_Q_V_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    y_Q_V_ce0 : OUT STD_LOGIC;
    y_Q_V_we0 : OUT STD_LOGIC;
    y_Q_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_Q_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_demod_d_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    y_demod_d_V_ce0 : OUT STD_LOGIC;
    y_demod_d_V_we0 : OUT STD_LOGIC;
    y_demod_d_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of demodulationFM is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "demodulationFM,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.566000,HLS_SYN_LAT=15397042,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=28,HLS_SYN_FF=2261,HLS_SYN_LUT=3269,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (141 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (141 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (141 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (141 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (141 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (141 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (141 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (141 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (141 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (141 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (141 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_8D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001101";
    constant ap_const_lv32_FFEDC5D6 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111011011100010111010110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv17_1F : STD_LOGIC_VECTOR (16 downto 0) := "00000000000011111";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_41 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv16_C0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011000000";
    constant ap_const_lv17_186A0 : STD_LOGIC_VECTOR (16 downto 0) := "11000011010100000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv41_123A2900 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000010010001110100010100100000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_1000000 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_const_lv32_FF000000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv16_40 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv17_50 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001010000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (141 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cos_table_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cos_table_ce0 : STD_LOGIC;
    signal cos_table_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sin_table_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sin_table_ce0 : STD_LOGIC;
    signal sin_table_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal coef_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal coef_V_ce0 : STD_LOGIC;
    signal coef_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_2_fu_641_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal m_2_reg_1423 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal value_V_4_fu_687_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_V_4_reg_1428 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln86_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln850_fu_737_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln850_reg_1433 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx_1_fu_745_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal idx_1_reg_1453 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_I_V_addr_2_reg_1463 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_Q_V_addr_2_reg_1468 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln42_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1473 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln59_fu_830_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln46_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln55_fu_834_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_1_fu_846_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sext_ln1118_fu_869_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1118_reg_1506 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln1118_1_fu_873_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1118_1_reg_1512 : STD_LOGIC_VECTOR (39 downto 0);
    signal zext_ln24_fu_947_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln11_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln20_fu_951_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_1_fu_963_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_Val2_25_fu_978_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_25_reg_1547 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal real_V_reg_1552 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal imag_V_reg_1558 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal j_fu_1061_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_1583 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln155_fu_1067_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln155_reg_1588 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln153_fu_1055_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_I_V_addr_3_reg_1607 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln158_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_Q_V_addr_3_reg_1612 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_fu_1096_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1641 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln165_fu_1102_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln165_reg_1646 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln164_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_fu_1107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1652 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_fu_1119_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln165_fu_1125_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln165_reg_1678 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal coef_V_load_reg_1683 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln165_1_fu_1133_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln165_1_reg_1688 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln185_fu_1228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_fu_1244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_reg_1716 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_fu_1278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_reg_1720 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal r_V_10_fu_1302_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_10_reg_1724 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_11_fu_1316_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_11_reg_1729 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_5_fu_1342_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal ret_V_5_reg_1734 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal n_fu_1399_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state142 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state142 : signal is "none";
    signal hwin_I_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal hwin_I_V_ce0 : STD_LOGIC;
    signal hwin_I_V_we0 : STD_LOGIC;
    signal hwin_I_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_I_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_Q_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal hwin_Q_V_ce0 : STD_LOGIC;
    signal hwin_Q_V_we0 : STD_LOGIC;
    signal hwin_Q_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_Q_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_365 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal m_0_reg_376 : STD_LOGIC_VECTOR (16 downto 0);
    signal idx_3_i_reg_387 : STD_LOGIC_VECTOR (15 downto 0);
    signal sign_3_i_reg_404 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_3_i2_reg_426 : STD_LOGIC_VECTOR (15 downto 0);
    signal sign_3_i3_reg_443 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge1771_reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal j_0_reg_477 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal l_0_reg_488 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_5_reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_8_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_526 : STD_LOGIC_VECTOR (4 downto 0);
    signal n3_0_reg_537 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln94_fu_749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1265_fu_850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1265_1_fu_967_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln160_fu_1079_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln165_1_fu_1113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln187_fu_1234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln198_fu_1378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_1_fu_1372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_554_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_569_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_590_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_fu_647_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal zext_ln728_fu_655_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_fu_659_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal value_V_3_fu_665_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal value_V_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln851_fu_713_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_fu_695_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln851_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_723_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_705_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln851_fu_729_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_760_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln46_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln59_fu_786_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln59_fu_789_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_795_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_779_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln59_1_fu_803_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_809_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln59_fu_816_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal idx_2_fu_824_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln51_fu_837_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal idx_fu_840_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln703_4_fu_855_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_10_fu_861_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_877_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln11_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln24_fu_903_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln24_fu_906_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_912_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_896_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln24_1_fu_920_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_926_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_fu_933_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal idx_4_fu_941_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln16_fu_954_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal idx_3_fu_957_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln703_7_fu_972_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln700_fu_993_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_fu_993_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_fu_997_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1118_4_fu_986_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_fu_997_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_5_fu_990_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln700_fu_993_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_fu_997_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_8_fu_1003_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln700_1_fu_1019_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_1_fu_1019_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1193_fu_1024_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1193_fu_1024_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln700_1_fu_1019_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1193_fu_1024_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_9_fu_1029_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln165_fu_1125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln165_1_fu_1133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_8_fu_1147_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1118_fu_1144_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal r_V_8_fu_1147_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_8_fu_1147_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal sext_ln1192_fu_1161_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal lhs_V_1_fu_1153_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_10_fu_1165_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_9_fu_1184_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_9_fu_1184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_9_fu_1184_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal sext_ln1192_1_fu_1198_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal lhs_V_2_fu_1190_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_11_fu_1202_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln185_fu_1240_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1250_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1250_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln195_fu_1274_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal dqq_V_fu_1268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_10_fu_1302_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_1294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_10_fu_1302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dii_V_fu_1262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_11_fu_1316_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_11_fu_1316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_4_fu_1308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_12_fu_1322_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_12_fu_1322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_13_fu_1328_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_13_fu_1328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_12_fu_1322_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_13_fu_1328_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_V_3_fu_1334_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal rhs_V_fu_1338_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal ret_V_12_fu_1348_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1363_p0 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_1363_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal icmp_ln98_fu_1045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_fu_1050_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1250_ap_start : STD_LOGIC;
    signal grp_fu_1250_ap_done : STD_LOGIC;
    signal grp_fu_1363_ap_start : STD_LOGIC;
    signal grp_fu_1363_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (141 downto 0);
    signal ap_condition_312 : BOOLEAN;
    signal ap_condition_308 : BOOLEAN;
    signal ap_condition_304 : BOOLEAN;
    signal ap_condition_279 : BOOLEAN;
    signal ap_condition_274 : BOOLEAN;
    signal ap_condition_268 : BOOLEAN;

    component demodulationFM_urg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component demodulationFM_sdhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (95 downto 0);
        din1 : IN STD_LOGIC_VECTOR (64 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component demodulationFM_cobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component demodulationFM_sicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component demodulationFM_codEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component demodulationFM_hweOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    cos_table_U : component demodulationFM_cobkb
    generic map (
        DataWidth => 9,
        AddressRange => 65,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_table_address0,
        ce0 => cos_table_ce0,
        q0 => cos_table_q0);

    sin_table_U : component demodulationFM_sicud
    generic map (
        DataWidth => 9,
        AddressRange => 65,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sin_table_address0,
        ce0 => sin_table_ce0,
        q0 => sin_table_q0);

    coef_V_U : component demodulationFM_codEe
    generic map (
        DataWidth => 12,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => coef_V_address0,
        ce0 => coef_V_ce0,
        q0 => coef_V_q0);

    hwin_I_V_U : component demodulationFM_hweOg
    generic map (
        DataWidth => 32,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hwin_I_V_address0,
        ce0 => hwin_I_V_ce0,
        we0 => hwin_I_V_we0,
        d0 => hwin_I_V_d0,
        q0 => hwin_I_V_q0);

    hwin_Q_V_U : component demodulationFM_hweOg
    generic map (
        DataWidth => 32,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hwin_Q_V_address0,
        ce0 => hwin_Q_V_ce0,
        we0 => hwin_Q_V_we0,
        d0 => hwin_Q_V_d0,
        q0 => hwin_Q_V_q0);

    demodulationFM_urg8j_U1 : component demodulationFM_urg8j
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 17,
        din1_WIDTH => 8,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1250_ap_start,
        done => grp_fu_1250_ap_done,
        din0 => n3_0_reg_537,
        din1 => grp_fu_1250_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1250_p2);

    demodulationFM_sdhbi_U2 : component demodulationFM_sdhbi
    generic map (
        ID => 1,
        NUM_STAGE => 100,
        din0_WIDTH => 96,
        din1_WIDTH => 65,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1363_ap_start,
        done => grp_fu_1363_ap_done,
        din0 => grp_fu_1363_p0,
        din1 => ret_V_5_reg_1734,
        ce => ap_const_logic_1,
        dout => grp_fu_1363_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_526_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_0_reg_526 <= i_reg_1641;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_0_reg_526 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    idx_3_i2_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                if (((ap_const_lv1_1 = and_ln11_fu_890_p2) and (icmp_ln42_reg_1473 = ap_const_lv1_0))) then 
                    idx_3_i2_reg_426 <= select_ln850_reg_1433;
                elsif ((icmp_ln42_reg_1473 = ap_const_lv1_1)) then 
                    idx_3_i2_reg_426 <= ap_const_lv16_0;
                elsif ((ap_const_boolean_1 = ap_condition_304)) then 
                    idx_3_i2_reg_426 <= zext_ln24_fu_947_p1;
                elsif ((ap_const_boolean_1 = ap_condition_308)) then 
                    idx_3_i2_reg_426 <= zext_ln20_fu_951_p1;
                elsif ((ap_const_boolean_1 = ap_condition_312)) then 
                    idx_3_i2_reg_426 <= zext_ln16_1_fu_963_p1;
                end if;
            end if; 
        end if;
    end process;

    idx_3_i_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                if (((ap_const_lv1_1 = and_ln46_fu_773_p2) and (icmp_ln42_fu_755_p2 = ap_const_lv1_0))) then 
                    idx_3_i_reg_387 <= select_ln850_reg_1433;
                elsif ((icmp_ln42_fu_755_p2 = ap_const_lv1_1)) then 
                    idx_3_i_reg_387 <= ap_const_lv16_0;
                elsif ((ap_const_boolean_1 = ap_condition_268)) then 
                    idx_3_i_reg_387 <= zext_ln59_fu_830_p1;
                elsif ((ap_const_boolean_1 = ap_condition_274)) then 
                    idx_3_i_reg_387 <= zext_ln55_fu_834_p1;
                elsif ((ap_const_boolean_1 = ap_condition_279)) then 
                    idx_3_i_reg_387 <= zext_ln51_1_fu_846_p1;
                end if;
            end if; 
        end if;
    end process;

    j_0_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_635_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_477 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j_0_reg_477 <= j_reg_1583;
            end if; 
        end if;
    end process;

    l_0_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln153_fu_1055_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                l_0_reg_488 <= ap_const_lv17_1F;
            elsif (((icmp_ln164_fu_1090_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                l_0_reg_488 <= l_fu_1119_p2;
            end if; 
        end if;
    end process;

    m_0_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                m_0_reg_376 <= m_2_reg_1423;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                m_0_reg_376 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    m_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_reg_1720 = ap_const_lv1_1) and (icmp_ln189_reg_1716 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state142))) then 
                m_fu_148 <= m_1_fu_1372_p2;
            elsif (((icmp_ln158_fu_1073_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                m_fu_148 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    n3_0_reg_537_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state142)) then 
                n3_0_reg_537 <= n_fu_1399_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                n3_0_reg_537 <= ap_const_lv17_1;
            end if; 
        end if;
    end process;

    p_Val2_5_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                p_Val2_5_reg_500 <= ret_V_10_fu_1165_p2(47 downto 16);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                p_Val2_5_reg_500 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_Val2_6_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                p_Val2_6_fu_152 <= reg_631;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                p_Val2_6_fu_152 <= y_Q_V_q0;
            end if; 
        end if;
    end process;

    p_Val2_7_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                p_Val2_7_fu_156 <= reg_627;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                p_Val2_7_fu_156 <= y_I_V_q0;
            end if; 
        end if;
    end process;

    p_Val2_8_reg_513_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                p_Val2_8_reg_513 <= ret_V_11_fu_1202_p2(47 downto 16);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                p_Val2_8_reg_513 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_Val2_s_reg_365 <= value_V_4_reg_1428;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_Val2_s_reg_365 <= ap_const_lv32_FFEDC5D6;
            end if; 
        end if;
    end process;

    sign_3_i3_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_fu_610_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln11_fu_890_p2) and (grp_fu_584_p2 = ap_const_lv1_0) and (icmp_ln42_reg_1473 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_0 = and_ln11_fu_890_p2) and (grp_fu_610_p2 = ap_const_lv1_0) and (grp_fu_584_p2 = ap_const_lv1_0) and (icmp_ln42_reg_1473 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                sign_3_i3_reg_443 <= ap_const_lv1_1;
            elsif ((((icmp_ln42_reg_1473 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = and_ln11_fu_890_p2) and (icmp_ln42_reg_1473 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((grp_fu_584_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln11_fu_890_p2) and (icmp_ln42_reg_1473 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                sign_3_i3_reg_443 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    sign_3_i_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln42_fu_755_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = and_ln46_fu_773_p2) and (icmp_ln42_fu_755_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((grp_fu_610_p2 = ap_const_lv1_0) and (grp_fu_584_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_fu_773_p2) and (icmp_ln42_fu_755_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                sign_3_i_reg_404 <= ap_const_lv1_0;
            elsif ((((grp_fu_584_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln46_fu_773_p2) and (icmp_ln42_fu_755_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((grp_fu_610_p2 = ap_const_lv1_1) and (grp_fu_584_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_fu_773_p2) and (icmp_ln42_fu_755_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                sign_3_i_reg_404 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    storemerge1771_reg_465_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                storemerge1771_reg_465 <= imag_V_reg_1558;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                storemerge1771_reg_465 <= grp_fu_622_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                coef_V_load_reg_1683 <= coef_V_q0;
                select_ln165_1_reg_1688 <= select_ln165_1_fu_1133_p3;
                select_ln165_reg_1678 <= select_ln165_fu_1125_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_reg_1641 <= i_fu_1096_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln164_fu_1090_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                icmp_ln165_reg_1652 <= icmp_ln165_fu_1107_p2;
                    zext_ln165_reg_1646(4 downto 0) <= zext_ln165_fu_1102_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                icmp_ln189_reg_1716 <= icmp_ln189_fu_1244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                icmp_ln195_reg_1720 <= icmp_ln195_fu_1278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln42_reg_1473 <= icmp_ln42_fu_755_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_635_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                idx_1_reg_1453 <= idx_1_fu_745_p1;
                select_ln850_reg_1433 <= select_ln850_fu_737_p3;
                value_V_4_reg_1428 <= value_V_4_fu_687_p3;
                y_I_V_addr_2_reg_1463 <= zext_ln94_fu_749_p1(17 - 1 downto 0);
                y_Q_V_addr_2_reg_1468 <= zext_ln94_fu_749_p1(17 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                imag_V_reg_1558 <= ret_V_9_fu_1029_p2(39 downto 8);
                real_V_reg_1552 <= ret_V_8_fu_1003_p2(39 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                j_reg_1583 <= j_fu_1061_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                m_2_reg_1423 <= m_2_fu_641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_Val2_25_reg_1547 <= p_Val2_25_fu_978_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_fu_1278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                r_V_10_reg_1724 <= r_V_10_fu_1302_p2;
                r_V_11_reg_1729 <= r_V_11_fu_1316_p2;
                ret_V_5_reg_1734 <= ret_V_5_fu_1342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_627 <= y_I_V_q0;
                reg_631 <= y_Q_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sext_ln1118_1_reg_1512 <= sext_ln1118_1_fu_873_p1;
                sext_ln1118_reg_1506 <= sext_ln1118_fu_869_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln158_fu_1073_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                y_I_V_addr_3_reg_1607 <= zext_ln160_fu_1079_p1(17 - 1 downto 0);
                y_Q_V_addr_3_reg_1612 <= zext_ln160_fu_1079_p1(17 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln153_fu_1055_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    zext_ln155_reg_1588(4 downto 0) <= zext_ln155_fu_1067_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln155_reg_1588(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln165_reg_1646(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state22, ap_CS_fsm_state2, icmp_ln86_fu_635_p2, ap_CS_fsm_state8, ap_CS_fsm_state13, icmp_ln153_fu_1055_p2, ap_CS_fsm_state15, icmp_ln158_fu_1073_p2, ap_CS_fsm_state17, icmp_ln164_fu_1090_p2, ap_CS_fsm_state21, icmp_ln185_fu_1228_p2, icmp_ln189_fu_1244_p2, icmp_ln195_fu_1278_p2, ap_CS_fsm_state42, icmp_ln98_fu_1045_p2, icmp_ln103_fu_1050_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln86_fu_635_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln103_fu_1050_p2 = ap_const_lv1_1) and (icmp_ln98_fu_1045_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((icmp_ln103_fu_1050_p2 = ap_const_lv1_0) and (icmp_ln98_fu_1045_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln153_fu_1055_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln158_fu_1073_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln164_fu_1090_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln185_fu_1228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln189_fu_1244_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state142;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((icmp_ln195_fu_1278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state142;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1192_fu_659_p2 <= std_logic_vector(unsigned(ap_const_lv41_123A2900) + unsigned(zext_ln728_fu_655_p1));
    and_ln11_fu_890_p2 <= (xor_ln11_fu_884_p2 and grp_fu_549_p2);
    and_ln46_fu_773_p2 <= (xor_ln46_fu_767_p2 and grp_fu_549_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state142 <= ap_CS_fsm(141);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_condition_268_assign_proc : process(icmp_ln42_fu_755_p2, and_ln46_fu_773_p2, grp_fu_584_p2, grp_fu_610_p2)
    begin
                ap_condition_268 <= ((grp_fu_610_p2 = ap_const_lv1_0) and (grp_fu_584_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_fu_773_p2) and (icmp_ln42_fu_755_p2 = ap_const_lv1_0));
    end process;


    ap_condition_274_assign_proc : process(icmp_ln42_fu_755_p2, and_ln46_fu_773_p2, grp_fu_584_p2, grp_fu_610_p2)
    begin
                ap_condition_274 <= ((grp_fu_610_p2 = ap_const_lv1_1) and (grp_fu_584_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_fu_773_p2) and (icmp_ln42_fu_755_p2 = ap_const_lv1_0));
    end process;


    ap_condition_279_assign_proc : process(icmp_ln42_fu_755_p2, and_ln46_fu_773_p2, grp_fu_584_p2)
    begin
                ap_condition_279 <= ((grp_fu_584_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln46_fu_773_p2) and (icmp_ln42_fu_755_p2 = ap_const_lv1_0));
    end process;


    ap_condition_304_assign_proc : process(icmp_ln42_reg_1473, grp_fu_584_p2, grp_fu_610_p2, and_ln11_fu_890_p2)
    begin
                ap_condition_304 <= ((ap_const_lv1_0 = and_ln11_fu_890_p2) and (grp_fu_610_p2 = ap_const_lv1_0) and (grp_fu_584_p2 = ap_const_lv1_0) and (icmp_ln42_reg_1473 = ap_const_lv1_0));
    end process;


    ap_condition_308_assign_proc : process(icmp_ln42_reg_1473, grp_fu_584_p2, grp_fu_610_p2, and_ln11_fu_890_p2)
    begin
                ap_condition_308 <= ((grp_fu_610_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln11_fu_890_p2) and (grp_fu_584_p2 = ap_const_lv1_0) and (icmp_ln42_reg_1473 = ap_const_lv1_0));
    end process;


    ap_condition_312_assign_proc : process(icmp_ln42_reg_1473, grp_fu_584_p2, and_ln11_fu_890_p2)
    begin
                ap_condition_312 <= ((grp_fu_584_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln11_fu_890_p2) and (icmp_ln42_reg_1473 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state21, icmp_ln185_fu_1228_p2)
    begin
        if (((icmp_ln185_fu_1228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21, icmp_ln185_fu_1228_p2)
    begin
        if (((icmp_ln185_fu_1228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;
    coef_V_address0 <= zext_ln165_fu_1102_p1(5 - 1 downto 0);

    coef_V_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            coef_V_ce0 <= ap_const_logic_1;
        else 
            coef_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cos_table_address0 <= sext_ln1265_fu_850_p1(7 - 1 downto 0);

    cos_table_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cos_table_ce0 <= ap_const_logic_1;
        else 
            cos_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dii_V_fu_1262_p2 <= std_logic_vector(signed(reg_627) - signed(p_Val2_7_fu_156));
    dqq_V_fu_1268_p2 <= std_logic_vector(signed(reg_631) - signed(p_Val2_6_fu_152));

    grp_fu_1250_ap_start_assign_proc : process(ap_CS_fsm_state22, icmp_ln189_fu_1244_p2)
    begin
        if (((icmp_ln189_fu_1244_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_1250_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1250_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1250_p1 <= ap_const_lv17_50(8 - 1 downto 0);

    grp_fu_1363_ap_start_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_1363_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1363_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1363_p0 <= (ret_V_12_fu_1348_p2 & ap_const_lv32_0);
    grp_fu_549_p2 <= "1" when (signed(select_ln850_reg_1433) < signed(ap_const_lv16_41)) else "0";
    grp_fu_554_p4 <= select_ln850_reg_1433(15 downto 6);
    grp_fu_563_p2 <= "1" when (signed(grp_fu_554_p4) > signed(ap_const_lv10_0)) else "0";
    grp_fu_569_p4 <= select_ln850_reg_1433(15 downto 7);
    grp_fu_578_p2 <= "1" when (signed(grp_fu_569_p4) < signed(ap_const_lv9_1)) else "0";
    grp_fu_584_p2 <= (grp_fu_578_p2 and grp_fu_563_p2);
    grp_fu_590_p4 <= select_ln850_reg_1433(15 downto 7);
    grp_fu_599_p2 <= "1" when (signed(grp_fu_590_p4) > signed(ap_const_lv9_0)) else "0";
    grp_fu_605_p2 <= "1" when (signed(select_ln850_reg_1433) < signed(ap_const_lv16_C0)) else "0";
    grp_fu_610_p2 <= (grp_fu_605_p2 and grp_fu_599_p2);
    grp_fu_616_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(real_V_reg_1552));
    grp_fu_622_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(imag_V_reg_1558));

    hwin_I_V_address0_assign_proc : process(zext_ln155_reg_1588, ap_CS_fsm_state17, zext_ln165_reg_1646, ap_CS_fsm_state18, ap_CS_fsm_state14, zext_ln165_1_fu_1113_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hwin_I_V_address0 <= zext_ln165_reg_1646(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            hwin_I_V_address0 <= zext_ln165_1_fu_1113_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hwin_I_V_address0 <= zext_ln155_reg_1588(5 - 1 downto 0);
        else 
            hwin_I_V_address0 <= "XXXXX";
        end if; 
    end process;


    hwin_I_V_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            hwin_I_V_ce0 <= ap_const_logic_1;
        else 
            hwin_I_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hwin_I_V_d0_assign_proc : process(y_I_V_q0, select_ln165_fu_1125_p3, ap_CS_fsm_state18, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hwin_I_V_d0 <= select_ln165_fu_1125_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hwin_I_V_d0 <= y_I_V_q0;
        else 
            hwin_I_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hwin_I_V_we0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            hwin_I_V_we0 <= ap_const_logic_1;
        else 
            hwin_I_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hwin_Q_V_address0_assign_proc : process(zext_ln155_reg_1588, ap_CS_fsm_state17, zext_ln165_reg_1646, ap_CS_fsm_state18, ap_CS_fsm_state14, zext_ln165_1_fu_1113_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hwin_Q_V_address0 <= zext_ln165_reg_1646(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            hwin_Q_V_address0 <= zext_ln165_1_fu_1113_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hwin_Q_V_address0 <= zext_ln155_reg_1588(5 - 1 downto 0);
        else 
            hwin_Q_V_address0 <= "XXXXX";
        end if; 
    end process;


    hwin_Q_V_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            hwin_Q_V_ce0 <= ap_const_logic_1;
        else 
            hwin_Q_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hwin_Q_V_d0_assign_proc : process(y_Q_V_q0, ap_CS_fsm_state18, select_ln165_1_fu_1133_p3, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hwin_Q_V_d0 <= select_ln165_1_fu_1133_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hwin_Q_V_d0 <= y_Q_V_q0;
        else 
            hwin_Q_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hwin_Q_V_we0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            hwin_Q_V_we0 <= ap_const_logic_1;
        else 
            hwin_Q_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_1096_p2 <= std_logic_vector(unsigned(i_0_reg_526) + unsigned(ap_const_lv5_1));
    icmp_ln103_fu_1050_p2 <= "1" when (select_ln850_reg_1433 = ap_const_lv16_40) else "0";
    icmp_ln1494_fu_675_p2 <= "1" when (signed(value_V_3_fu_665_p4) > signed(ap_const_lv32_1000000)) else "0";
    icmp_ln153_fu_1055_p2 <= "1" when (j_0_reg_477 = ap_const_lv5_1F) else "0";
    icmp_ln158_fu_1073_p2 <= "1" when (l_0_reg_488 = ap_const_lv17_186A0) else "0";
    icmp_ln164_fu_1090_p2 <= "1" when (i_0_reg_526 = ap_const_lv5_1F) else "0";
    icmp_ln165_fu_1107_p2 <= "1" when (unsigned(i_0_reg_526) < unsigned(ap_const_lv5_1E)) else "0";
    icmp_ln185_fu_1228_p2 <= "1" when (n3_0_reg_537 = ap_const_lv17_186A0) else "0";
    icmp_ln189_fu_1244_p2 <= "1" when (trunc_ln185_fu_1240_p1 = ap_const_lv3_0) else "0";
    icmp_ln195_fu_1278_p2 <= "1" when (trunc_ln195_fu_1274_p1 = ap_const_lv7_0) else "0";
    icmp_ln42_fu_755_p2 <= "1" when (select_ln850_reg_1433 = ap_const_lv16_100) else "0";
    icmp_ln851_fu_717_p2 <= "1" when (trunc_ln851_fu_713_p1 = ap_const_lv16_0) else "0";
    icmp_ln86_fu_635_p2 <= "1" when (m_0_reg_376 = ap_const_lv17_186A0) else "0";
    icmp_ln98_fu_1045_p2 <= "1" when (select_ln850_reg_1433 = ap_const_lv16_0) else "0";
    idx_1_fu_745_p1 <= select_ln850_fu_737_p3(6 - 1 downto 0);
    idx_2_fu_824_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(select_ln59_fu_816_p3));
    idx_3_fu_957_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(zext_ln16_fu_954_p1));
    idx_4_fu_941_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(select_ln24_fu_933_p3));
    idx_fu_840_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(zext_ln51_fu_837_p1));
    j_fu_1061_p2 <= std_logic_vector(unsigned(j_0_reg_477) + unsigned(ap_const_lv5_1));
    l_fu_1119_p2 <= std_logic_vector(unsigned(l_0_reg_488) + unsigned(ap_const_lv17_1));
    lhs_V_1_fu_1153_p3 <= (p_Val2_5_reg_500 & ap_const_lv16_0);
    lhs_V_2_fu_1190_p3 <= (p_Val2_8_reg_513 & ap_const_lv16_0);
        lhs_V_3_fu_1334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_12_fu_1322_p2),65));

    lhs_V_fu_647_p3 <= (p_Val2_s_reg_365 & ap_const_lv8_0);
    m_1_fu_1372_p2 <= std_logic_vector(unsigned(m_fu_148) + unsigned(ap_const_lv32_1));
    m_2_fu_641_p2 <= std_logic_vector(unsigned(m_0_reg_376) + unsigned(ap_const_lv17_1));
    mul_ln1192_fu_997_p0 <= sext_ln1118_4_fu_986_p1(32 - 1 downto 0);
    mul_ln1192_fu_997_p1 <= sext_ln1118_5_fu_990_p1(9 - 1 downto 0);
    mul_ln1192_fu_997_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_fu_997_p0) * signed(mul_ln1192_fu_997_p1))), 40));
    mul_ln1193_fu_1024_p0 <= sext_ln1118_reg_1506(32 - 1 downto 0);
    mul_ln1193_fu_1024_p1 <= sext_ln1118_5_fu_990_p1(9 - 1 downto 0);
    mul_ln1193_fu_1024_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1193_fu_1024_p0) * signed(mul_ln1193_fu_1024_p1))), 40));
    mul_ln700_1_fu_1019_p0 <= sext_ln1118_4_fu_986_p1(32 - 1 downto 0);
    mul_ln700_1_fu_1019_p1 <= sext_ln1118_1_reg_1512(9 - 1 downto 0);
    mul_ln700_1_fu_1019_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_1_fu_1019_p0) * signed(mul_ln700_1_fu_1019_p1))), 40));
    mul_ln700_fu_993_p0 <= sext_ln1118_reg_1506(32 - 1 downto 0);
    mul_ln700_fu_993_p1 <= sext_ln1118_1_reg_1512(9 - 1 downto 0);
    mul_ln700_fu_993_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_fu_993_p0) * signed(mul_ln700_fu_993_p1))), 40));
    n_fu_1399_p2 <= std_logic_vector(unsigned(n3_0_reg_537) + unsigned(ap_const_lv17_1));
    p_Result_s_fu_705_p3 <= value_V_4_fu_687_p3(31 downto 31);
    p_Val2_10_fu_861_p3 <= 
        sub_ln703_4_fu_855_p2 when (sign_3_i_reg_404(0) = '1') else 
        cos_table_q0;
    p_Val2_25_fu_978_p3 <= 
        sub_ln703_7_fu_972_p2 when (sign_3_i3_reg_443(0) = '1') else 
        sin_table_q0;
    r_V_10_fu_1302_p0 <= r_V_fu_1294_p1(32 - 1 downto 0);
    r_V_10_fu_1302_p1 <= dqq_V_fu_1268_p2;
    r_V_10_fu_1302_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_10_fu_1302_p0) * signed(r_V_10_fu_1302_p1))), 64));
    r_V_11_fu_1316_p0 <= dii_V_fu_1262_p2;
    r_V_11_fu_1316_p1 <= r_V_4_fu_1308_p1(32 - 1 downto 0);
    r_V_11_fu_1316_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_11_fu_1316_p0) * signed(r_V_11_fu_1316_p1))), 64));
    r_V_12_fu_1322_p0 <= r_V_fu_1294_p1(32 - 1 downto 0);
    r_V_12_fu_1322_p1 <= r_V_fu_1294_p1(32 - 1 downto 0);
    r_V_12_fu_1322_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_12_fu_1322_p0) * signed(r_V_12_fu_1322_p1))), 64));
    r_V_13_fu_1328_p0 <= r_V_4_fu_1308_p1(32 - 1 downto 0);
    r_V_13_fu_1328_p1 <= r_V_4_fu_1308_p1(32 - 1 downto 0);
    r_V_13_fu_1328_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_13_fu_1328_p0) * signed(r_V_13_fu_1328_p1))), 64));
        r_V_4_fu_1308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_631),64));

    r_V_8_fu_1147_p0 <= zext_ln1118_fu_1144_p1(12 - 1 downto 0);
    r_V_8_fu_1147_p1 <= select_ln165_reg_1678;
    r_V_8_fu_1147_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &r_V_8_fu_1147_p0) * signed(r_V_8_fu_1147_p1))), 44));
    r_V_9_fu_1184_p0 <= zext_ln1118_fu_1144_p1(12 - 1 downto 0);
    r_V_9_fu_1184_p1 <= select_ln165_1_reg_1688;
    r_V_9_fu_1184_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &r_V_9_fu_1184_p0) * signed(r_V_9_fu_1184_p1))), 44));
        r_V_fu_1294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_627),64));

    ret_V_10_fu_1165_p2 <= std_logic_vector(signed(sext_ln1192_fu_1161_p1) + signed(lhs_V_1_fu_1153_p3));
    ret_V_11_fu_1202_p2 <= std_logic_vector(signed(sext_ln1192_1_fu_1198_p1) + signed(lhs_V_2_fu_1190_p3));
    ret_V_12_fu_1348_p2 <= std_logic_vector(unsigned(r_V_10_reg_1724) - unsigned(r_V_11_reg_1729));
    ret_V_1_fu_723_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(ret_V_fu_695_p4));
    ret_V_5_fu_1342_p2 <= std_logic_vector(signed(lhs_V_3_fu_1334_p1) + signed(rhs_V_fu_1338_p1));
    ret_V_8_fu_1003_p2 <= std_logic_vector(unsigned(mul_ln700_fu_993_p2) + unsigned(mul_ln1192_fu_997_p2));
    ret_V_9_fu_1029_p2 <= std_logic_vector(unsigned(mul_ln700_1_fu_1019_p2) - unsigned(mul_ln1193_fu_1024_p2));
    ret_V_fu_695_p4 <= value_V_4_fu_687_p3(31 downto 16);
        rhs_V_fu_1338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_13_fu_1328_p2),65));

    select_ln165_1_fu_1133_p2 <= reg_631;
    select_ln165_1_fu_1133_p3 <= 
        hwin_Q_V_q0 when (icmp_ln165_reg_1652(0) = '1') else 
        select_ln165_1_fu_1133_p2;
    select_ln165_fu_1125_p2 <= reg_627;
    select_ln165_fu_1125_p3 <= 
        hwin_I_V_q0 when (icmp_ln165_reg_1652(0) = '1') else 
        select_ln165_fu_1125_p2;
    select_ln24_fu_933_p3 <= 
        sub_ln24_1_fu_920_p2 when (tmp_13_fu_896_p3(0) = '1') else 
        tmp_8_fu_926_p3;
    select_ln59_fu_816_p3 <= 
        sub_ln59_1_fu_803_p2 when (tmp_6_fu_779_p3(0) = '1') else 
        tmp_3_fu_809_p3;
    select_ln850_fu_737_p3 <= 
        select_ln851_fu_729_p3 when (p_Result_s_fu_705_p3(0) = '1') else 
        ret_V_fu_695_p4;
    select_ln851_fu_729_p3 <= 
        ret_V_fu_695_p4 when (icmp_ln851_fu_717_p2(0) = '1') else 
        ret_V_1_fu_723_p2;
        sext_ln1118_1_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_10_fu_861_p3),40));

        sext_ln1118_4_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_631),40));

        sext_ln1118_5_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_25_reg_1547),40));

        sext_ln1118_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_627),40));

        sext_ln1192_1_fu_1198_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_9_fu_1184_p2),48));

        sext_ln1192_fu_1161_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_8_fu_1147_p2),48));

        sext_ln1265_1_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(idx_3_i2_reg_426),64));

        sext_ln1265_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(idx_3_i_reg_387),64));

        sext_ln198_fu_1378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m_1_fu_1372_p2),64));

    sin_table_address0 <= sext_ln1265_1_fu_967_p1(7 - 1 downto 0);

    sin_table_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sin_table_ce0 <= ap_const_logic_1;
        else 
            sin_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln24_1_fu_920_p2 <= std_logic_vector(unsigned(ap_const_lv7_0) - unsigned(tmp_14_fu_912_p3));
    sub_ln24_fu_906_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(trunc_ln24_fu_903_p1));
    sub_ln59_1_fu_803_p2 <= std_logic_vector(unsigned(ap_const_lv7_0) - unsigned(tmp_7_fu_795_p3));
    sub_ln59_fu_789_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(trunc_ln59_fu_786_p1));
    sub_ln703_4_fu_855_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(cos_table_q0));
    sub_ln703_7_fu_972_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sin_table_q0));
    tmp_13_fu_896_p3 <= select_ln850_reg_1433(15 downto 15);
    tmp_14_fu_912_p3 <= (ap_const_lv1_0 & sub_ln24_fu_906_p2);
    tmp_3_fu_809_p3 <= (ap_const_lv1_0 & idx_1_reg_1453);
    tmp_6_fu_779_p3 <= select_ln850_reg_1433(15 downto 15);
    tmp_7_fu_795_p3 <= (ap_const_lv1_0 & sub_ln59_fu_789_p2);
    tmp_8_fu_926_p3 <= (ap_const_lv1_0 & idx_1_reg_1453);
    tmp_9_fu_877_p3 <= select_ln850_reg_1433(15 downto 15);
    tmp_fu_760_p3 <= select_ln850_reg_1433(15 downto 15);
    trunc_ln185_fu_1240_p1 <= n3_0_reg_537(3 - 1 downto 0);
    trunc_ln195_fu_1274_p1 <= grp_fu_1250_p2(7 - 1 downto 0);
    trunc_ln24_fu_903_p1 <= select_ln850_reg_1433(6 - 1 downto 0);
    trunc_ln59_fu_786_p1 <= select_ln850_reg_1433(6 - 1 downto 0);
    trunc_ln851_fu_713_p1 <= value_V_4_fu_687_p3(16 - 1 downto 0);
    value_V_3_fu_665_p4 <= add_ln1192_fu_659_p2(39 downto 8);
    value_V_4_fu_687_p3 <= 
        value_V_fu_681_p2 when (icmp_ln1494_fu_675_p2(0) = '1') else 
        value_V_3_fu_665_p4;
    value_V_fu_681_p2 <= std_logic_vector(signed(ap_const_lv32_FF000000) + signed(value_V_3_fu_665_p4));
    xor_ln11_fu_884_p2 <= (tmp_9_fu_877_p3 xor ap_const_lv1_1);
    xor_ln46_fu_767_p2 <= (tmp_fu_760_p3 xor ap_const_lv1_1);

    y_I_V_address0_assign_proc : process(ap_CS_fsm_state2, y_I_V_addr_2_reg_1463, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, zext_ln155_fu_1067_p1, y_I_V_addr_3_reg_1607, ap_CS_fsm_state15, icmp_ln158_fu_1073_p2, ap_CS_fsm_state17, ap_CS_fsm_state21, ap_CS_fsm_state9, zext_ln94_fu_749_p1, zext_ln160_fu_1079_p1, zext_ln187_fu_1234_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            y_I_V_address0 <= zext_ln187_fu_1234_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            y_I_V_address0 <= y_I_V_addr_3_reg_1607;
        elsif (((icmp_ln158_fu_1073_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            y_I_V_address0 <= ap_const_lv64_0(17 - 1 downto 0);
        elsif (((icmp_ln158_fu_1073_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            y_I_V_address0 <= zext_ln160_fu_1079_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            y_I_V_address0 <= zext_ln155_fu_1067_p1(17 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            y_I_V_address0 <= y_I_V_addr_2_reg_1463;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            y_I_V_address0 <= zext_ln94_fu_749_p1(17 - 1 downto 0);
        else 
            y_I_V_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_I_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, icmp_ln158_fu_1073_p2, ap_CS_fsm_state17, ap_CS_fsm_state21, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln158_fu_1073_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((icmp_ln158_fu_1073_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            y_I_V_ce0 <= ap_const_logic_1;
        else 
            y_I_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_I_V_d0_assign_proc : process(real_V_reg_1552, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state9, p_Val2_5_reg_500, grp_fu_616_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            y_I_V_d0 <= p_Val2_5_reg_500;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            y_I_V_d0 <= grp_fu_616_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            y_I_V_d0 <= real_V_reg_1552;
        else 
            y_I_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_I_V_we0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state17, icmp_ln164_fu_1090_p2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln164_fu_1090_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            y_I_V_we0 <= ap_const_logic_1;
        else 
            y_I_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_Q_V_address0_assign_proc : process(ap_CS_fsm_state2, y_Q_V_addr_2_reg_1468, ap_CS_fsm_state13, zext_ln155_fu_1067_p1, ap_CS_fsm_state15, icmp_ln158_fu_1073_p2, y_Q_V_addr_3_reg_1612, ap_CS_fsm_state17, ap_CS_fsm_state21, ap_CS_fsm_state12, zext_ln94_fu_749_p1, zext_ln160_fu_1079_p1, zext_ln187_fu_1234_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            y_Q_V_address0 <= zext_ln187_fu_1234_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            y_Q_V_address0 <= y_Q_V_addr_3_reg_1612;
        elsif (((icmp_ln158_fu_1073_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            y_Q_V_address0 <= ap_const_lv64_0(17 - 1 downto 0);
        elsif (((icmp_ln158_fu_1073_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            y_Q_V_address0 <= zext_ln160_fu_1079_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            y_Q_V_address0 <= zext_ln155_fu_1067_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            y_Q_V_address0 <= y_Q_V_addr_2_reg_1468;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            y_Q_V_address0 <= zext_ln94_fu_749_p1(17 - 1 downto 0);
        else 
            y_Q_V_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_Q_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state13, ap_CS_fsm_state15, icmp_ln158_fu_1073_p2, ap_CS_fsm_state17, ap_CS_fsm_state21, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln158_fu_1073_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((icmp_ln158_fu_1073_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            y_Q_V_ce0 <= ap_const_logic_1;
        else 
            y_Q_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_Q_V_d0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state12, storemerge1771_reg_465, p_Val2_8_reg_513)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            y_Q_V_d0 <= p_Val2_8_reg_513;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            y_Q_V_d0 <= storemerge1771_reg_465;
        else 
            y_Q_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_Q_V_we0_assign_proc : process(ap_CS_fsm_state17, icmp_ln164_fu_1090_p2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln164_fu_1090_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            y_Q_V_we0 <= ap_const_logic_1;
        else 
            y_Q_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_demod_d_V_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state142, sext_ln198_fu_1378_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state142)) then 
            y_demod_d_V_address0 <= sext_ln198_fu_1378_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            y_demod_d_V_address0 <= ap_const_lv64_0(11 - 1 downto 0);
        else 
            y_demod_d_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    y_demod_d_V_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state142)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state142) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            y_demod_d_V_ce0 <= ap_const_logic_1;
        else 
            y_demod_d_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_demod_d_V_d0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state142, grp_fu_1363_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state142)) then 
            y_demod_d_V_d0 <= grp_fu_1363_p2(47 downto 16);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            y_demod_d_V_d0 <= ap_const_lv32_0;
        else 
            y_demod_d_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_demod_d_V_we0_assign_proc : process(ap_CS_fsm_state15, icmp_ln158_fu_1073_p2, icmp_ln189_reg_1716, icmp_ln195_reg_1720, ap_CS_fsm_state142)
    begin
        if ((((icmp_ln195_reg_1720 = ap_const_lv1_1) and (icmp_ln189_reg_1716 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state142)) or ((icmp_ln158_fu_1073_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            y_demod_d_V_we0 <= ap_const_logic_1;
        else 
            y_demod_d_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1118_fu_1144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(coef_V_load_reg_1683),44));
    zext_ln155_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_477),64));
    zext_ln160_fu_1079_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_0_reg_488),64));
    zext_ln165_1_fu_1113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_1096_p2),64));
    zext_ln165_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_526),64));
    zext_ln16_1_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_3_fu_957_p2),16));
    zext_ln16_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_1_reg_1453),7));
    zext_ln187_fu_1234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n3_0_reg_537),64));
    zext_ln20_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_1_reg_1453),16));
    zext_ln24_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_4_fu_941_p2),16));
    zext_ln51_1_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_fu_840_p2),16));
    zext_ln51_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_1_reg_1453),7));
    zext_ln55_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_1_reg_1453),16));
    zext_ln59_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_2_fu_824_p2),16));
    zext_ln728_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_fu_647_p3),41));
    zext_ln94_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_376),64));
end behav;
