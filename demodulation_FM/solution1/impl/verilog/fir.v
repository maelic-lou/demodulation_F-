// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V_address0,
        x_V_ce0,
        x_V_q0,
        y_V_address0,
        y_V_ce0,
        y_V_we0,
        y_V_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] x_V_address0;
output   x_V_ce0;
input  [31:0] x_V_q0;
output  [15:0] y_V_address0;
output   y_V_ce0;
output   y_V_we0;
output  [31:0] y_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] x_V_address0;
reg x_V_ce0;
reg[15:0] y_V_address0;
reg y_V_ce0;
reg y_V_we0;
reg[31:0] y_V_d0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] coef_address0;
reg    coef_ce0;
wire   [13:0] coef_q0;
wire   [4:0] j_fu_147_p2;
reg   [4:0] j_reg_250;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln39_fu_153_p1;
reg   [63:0] zext_ln39_reg_255;
wire   [0:0] icmp_ln37_fu_141_p2;
wire   [4:0] k_fu_174_p2;
reg   [4:0] k_reg_271;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln44_fu_168_p2;
wire   [15:0] l_fu_201_p2;
reg   [13:0] coef_load_reg_291;
wire    ap_CS_fsm_state6;
reg   [31:0] x_V_load_1_reg_296;
wire    ap_CS_fsm_state7;
reg   [4:0] j_0_reg_94;
wire    ap_CS_fsm_state3;
reg   [15:0] l_0_reg_105;
reg   [31:0] p_Val2_s_reg_117;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln41_fu_158_p2;
reg   [4:0] k_0_reg_130;
wire   [63:0] zext_ln46_fu_180_p1;
wire   [63:0] zext_ln46_1_fu_191_p1;
wire   [63:0] zext_ln48_fu_196_p1;
wire   [15:0] zext_ln44_fu_164_p1;
wire   [15:0] sub_ln46_fu_185_p2;
wire  signed [13:0] r_V_fu_213_p0;
wire  signed [31:0] r_V_fu_213_p1;
wire   [45:0] r_V_fu_213_p2;
wire   [47:0] lhs_V_fu_219_p3;
wire  signed [47:0] sext_ln1192_fu_227_p1;
wire   [47:0] ret_V_fu_231_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

fir_coef #(
    .DataWidth( 14 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
coef_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(coef_address0),
    .ce0(coef_ce0),
    .q0(coef_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_reg_94 <= j_reg_250;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_94 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_0_reg_130 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        k_0_reg_130 <= k_reg_271;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        l_0_reg_105 <= 16'd31;
    end else if (((icmp_ln44_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        l_0_reg_105 <= l_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_Val2_s_reg_117 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_s_reg_117 <= {{ret_V_fu_231_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        coef_load_reg_291 <= coef_q0;
        x_V_load_1_reg_296 <= x_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_250 <= j_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_271 <= k_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln39_reg_255[4 : 0] <= zext_ln39_fu_153_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln41_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        coef_ce0 = 1'b1;
    end else begin
        coef_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x_V_address0 = zext_ln46_1_fu_191_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_V_address0 = zext_ln39_fu_153_p1;
    end else begin
        x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        x_V_ce0 = 1'b1;
    end else begin
        x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_V_address0 = zext_ln48_fu_196_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        y_V_address0 = zext_ln39_reg_255;
    end else begin
        y_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        y_V_ce0 = 1'b1;
    end else begin
        y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_V_d0 = p_Val2_s_reg_117;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        y_V_d0 = x_V_q0;
    end else begin
        y_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln44_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        y_V_we0 = 1'b1;
    end else begin
        y_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln37_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln41_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln44_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign coef_address0 = zext_ln46_fu_180_p1;

assign icmp_ln37_fu_141_p2 = ((j_0_reg_94 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_158_p2 = ((l_0_reg_105 == 16'd40000) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_168_p2 = ((k_0_reg_130 == 5'd31) ? 1'b1 : 1'b0);

assign j_fu_147_p2 = (j_0_reg_94 + 5'd1);

assign k_fu_174_p2 = (k_0_reg_130 + 5'd1);

assign l_fu_201_p2 = (l_0_reg_105 + 16'd1);

assign lhs_V_fu_219_p3 = {{p_Val2_s_reg_117}, {16'd0}};

assign r_V_fu_213_p0 = coef_load_reg_291;

assign r_V_fu_213_p1 = x_V_load_1_reg_296;

assign r_V_fu_213_p2 = ($signed(r_V_fu_213_p0) * $signed(r_V_fu_213_p1));

assign ret_V_fu_231_p2 = ($signed(lhs_V_fu_219_p3) + $signed(sext_ln1192_fu_227_p1));

assign sext_ln1192_fu_227_p1 = $signed(r_V_fu_213_p2);

assign sub_ln46_fu_185_p2 = (l_0_reg_105 - zext_ln44_fu_164_p1);

assign zext_ln39_fu_153_p1 = j_0_reg_94;

assign zext_ln44_fu_164_p1 = k_0_reg_130;

assign zext_ln46_1_fu_191_p1 = sub_ln46_fu_185_p2;

assign zext_ln46_fu_180_p1 = k_0_reg_130;

assign zext_ln48_fu_196_p1 = l_0_reg_105;

always @ (posedge ap_clk) begin
    zext_ln39_reg_255[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //fir
