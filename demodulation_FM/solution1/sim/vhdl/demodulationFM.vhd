-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity demodulationFM is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_I_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    y_I_V_ce0 : OUT STD_LOGIC;
    y_I_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_Q_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    y_Q_V_ce0 : OUT STD_LOGIC;
    y_Q_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_demod_d_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    y_demod_d_V_ce0 : OUT STD_LOGIC;
    y_demod_d_V_we0 : OUT STD_LOGIC;
    y_demod_d_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of demodulationFM is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "demodulationFM,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.566000,HLS_SYN_LAT=4533024,HLS_SYN_TPT=none,HLS_SYN_MEM=560,HLS_SYN_DSP=32,HLS_SYN_FF=1895,HLS_SYN_LUT=2982,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (112 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (112 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (112 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (112 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (112 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (112 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (112 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (112 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (112 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (112 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (112 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv13_1388 : STD_LOGIC_VECTOR (12 downto 0) := "1001110001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv9_1F4 : STD_LOGIC_VECTOR (8 downto 0) := "111110100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal n_fu_309_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal n_reg_543 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln148_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_1_fu_339_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal n_1_reg_556 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln148_1_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln171_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln171_reg_569 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln169_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_fu_387_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal q_reg_594 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_I_d_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_599 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal dii_V_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dii_V_reg_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_Q_d_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_11_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal dqq_V_fu_399_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dqq_V_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_429_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_reg_619 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ret_V_2_fu_455_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal ret_V_2_reg_624 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal n_2_fu_494_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_2_reg_642 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal icmp_ln156_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_I_s_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_I_s_V_ce0 : STD_LOGIC;
    signal y_I_s_V_we0 : STD_LOGIC;
    signal y_I_s_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_Q_s_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_Q_s_V_ce0 : STD_LOGIC;
    signal y_Q_s_V_we0 : STD_LOGIC;
    signal y_Q_s_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_I_fpb_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_I_fpb_V_ce0 : STD_LOGIC;
    signal y_I_fpb_V_we0 : STD_LOGIC;
    signal y_I_fpb_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_Q_fpb_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_Q_fpb_V_ce0 : STD_LOGIC;
    signal y_Q_fpb_V_we0 : STD_LOGIC;
    signal y_Q_fpb_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_I_d_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_I_d_V_ce0 : STD_LOGIC;
    signal y_I_d_V_we0 : STD_LOGIC;
    signal y_I_d_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_I_d_V_ce1 : STD_LOGIC;
    signal y_I_d_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_Q_d_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_Q_d_V_ce0 : STD_LOGIC;
    signal y_Q_d_V_we0 : STD_LOGIC;
    signal y_Q_d_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_Q_d_V_ce1 : STD_LOGIC;
    signal y_Q_d_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_demod_nd_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_demod_nd_V_ce0 : STD_LOGIC;
    signal y_demod_nd_V_we0 : STD_LOGIC;
    signal y_demod_nd_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_demod_nd_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_shift_fu_271_ap_start : STD_LOGIC;
    signal grp_shift_fu_271_ap_done : STD_LOGIC;
    signal grp_shift_fu_271_ap_idle : STD_LOGIC;
    signal grp_shift_fu_271_ap_ready : STD_LOGIC;
    signal grp_shift_fu_271_ary_r_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shift_fu_271_ary_r_V_ce0 : STD_LOGIC;
    signal grp_shift_fu_271_ary_i_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shift_fu_271_ary_i_V_ce0 : STD_LOGIC;
    signal grp_shift_fu_271_ary_r_s_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shift_fu_271_ary_r_s_V_ce0 : STD_LOGIC;
    signal grp_shift_fu_271_ary_r_s_V_we0 : STD_LOGIC;
    signal grp_shift_fu_271_ary_r_s_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_shift_fu_271_ary_i_s_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shift_fu_271_ary_i_s_V_ce0 : STD_LOGIC;
    signal grp_shift_fu_271_ary_i_s_V_we0 : STD_LOGIC;
    signal grp_shift_fu_271_ary_i_s_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fir_fu_287_ap_start : STD_LOGIC;
    signal grp_fir_fu_287_ap_done : STD_LOGIC;
    signal grp_fir_fu_287_ap_idle : STD_LOGIC;
    signal grp_fir_fu_287_ap_ready : STD_LOGIC;
    signal grp_fir_fu_287_x_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fir_fu_287_x_V_ce0 : STD_LOGIC;
    signal grp_fir_fu_287_y_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fir_fu_287_y_V_ce0 : STD_LOGIC;
    signal grp_fir_fu_287_y_V_we0 : STD_LOGIC;
    signal grp_fir_fu_287_y_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fir_fu_295_ap_start : STD_LOGIC;
    signal grp_fir_fu_295_ap_done : STD_LOGIC;
    signal grp_fir_fu_295_ap_idle : STD_LOGIC;
    signal grp_fir_fu_295_ap_ready : STD_LOGIC;
    signal grp_fir_fu_295_x_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fir_fu_295_x_V_ce0 : STD_LOGIC;
    signal grp_fir_fu_295_y_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fir_fu_295_y_V_ce0 : STD_LOGIC;
    signal grp_fir_fu_295_y_V_we0 : STD_LOGIC;
    signal grp_fir_fu_295_y_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_0_i_reg_224 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_0_i3_reg_236 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal q_0_i_reg_248 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal n_0_i13_reg_259 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal grp_shift_fu_271_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fir_fu_287_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fir_fu_295_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln150_1_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_3_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_2_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln171_1_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_1_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_315_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln150_1_fu_345_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln171_fu_375_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal dii_V_fu_393_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dqq_V_fu_399_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_6_fu_411_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_6_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_7_fu_423_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_7_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_6_fu_411_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_7_fu_423_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_8_fu_435_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_8_fu_435_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_9_fu_441_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_9_fu_441_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_8_fu_435_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_9_fu_441_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_V_fu_451_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal lhs_V_fu_447_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_fu_471_p0 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_471_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal shl_ln1_fu_500_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln158_1_fu_512_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln158_3_fu_520_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln158_2_fu_508_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln158_fu_524_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_471_ap_start : STD_LOGIC;
    signal grp_fu_471_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (112 downto 0);

    component shift IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ary_r_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ary_r_V_ce0 : OUT STD_LOGIC;
        ary_r_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ary_i_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ary_i_V_ce0 : OUT STD_LOGIC;
        ary_i_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ary_r_s_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ary_r_s_V_ce0 : OUT STD_LOGIC;
        ary_r_s_V_we0 : OUT STD_LOGIC;
        ary_r_s_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ary_i_s_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ary_i_s_V_ce0 : OUT STD_LOGIC;
        ary_i_s_V_we0 : OUT STD_LOGIC;
        ary_i_s_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        x_V_ce0 : OUT STD_LOGIC;
        x_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        y_V_ce0 : OUT STD_LOGIC;
        y_V_we0 : OUT STD_LOGIC;
        y_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component demodulationFM_sdibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (95 downto 0);
        din1 : IN STD_LOGIC_VECTOR (64 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component demodulationFM_y_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component demodulationFM_y_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component demodulationFM_y_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    y_I_s_V_U : component demodulationFM_y_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 40000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_I_s_V_address0,
        ce0 => y_I_s_V_ce0,
        we0 => y_I_s_V_we0,
        d0 => grp_shift_fu_271_ary_r_s_V_d0,
        q0 => y_I_s_V_q0);

    y_Q_s_V_U : component demodulationFM_y_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 40000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_Q_s_V_address0,
        ce0 => y_Q_s_V_ce0,
        we0 => y_Q_s_V_we0,
        d0 => grp_shift_fu_271_ary_i_s_V_d0,
        q0 => y_Q_s_V_q0);

    y_I_fpb_V_U : component demodulationFM_y_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 40000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_I_fpb_V_address0,
        ce0 => y_I_fpb_V_ce0,
        we0 => y_I_fpb_V_we0,
        d0 => grp_fir_fu_287_y_V_d0,
        q0 => y_I_fpb_V_q0);

    y_Q_fpb_V_U : component demodulationFM_y_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 40000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_Q_fpb_V_address0,
        ce0 => y_Q_fpb_V_ce0,
        we0 => y_Q_fpb_V_we0,
        d0 => grp_fir_fu_295_y_V_d0,
        q0 => y_Q_fpb_V_q0);

    y_I_d_V_U : component demodulationFM_y_fYi
    generic map (
        DataWidth => 32,
        AddressRange => 5000,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_I_d_V_address0,
        ce0 => y_I_d_V_ce0,
        we0 => y_I_d_V_we0,
        d0 => y_I_fpb_V_q0,
        q0 => y_I_d_V_q0,
        address1 => y_I_d_V_address1,
        ce1 => y_I_d_V_ce1,
        q1 => y_I_d_V_q1);

    y_Q_d_V_U : component demodulationFM_y_fYi
    generic map (
        DataWidth => 32,
        AddressRange => 5000,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_Q_d_V_address0,
        ce0 => y_Q_d_V_ce0,
        we0 => y_Q_d_V_we0,
        d0 => y_Q_fpb_V_q0,
        q0 => y_Q_d_V_q0,
        address1 => y_Q_d_V_address1,
        ce1 => y_Q_d_V_ce1,
        q1 => y_Q_d_V_q1);

    y_demod_nd_V_U : component demodulationFM_y_hbi
    generic map (
        DataWidth => 32,
        AddressRange => 5000,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_demod_nd_V_address0,
        ce0 => y_demod_nd_V_ce0,
        we0 => y_demod_nd_V_we0,
        d0 => y_demod_nd_V_d0,
        q0 => y_demod_nd_V_q0);

    grp_shift_fu_271 : component shift
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shift_fu_271_ap_start,
        ap_done => grp_shift_fu_271_ap_done,
        ap_idle => grp_shift_fu_271_ap_idle,
        ap_ready => grp_shift_fu_271_ap_ready,
        ary_r_V_address0 => grp_shift_fu_271_ary_r_V_address0,
        ary_r_V_ce0 => grp_shift_fu_271_ary_r_V_ce0,
        ary_r_V_q0 => y_I_V_q0,
        ary_i_V_address0 => grp_shift_fu_271_ary_i_V_address0,
        ary_i_V_ce0 => grp_shift_fu_271_ary_i_V_ce0,
        ary_i_V_q0 => y_Q_V_q0,
        ary_r_s_V_address0 => grp_shift_fu_271_ary_r_s_V_address0,
        ary_r_s_V_ce0 => grp_shift_fu_271_ary_r_s_V_ce0,
        ary_r_s_V_we0 => grp_shift_fu_271_ary_r_s_V_we0,
        ary_r_s_V_d0 => grp_shift_fu_271_ary_r_s_V_d0,
        ary_i_s_V_address0 => grp_shift_fu_271_ary_i_s_V_address0,
        ary_i_s_V_ce0 => grp_shift_fu_271_ary_i_s_V_ce0,
        ary_i_s_V_we0 => grp_shift_fu_271_ary_i_s_V_we0,
        ary_i_s_V_d0 => grp_shift_fu_271_ary_i_s_V_d0);

    grp_fir_fu_287 : component fir
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fir_fu_287_ap_start,
        ap_done => grp_fir_fu_287_ap_done,
        ap_idle => grp_fir_fu_287_ap_idle,
        ap_ready => grp_fir_fu_287_ap_ready,
        x_V_address0 => grp_fir_fu_287_x_V_address0,
        x_V_ce0 => grp_fir_fu_287_x_V_ce0,
        x_V_q0 => y_I_s_V_q0,
        y_V_address0 => grp_fir_fu_287_y_V_address0,
        y_V_ce0 => grp_fir_fu_287_y_V_ce0,
        y_V_we0 => grp_fir_fu_287_y_V_we0,
        y_V_d0 => grp_fir_fu_287_y_V_d0);

    grp_fir_fu_295 : component fir
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fir_fu_295_ap_start,
        ap_done => grp_fir_fu_295_ap_done,
        ap_idle => grp_fir_fu_295_ap_idle,
        ap_ready => grp_fir_fu_295_ap_ready,
        x_V_address0 => grp_fir_fu_295_x_V_address0,
        x_V_ce0 => grp_fir_fu_295_x_V_ce0,
        x_V_q0 => y_Q_s_V_q0,
        y_V_address0 => grp_fir_fu_295_y_V_address0,
        y_V_ce0 => grp_fir_fu_295_y_V_ce0,
        y_V_we0 => grp_fir_fu_295_y_V_we0,
        y_V_d0 => grp_fir_fu_295_y_V_d0);

    demodulationFM_sdibs_U10 : component demodulationFM_sdibs
    generic map (
        ID => 1,
        NUM_STAGE => 100,
        din0_WIDTH => 96,
        din1_WIDTH => 65,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_471_ap_start,
        done => grp_fu_471_ap_done,
        din0 => grp_fu_471_p0,
        din1 => ret_V_2_reg_624,
        ce => ap_const_logic_1,
        dout => grp_fu_471_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_fir_fu_287_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fir_fu_287_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_fir_fu_287_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fir_fu_287_ap_ready = ap_const_logic_1)) then 
                    grp_fir_fu_287_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fir_fu_295_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fir_fu_295_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_fir_fu_295_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fir_fu_295_ap_ready = ap_const_logic_1)) then 
                    grp_fir_fu_295_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shift_fu_271_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shift_fu_271_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_shift_fu_271_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shift_fu_271_ap_ready = ap_const_logic_1)) then 
                    grp_shift_fu_271_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    n_0_i13_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln169_fu_363_p2 = ap_const_lv1_1))) then 
                n_0_i13_reg_259 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
                n_0_i13_reg_259 <= n_2_reg_642;
            end if; 
        end if;
    end process;

    n_0_i3_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln148_fu_303_p2 = ap_const_lv1_1))) then 
                n_0_i3_reg_236 <= ap_const_lv13_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                n_0_i3_reg_236 <= n_1_reg_556;
            end if; 
        end if;
    end process;

    n_0_i_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                n_0_i_reg_224 <= n_reg_543;
            elsif (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                n_0_i_reg_224 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    q_0_i_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
                q_0_i_reg_248 <= q_reg_594;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln148_1_fu_333_p2 = ap_const_lv1_1))) then 
                q_0_i_reg_248 <= ap_const_lv13_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                dii_V_reg_604 <= dii_V_fu_393_p2;
                dqq_V_reg_614 <= dqq_V_fu_399_p2;
                p_Val2_11_reg_609 <= y_Q_d_V_q0;
                p_Val2_s_reg_599 <= y_I_d_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                n_1_reg_556 <= n_1_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state112)) then
                n_2_reg_642 <= n_2_fu_494_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                n_reg_543 <= n_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln169_fu_363_p2 = ap_const_lv1_0))) then
                q_reg_594 <= q_fu_387_p2;
                    zext_ln171_reg_569(12 downto 0) <= zext_ln171_fu_369_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                ret_V_2_reg_624 <= ret_V_2_fu_455_p2;
                ret_V_reg_619 <= ret_V_fu_429_p2;
            end if;
        end if;
    end process;
    zext_ln171_reg_569(63 downto 13) <= "000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln148_fu_303_p2, ap_CS_fsm_state7, icmp_ln148_1_fu_333_p2, ap_CS_fsm_state9, icmp_ln169_fu_363_p2, ap_CS_fsm_state112, icmp_ln156_fu_488_p2, grp_shift_fu_271_ap_done, ap_CS_fsm_state4, ap_block_state4_on_subcall_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_shift_fu_271_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln148_fu_303_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln148_1_fu_333_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln169_fu_363_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state112;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state112 => 
                if (((icmp_ln156_fu_488_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state113;
                end if;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln158_fu_524_p2 <= std_logic_vector(unsigned(zext_ln158_3_fu_520_p1) + unsigned(zext_ln158_2_fu_508_p1));
    add_ln171_fu_375_p2 <= std_logic_vector(unsigned(q_0_i_reg_248) + unsigned(ap_const_lv13_1FFF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state4_on_subcall_done_assign_proc : process(grp_fir_fu_287_ap_done, grp_fir_fu_295_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_fir_fu_295_ap_done = ap_const_logic_0) or (grp_fir_fu_287_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state112, icmp_ln156_fu_488_p2)
    begin
        if (((icmp_ln156_fu_488_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state112, icmp_ln156_fu_488_p2)
    begin
        if (((icmp_ln156_fu_488_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;
    dii_V_fu_393_p0 <= y_I_d_V_q0;
    dii_V_fu_393_p2 <= std_logic_vector(signed(dii_V_fu_393_p0) - signed(y_I_d_V_q1));
    dqq_V_fu_399_p0 <= y_Q_d_V_q0;
    dqq_V_fu_399_p2 <= std_logic_vector(signed(dqq_V_fu_399_p0) - signed(y_Q_d_V_q1));
    grp_fir_fu_287_ap_start <= grp_fir_fu_287_ap_start_reg;
    grp_fir_fu_295_ap_start <= grp_fir_fu_295_ap_start_reg;

    grp_fu_471_ap_start_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_471_ap_start <= ap_const_logic_1;
        else 
            grp_fu_471_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_471_p0 <= (ret_V_reg_619 & ap_const_lv32_0);
    grp_shift_fu_271_ap_start <= grp_shift_fu_271_ap_start_reg;
    icmp_ln148_1_fu_333_p2 <= "1" when (n_0_i3_reg_236 = ap_const_lv13_1388) else "0";
    icmp_ln148_fu_303_p2 <= "1" when (n_0_i_reg_224 = ap_const_lv13_1388) else "0";
    icmp_ln156_fu_488_p2 <= "1" when (n_0_i13_reg_259 = ap_const_lv9_1F4) else "0";
    icmp_ln169_fu_363_p2 <= "1" when (q_0_i_reg_248 = ap_const_lv13_1388) else "0";
        lhs_V_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_8_fu_435_p2),65));

    n_1_fu_339_p2 <= std_logic_vector(unsigned(n_0_i3_reg_236) + unsigned(ap_const_lv13_1));
    n_2_fu_494_p2 <= std_logic_vector(unsigned(n_0_i13_reg_259) + unsigned(ap_const_lv9_1));
    n_fu_309_p2 <= std_logic_vector(unsigned(n_0_i_reg_224) + unsigned(ap_const_lv13_1));
    q_fu_387_p2 <= std_logic_vector(unsigned(q_0_i_reg_248) + unsigned(ap_const_lv13_1));
        r_V_2_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_11_reg_609),64));

    r_V_6_fu_411_p0 <= dqq_V_reg_614;
    r_V_6_fu_411_p1 <= r_V_fu_405_p1(32 - 1 downto 0);
    r_V_6_fu_411_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_6_fu_411_p0) * signed(r_V_6_fu_411_p1))), 64));
    r_V_7_fu_423_p0 <= r_V_2_fu_417_p1(32 - 1 downto 0);
    r_V_7_fu_423_p1 <= dii_V_reg_604;
    r_V_7_fu_423_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_7_fu_423_p0) * signed(r_V_7_fu_423_p1))), 64));
    r_V_8_fu_435_p0 <= r_V_fu_405_p1(32 - 1 downto 0);
    r_V_8_fu_435_p1 <= r_V_fu_405_p1(32 - 1 downto 0);
    r_V_8_fu_435_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_8_fu_435_p0) * signed(r_V_8_fu_435_p1))), 64));
    r_V_9_fu_441_p0 <= r_V_2_fu_417_p1(32 - 1 downto 0);
    r_V_9_fu_441_p1 <= r_V_2_fu_417_p1(32 - 1 downto 0);
    r_V_9_fu_441_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_9_fu_441_p0) * signed(r_V_9_fu_441_p1))), 64));
        r_V_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_599),64));

    ret_V_2_fu_455_p2 <= std_logic_vector(signed(rhs_V_fu_451_p1) + signed(lhs_V_fu_447_p1));
    ret_V_fu_429_p2 <= std_logic_vector(unsigned(r_V_6_fu_411_p2) - unsigned(r_V_7_fu_423_p2));
        rhs_V_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_9_fu_441_p2),65));

    shl_ln150_1_fu_345_p3 <= (n_0_i3_reg_236 & ap_const_lv3_0);
    shl_ln158_1_fu_512_p3 <= (n_0_i13_reg_259 & ap_const_lv1_0);
    shl_ln1_fu_500_p3 <= (n_0_i13_reg_259 & ap_const_lv3_0);
    shl_ln_fu_315_p3 <= (n_0_i_reg_224 & ap_const_lv3_0);
    y_I_V_address0 <= grp_shift_fu_271_ary_r_V_address0;
    y_I_V_ce0 <= grp_shift_fu_271_ary_r_V_ce0;

    y_I_d_V_address0_assign_proc : process(zext_ln171_fu_369_p1, ap_CS_fsm_state9, ap_CS_fsm_state6, zext_ln150_fu_328_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            y_I_d_V_address0 <= zext_ln171_fu_369_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            y_I_d_V_address0 <= zext_ln150_fu_328_p1(13 - 1 downto 0);
        else 
            y_I_d_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    y_I_d_V_address1 <= zext_ln171_1_fu_381_p1(13 - 1 downto 0);

    y_I_d_V_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            y_I_d_V_ce0 <= ap_const_logic_1;
        else 
            y_I_d_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_I_d_V_ce1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            y_I_d_V_ce1 <= ap_const_logic_1;
        else 
            y_I_d_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_I_d_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            y_I_d_V_we0 <= ap_const_logic_1;
        else 
            y_I_d_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_I_fpb_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_fir_fu_287_y_V_address0, ap_CS_fsm_state4, zext_ln150_1_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_I_fpb_V_address0 <= zext_ln150_1_fu_323_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_I_fpb_V_address0 <= grp_fir_fu_287_y_V_address0;
        else 
            y_I_fpb_V_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_I_fpb_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_fir_fu_287_y_V_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_I_fpb_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_I_fpb_V_ce0 <= grp_fir_fu_287_y_V_ce0;
        else 
            y_I_fpb_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_I_fpb_V_we0_assign_proc : process(grp_fir_fu_287_y_V_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_I_fpb_V_we0 <= grp_fir_fu_287_y_V_we0;
        else 
            y_I_fpb_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_I_s_V_address0_assign_proc : process(grp_shift_fu_271_ary_r_s_V_address0, grp_fir_fu_287_x_V_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_I_s_V_address0 <= grp_fir_fu_287_x_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            y_I_s_V_address0 <= grp_shift_fu_271_ary_r_s_V_address0;
        else 
            y_I_s_V_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_I_s_V_ce0_assign_proc : process(grp_shift_fu_271_ary_r_s_V_ce0, grp_fir_fu_287_x_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_I_s_V_ce0 <= grp_fir_fu_287_x_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            y_I_s_V_ce0 <= grp_shift_fu_271_ary_r_s_V_ce0;
        else 
            y_I_s_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_I_s_V_we0_assign_proc : process(grp_shift_fu_271_ary_r_s_V_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            y_I_s_V_we0 <= grp_shift_fu_271_ary_r_s_V_we0;
        else 
            y_I_s_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    y_Q_V_address0 <= grp_shift_fu_271_ary_i_V_address0;
    y_Q_V_ce0 <= grp_shift_fu_271_ary_i_V_ce0;

    y_Q_d_V_address0_assign_proc : process(zext_ln171_fu_369_p1, ap_CS_fsm_state9, ap_CS_fsm_state8, zext_ln150_2_fu_358_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            y_Q_d_V_address0 <= zext_ln171_fu_369_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_Q_d_V_address0 <= zext_ln150_2_fu_358_p1(13 - 1 downto 0);
        else 
            y_Q_d_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    y_Q_d_V_address1 <= zext_ln171_1_fu_381_p1(13 - 1 downto 0);

    y_Q_d_V_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            y_Q_d_V_ce0 <= ap_const_logic_1;
        else 
            y_Q_d_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_Q_d_V_ce1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            y_Q_d_V_ce1 <= ap_const_logic_1;
        else 
            y_Q_d_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_Q_d_V_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_Q_d_V_we0 <= ap_const_logic_1;
        else 
            y_Q_d_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_Q_fpb_V_address0_assign_proc : process(ap_CS_fsm_state7, grp_fir_fu_295_y_V_address0, ap_CS_fsm_state4, zext_ln150_3_fu_353_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            y_Q_fpb_V_address0 <= zext_ln150_3_fu_353_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_Q_fpb_V_address0 <= grp_fir_fu_295_y_V_address0;
        else 
            y_Q_fpb_V_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_Q_fpb_V_ce0_assign_proc : process(ap_CS_fsm_state7, grp_fir_fu_295_y_V_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            y_Q_fpb_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_Q_fpb_V_ce0 <= grp_fir_fu_295_y_V_ce0;
        else 
            y_Q_fpb_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_Q_fpb_V_we0_assign_proc : process(grp_fir_fu_295_y_V_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_Q_fpb_V_we0 <= grp_fir_fu_295_y_V_we0;
        else 
            y_Q_fpb_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_Q_s_V_address0_assign_proc : process(grp_shift_fu_271_ary_i_s_V_address0, grp_fir_fu_295_x_V_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_Q_s_V_address0 <= grp_fir_fu_295_x_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            y_Q_s_V_address0 <= grp_shift_fu_271_ary_i_s_V_address0;
        else 
            y_Q_s_V_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_Q_s_V_ce0_assign_proc : process(grp_shift_fu_271_ary_i_s_V_ce0, grp_fir_fu_295_x_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_Q_s_V_ce0 <= grp_fir_fu_295_x_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            y_Q_s_V_ce0 <= grp_shift_fu_271_ary_i_s_V_ce0;
        else 
            y_Q_s_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_Q_s_V_we0_assign_proc : process(grp_shift_fu_271_ary_i_s_V_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            y_Q_s_V_we0 <= grp_shift_fu_271_ary_i_s_V_we0;
        else 
            y_Q_s_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    y_demod_d_V_address0 <= zext_ln158_fu_535_p1(16 - 1 downto 0);

    y_demod_d_V_ce0_assign_proc : process(ap_CS_fsm_state113)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            y_demod_d_V_ce0 <= ap_const_logic_1;
        else 
            y_demod_d_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_demod_d_V_d0 <= y_demod_nd_V_q0;

    y_demod_d_V_we0_assign_proc : process(ap_CS_fsm_state113)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            y_demod_d_V_we0 <= ap_const_logic_1;
        else 
            y_demod_d_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_demod_nd_V_address0_assign_proc : process(ap_CS_fsm_state7, zext_ln171_reg_569, ap_CS_fsm_state112, ap_CS_fsm_state111, zext_ln158_1_fu_530_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            y_demod_nd_V_address0 <= zext_ln158_1_fu_530_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            y_demod_nd_V_address0 <= zext_ln171_reg_569(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            y_demod_nd_V_address0 <= ap_const_lv64_0(13 - 1 downto 0);
        else 
            y_demod_nd_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    y_demod_nd_V_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state112, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            y_demod_nd_V_ce0 <= ap_const_logic_1;
        else 
            y_demod_nd_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_demod_nd_V_d0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state111, grp_fu_471_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            y_demod_nd_V_d0 <= grp_fu_471_p2(47 downto 16);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            y_demod_nd_V_d0 <= ap_const_lv32_0;
        else 
            y_demod_nd_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_demod_nd_V_we0_assign_proc : process(ap_CS_fsm_state7, icmp_ln148_1_fu_333_p2, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln148_1_fu_333_p2 = ap_const_lv1_1)))) then 
            y_demod_nd_V_we0 <= ap_const_logic_1;
        else 
            y_demod_nd_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln150_1_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_315_p3),64));
    zext_ln150_2_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_i3_reg_236),64));
    zext_ln150_3_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln150_1_fu_345_p3),64));
    zext_ln150_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_i_reg_224),64));
    zext_ln158_1_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln158_fu_524_p2),64));
    zext_ln158_2_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_500_p3),13));
    zext_ln158_3_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln158_1_fu_512_p3),13));
    zext_ln158_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_i13_reg_259),64));
    zext_ln171_1_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln171_fu_375_p2),64));
    zext_ln171_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q_0_i_reg_248),64));
end behav;
