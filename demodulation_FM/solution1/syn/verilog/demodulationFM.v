// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="demodulationFM,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.566000,HLS_SYN_LAT=4533024,HLS_SYN_TPT=none,HLS_SYN_MEM=560,HLS_SYN_DSP=32,HLS_SYN_FF=1895,HLS_SYN_LUT=2982,HLS_VERSION=2019_2}" *)

module demodulationFM (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y_I_V_address0,
        y_I_V_ce0,
        y_I_V_q0,
        y_Q_V_address0,
        y_Q_V_ce0,
        y_Q_V_q0,
        y_demod_d_V_address0,
        y_demod_d_V_ce0,
        y_demod_d_V_we0,
        y_demod_d_V_d0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 113'd1;
parameter    ap_ST_fsm_state2 = 113'd2;
parameter    ap_ST_fsm_state3 = 113'd4;
parameter    ap_ST_fsm_state4 = 113'd8;
parameter    ap_ST_fsm_state5 = 113'd16;
parameter    ap_ST_fsm_state6 = 113'd32;
parameter    ap_ST_fsm_state7 = 113'd64;
parameter    ap_ST_fsm_state8 = 113'd128;
parameter    ap_ST_fsm_state9 = 113'd256;
parameter    ap_ST_fsm_state10 = 113'd512;
parameter    ap_ST_fsm_state11 = 113'd1024;
parameter    ap_ST_fsm_state12 = 113'd2048;
parameter    ap_ST_fsm_state13 = 113'd4096;
parameter    ap_ST_fsm_state14 = 113'd8192;
parameter    ap_ST_fsm_state15 = 113'd16384;
parameter    ap_ST_fsm_state16 = 113'd32768;
parameter    ap_ST_fsm_state17 = 113'd65536;
parameter    ap_ST_fsm_state18 = 113'd131072;
parameter    ap_ST_fsm_state19 = 113'd262144;
parameter    ap_ST_fsm_state20 = 113'd524288;
parameter    ap_ST_fsm_state21 = 113'd1048576;
parameter    ap_ST_fsm_state22 = 113'd2097152;
parameter    ap_ST_fsm_state23 = 113'd4194304;
parameter    ap_ST_fsm_state24 = 113'd8388608;
parameter    ap_ST_fsm_state25 = 113'd16777216;
parameter    ap_ST_fsm_state26 = 113'd33554432;
parameter    ap_ST_fsm_state27 = 113'd67108864;
parameter    ap_ST_fsm_state28 = 113'd134217728;
parameter    ap_ST_fsm_state29 = 113'd268435456;
parameter    ap_ST_fsm_state30 = 113'd536870912;
parameter    ap_ST_fsm_state31 = 113'd1073741824;
parameter    ap_ST_fsm_state32 = 113'd2147483648;
parameter    ap_ST_fsm_state33 = 113'd4294967296;
parameter    ap_ST_fsm_state34 = 113'd8589934592;
parameter    ap_ST_fsm_state35 = 113'd17179869184;
parameter    ap_ST_fsm_state36 = 113'd34359738368;
parameter    ap_ST_fsm_state37 = 113'd68719476736;
parameter    ap_ST_fsm_state38 = 113'd137438953472;
parameter    ap_ST_fsm_state39 = 113'd274877906944;
parameter    ap_ST_fsm_state40 = 113'd549755813888;
parameter    ap_ST_fsm_state41 = 113'd1099511627776;
parameter    ap_ST_fsm_state42 = 113'd2199023255552;
parameter    ap_ST_fsm_state43 = 113'd4398046511104;
parameter    ap_ST_fsm_state44 = 113'd8796093022208;
parameter    ap_ST_fsm_state45 = 113'd17592186044416;
parameter    ap_ST_fsm_state46 = 113'd35184372088832;
parameter    ap_ST_fsm_state47 = 113'd70368744177664;
parameter    ap_ST_fsm_state48 = 113'd140737488355328;
parameter    ap_ST_fsm_state49 = 113'd281474976710656;
parameter    ap_ST_fsm_state50 = 113'd562949953421312;
parameter    ap_ST_fsm_state51 = 113'd1125899906842624;
parameter    ap_ST_fsm_state52 = 113'd2251799813685248;
parameter    ap_ST_fsm_state53 = 113'd4503599627370496;
parameter    ap_ST_fsm_state54 = 113'd9007199254740992;
parameter    ap_ST_fsm_state55 = 113'd18014398509481984;
parameter    ap_ST_fsm_state56 = 113'd36028797018963968;
parameter    ap_ST_fsm_state57 = 113'd72057594037927936;
parameter    ap_ST_fsm_state58 = 113'd144115188075855872;
parameter    ap_ST_fsm_state59 = 113'd288230376151711744;
parameter    ap_ST_fsm_state60 = 113'd576460752303423488;
parameter    ap_ST_fsm_state61 = 113'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 113'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 113'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 113'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 113'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 113'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 113'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 113'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 113'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 113'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 113'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 113'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 113'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 113'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 113'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 113'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 113'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 113'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 113'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 113'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 113'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 113'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 113'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 113'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 113'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 113'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 113'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 113'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 113'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 113'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 113'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 113'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 113'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 113'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 113'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 113'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 113'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 113'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 113'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 113'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 113'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 113'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 113'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 113'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 113'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 113'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 113'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 113'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 113'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 113'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 113'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 113'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 113'd5192296858534827628530496329220096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] y_I_V_address0;
output   y_I_V_ce0;
input  [31:0] y_I_V_q0;
output  [15:0] y_Q_V_address0;
output   y_Q_V_ce0;
input  [31:0] y_Q_V_q0;
output  [15:0] y_demod_d_V_address0;
output   y_demod_d_V_ce0;
output   y_demod_d_V_we0;
output  [31:0] y_demod_d_V_d0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_demod_d_V_ce0;
reg y_demod_d_V_we0;

(* fsm_encoding = "none" *) reg   [112:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [12:0] n_fu_309_p2;
reg   [12:0] n_reg_543;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln148_fu_303_p2;
wire   [12:0] n_1_fu_339_p2;
reg   [12:0] n_1_reg_556;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln148_1_fu_333_p2;
wire   [63:0] zext_ln171_fu_369_p1;
reg   [63:0] zext_ln171_reg_569;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln169_fu_363_p2;
wire   [12:0] q_fu_387_p2;
reg   [12:0] q_reg_594;
wire   [31:0] y_I_d_V_q0;
reg  signed [31:0] p_Val2_s_reg_599;
wire    ap_CS_fsm_state10;
wire   [31:0] dii_V_fu_393_p2;
reg   [31:0] dii_V_reg_604;
wire   [31:0] y_Q_d_V_q0;
reg  signed [31:0] p_Val2_11_reg_609;
wire   [31:0] dqq_V_fu_399_p2;
reg   [31:0] dqq_V_reg_614;
wire   [63:0] ret_V_fu_429_p2;
reg   [63:0] ret_V_reg_619;
wire    ap_CS_fsm_state11;
wire   [64:0] ret_V_2_fu_455_p2;
reg  signed [64:0] ret_V_2_reg_624;
wire    ap_CS_fsm_state12;
wire   [8:0] n_2_fu_494_p2;
reg   [8:0] n_2_reg_642;
wire    ap_CS_fsm_state112;
wire   [0:0] icmp_ln156_fu_488_p2;
reg   [15:0] y_I_s_V_address0;
reg    y_I_s_V_ce0;
reg    y_I_s_V_we0;
wire   [31:0] y_I_s_V_q0;
reg   [15:0] y_Q_s_V_address0;
reg    y_Q_s_V_ce0;
reg    y_Q_s_V_we0;
wire   [31:0] y_Q_s_V_q0;
reg   [15:0] y_I_fpb_V_address0;
reg    y_I_fpb_V_ce0;
reg    y_I_fpb_V_we0;
wire   [31:0] y_I_fpb_V_q0;
reg   [15:0] y_Q_fpb_V_address0;
reg    y_Q_fpb_V_ce0;
reg    y_Q_fpb_V_we0;
wire   [31:0] y_Q_fpb_V_q0;
reg   [12:0] y_I_d_V_address0;
reg    y_I_d_V_ce0;
reg    y_I_d_V_we0;
wire   [12:0] y_I_d_V_address1;
reg    y_I_d_V_ce1;
wire   [31:0] y_I_d_V_q1;
reg   [12:0] y_Q_d_V_address0;
reg    y_Q_d_V_ce0;
reg    y_Q_d_V_we0;
wire   [12:0] y_Q_d_V_address1;
reg    y_Q_d_V_ce1;
wire   [31:0] y_Q_d_V_q1;
reg   [12:0] y_demod_nd_V_address0;
reg    y_demod_nd_V_ce0;
reg    y_demod_nd_V_we0;
reg   [31:0] y_demod_nd_V_d0;
wire   [31:0] y_demod_nd_V_q0;
wire    grp_shift_fu_271_ap_start;
wire    grp_shift_fu_271_ap_done;
wire    grp_shift_fu_271_ap_idle;
wire    grp_shift_fu_271_ap_ready;
wire   [15:0] grp_shift_fu_271_ary_r_V_address0;
wire    grp_shift_fu_271_ary_r_V_ce0;
wire   [15:0] grp_shift_fu_271_ary_i_V_address0;
wire    grp_shift_fu_271_ary_i_V_ce0;
wire   [15:0] grp_shift_fu_271_ary_r_s_V_address0;
wire    grp_shift_fu_271_ary_r_s_V_ce0;
wire    grp_shift_fu_271_ary_r_s_V_we0;
wire   [31:0] grp_shift_fu_271_ary_r_s_V_d0;
wire   [15:0] grp_shift_fu_271_ary_i_s_V_address0;
wire    grp_shift_fu_271_ary_i_s_V_ce0;
wire    grp_shift_fu_271_ary_i_s_V_we0;
wire   [31:0] grp_shift_fu_271_ary_i_s_V_d0;
wire    grp_fir_fu_287_ap_start;
wire    grp_fir_fu_287_ap_done;
wire    grp_fir_fu_287_ap_idle;
wire    grp_fir_fu_287_ap_ready;
wire   [15:0] grp_fir_fu_287_x_V_address0;
wire    grp_fir_fu_287_x_V_ce0;
wire   [15:0] grp_fir_fu_287_y_V_address0;
wire    grp_fir_fu_287_y_V_ce0;
wire    grp_fir_fu_287_y_V_we0;
wire   [31:0] grp_fir_fu_287_y_V_d0;
wire    grp_fir_fu_295_ap_start;
wire    grp_fir_fu_295_ap_done;
wire    grp_fir_fu_295_ap_idle;
wire    grp_fir_fu_295_ap_ready;
wire   [15:0] grp_fir_fu_295_x_V_address0;
wire    grp_fir_fu_295_x_V_ce0;
wire   [15:0] grp_fir_fu_295_y_V_address0;
wire    grp_fir_fu_295_y_V_ce0;
wire    grp_fir_fu_295_y_V_we0;
wire   [31:0] grp_fir_fu_295_y_V_d0;
reg   [12:0] n_0_i_reg_224;
wire    ap_CS_fsm_state4;
reg    ap_block_state4_on_subcall_done;
wire    ap_CS_fsm_state6;
reg   [12:0] n_0_i3_reg_236;
wire    ap_CS_fsm_state8;
reg   [12:0] q_0_i_reg_248;
wire    ap_CS_fsm_state111;
reg   [8:0] n_0_i13_reg_259;
wire    ap_CS_fsm_state113;
reg    grp_shift_fu_271_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_fir_fu_287_ap_start_reg;
wire    ap_CS_fsm_state3;
reg    grp_fir_fu_295_ap_start_reg;
wire   [63:0] zext_ln150_1_fu_323_p1;
wire   [63:0] zext_ln150_fu_328_p1;
wire   [63:0] zext_ln150_3_fu_353_p1;
wire   [63:0] zext_ln150_2_fu_358_p1;
wire   [63:0] zext_ln171_1_fu_381_p1;
wire   [63:0] zext_ln158_1_fu_530_p1;
wire   [63:0] zext_ln158_fu_535_p1;
wire   [15:0] shl_ln_fu_315_p3;
wire   [15:0] shl_ln150_1_fu_345_p3;
wire   [12:0] add_ln171_fu_375_p2;
wire  signed [31:0] dii_V_fu_393_p0;
wire  signed [31:0] dqq_V_fu_399_p0;
wire  signed [31:0] r_V_6_fu_411_p0;
wire  signed [31:0] r_V_6_fu_411_p1;
wire  signed [63:0] r_V_fu_405_p1;
wire  signed [31:0] r_V_7_fu_423_p0;
wire  signed [63:0] r_V_2_fu_417_p1;
wire  signed [31:0] r_V_7_fu_423_p1;
wire   [63:0] r_V_6_fu_411_p2;
wire   [63:0] r_V_7_fu_423_p2;
wire  signed [31:0] r_V_8_fu_435_p0;
wire  signed [31:0] r_V_8_fu_435_p1;
wire  signed [31:0] r_V_9_fu_441_p0;
wire  signed [31:0] r_V_9_fu_441_p1;
wire   [63:0] r_V_8_fu_435_p2;
wire   [63:0] r_V_9_fu_441_p2;
wire  signed [64:0] rhs_V_fu_451_p1;
wire  signed [64:0] lhs_V_fu_447_p1;
wire   [95:0] grp_fu_471_p0;
wire   [95:0] grp_fu_471_p2;
wire   [11:0] shl_ln1_fu_500_p3;
wire   [9:0] shl_ln158_1_fu_512_p3;
wire   [12:0] zext_ln158_3_fu_520_p1;
wire   [12:0] zext_ln158_2_fu_508_p1;
wire   [12:0] add_ln158_fu_524_p2;
reg    grp_fu_471_ap_start;
wire    grp_fu_471_ap_done;
reg   [112:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 113'd1;
#0 grp_shift_fu_271_ap_start_reg = 1'b0;
#0 grp_fir_fu_287_ap_start_reg = 1'b0;
#0 grp_fir_fu_295_ap_start_reg = 1'b0;
end

demodulationFM_y_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 40000 ),
    .AddressWidth( 16 ))
y_I_s_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_I_s_V_address0),
    .ce0(y_I_s_V_ce0),
    .we0(y_I_s_V_we0),
    .d0(grp_shift_fu_271_ary_r_s_V_d0),
    .q0(y_I_s_V_q0)
);

demodulationFM_y_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 40000 ),
    .AddressWidth( 16 ))
y_Q_s_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_Q_s_V_address0),
    .ce0(y_Q_s_V_ce0),
    .we0(y_Q_s_V_we0),
    .d0(grp_shift_fu_271_ary_i_s_V_d0),
    .q0(y_Q_s_V_q0)
);

demodulationFM_y_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 40000 ),
    .AddressWidth( 16 ))
y_I_fpb_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_I_fpb_V_address0),
    .ce0(y_I_fpb_V_ce0),
    .we0(y_I_fpb_V_we0),
    .d0(grp_fir_fu_287_y_V_d0),
    .q0(y_I_fpb_V_q0)
);

demodulationFM_y_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 40000 ),
    .AddressWidth( 16 ))
y_Q_fpb_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_Q_fpb_V_address0),
    .ce0(y_Q_fpb_V_ce0),
    .we0(y_Q_fpb_V_we0),
    .d0(grp_fir_fu_295_y_V_d0),
    .q0(y_Q_fpb_V_q0)
);

demodulationFM_y_fYi #(
    .DataWidth( 32 ),
    .AddressRange( 5000 ),
    .AddressWidth( 13 ))
y_I_d_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_I_d_V_address0),
    .ce0(y_I_d_V_ce0),
    .we0(y_I_d_V_we0),
    .d0(y_I_fpb_V_q0),
    .q0(y_I_d_V_q0),
    .address1(y_I_d_V_address1),
    .ce1(y_I_d_V_ce1),
    .q1(y_I_d_V_q1)
);

demodulationFM_y_fYi #(
    .DataWidth( 32 ),
    .AddressRange( 5000 ),
    .AddressWidth( 13 ))
y_Q_d_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_Q_d_V_address0),
    .ce0(y_Q_d_V_ce0),
    .we0(y_Q_d_V_we0),
    .d0(y_Q_fpb_V_q0),
    .q0(y_Q_d_V_q0),
    .address1(y_Q_d_V_address1),
    .ce1(y_Q_d_V_ce1),
    .q1(y_Q_d_V_q1)
);

demodulationFM_y_hbi #(
    .DataWidth( 32 ),
    .AddressRange( 5000 ),
    .AddressWidth( 13 ))
y_demod_nd_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_demod_nd_V_address0),
    .ce0(y_demod_nd_V_ce0),
    .we0(y_demod_nd_V_we0),
    .d0(y_demod_nd_V_d0),
    .q0(y_demod_nd_V_q0)
);

shift grp_shift_fu_271(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_shift_fu_271_ap_start),
    .ap_done(grp_shift_fu_271_ap_done),
    .ap_idle(grp_shift_fu_271_ap_idle),
    .ap_ready(grp_shift_fu_271_ap_ready),
    .ary_r_V_address0(grp_shift_fu_271_ary_r_V_address0),
    .ary_r_V_ce0(grp_shift_fu_271_ary_r_V_ce0),
    .ary_r_V_q0(y_I_V_q0),
    .ary_i_V_address0(grp_shift_fu_271_ary_i_V_address0),
    .ary_i_V_ce0(grp_shift_fu_271_ary_i_V_ce0),
    .ary_i_V_q0(y_Q_V_q0),
    .ary_r_s_V_address0(grp_shift_fu_271_ary_r_s_V_address0),
    .ary_r_s_V_ce0(grp_shift_fu_271_ary_r_s_V_ce0),
    .ary_r_s_V_we0(grp_shift_fu_271_ary_r_s_V_we0),
    .ary_r_s_V_d0(grp_shift_fu_271_ary_r_s_V_d0),
    .ary_i_s_V_address0(grp_shift_fu_271_ary_i_s_V_address0),
    .ary_i_s_V_ce0(grp_shift_fu_271_ary_i_s_V_ce0),
    .ary_i_s_V_we0(grp_shift_fu_271_ary_i_s_V_we0),
    .ary_i_s_V_d0(grp_shift_fu_271_ary_i_s_V_d0)
);

fir grp_fir_fu_287(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_fir_fu_287_ap_start),
    .ap_done(grp_fir_fu_287_ap_done),
    .ap_idle(grp_fir_fu_287_ap_idle),
    .ap_ready(grp_fir_fu_287_ap_ready),
    .x_V_address0(grp_fir_fu_287_x_V_address0),
    .x_V_ce0(grp_fir_fu_287_x_V_ce0),
    .x_V_q0(y_I_s_V_q0),
    .y_V_address0(grp_fir_fu_287_y_V_address0),
    .y_V_ce0(grp_fir_fu_287_y_V_ce0),
    .y_V_we0(grp_fir_fu_287_y_V_we0),
    .y_V_d0(grp_fir_fu_287_y_V_d0)
);

fir grp_fir_fu_295(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_fir_fu_295_ap_start),
    .ap_done(grp_fir_fu_295_ap_done),
    .ap_idle(grp_fir_fu_295_ap_idle),
    .ap_ready(grp_fir_fu_295_ap_ready),
    .x_V_address0(grp_fir_fu_295_x_V_address0),
    .x_V_ce0(grp_fir_fu_295_x_V_ce0),
    .x_V_q0(y_Q_s_V_q0),
    .y_V_address0(grp_fir_fu_295_y_V_address0),
    .y_V_ce0(grp_fir_fu_295_y_V_ce0),
    .y_V_we0(grp_fir_fu_295_y_V_we0),
    .y_V_d0(grp_fir_fu_295_y_V_d0)
);

demodulationFM_sdibs #(
    .ID( 1 ),
    .NUM_STAGE( 100 ),
    .din0_WIDTH( 96 ),
    .din1_WIDTH( 65 ),
    .dout_WIDTH( 96 ))
demodulationFM_sdibs_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_471_ap_start),
    .done(grp_fu_471_ap_done),
    .din0(grp_fu_471_p0),
    .din1(ret_V_2_reg_624),
    .ce(1'b1),
    .dout(grp_fu_471_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_fir_fu_287_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_fir_fu_287_ap_start_reg <= 1'b1;
        end else if ((grp_fir_fu_287_ap_ready == 1'b1)) begin
            grp_fir_fu_287_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_fir_fu_295_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_fir_fu_295_ap_start_reg <= 1'b1;
        end else if ((grp_fir_fu_295_ap_ready == 1'b1)) begin
            grp_fir_fu_295_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_shift_fu_271_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_shift_fu_271_ap_start_reg <= 1'b1;
        end else if ((grp_shift_fu_271_ap_ready == 1'b1)) begin
            grp_shift_fu_271_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln169_fu_363_p2 == 1'd1))) begin
        n_0_i13_reg_259 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        n_0_i13_reg_259 <= n_2_reg_642;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln148_fu_303_p2 == 1'd1))) begin
        n_0_i3_reg_236 <= 13'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        n_0_i3_reg_236 <= n_1_reg_556;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_0_i_reg_224 <= n_reg_543;
    end else if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
        n_0_i_reg_224 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        q_0_i_reg_248 <= q_reg_594;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln148_1_fu_333_p2 == 1'd1))) begin
        q_0_i_reg_248 <= 13'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dii_V_reg_604 <= dii_V_fu_393_p2;
        dqq_V_reg_614 <= dqq_V_fu_399_p2;
        p_Val2_11_reg_609 <= y_Q_d_V_q0;
        p_Val2_s_reg_599 <= y_I_d_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n_1_reg_556 <= n_1_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        n_2_reg_642 <= n_2_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        n_reg_543 <= n_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln169_fu_363_p2 == 1'd0))) begin
        q_reg_594 <= q_fu_387_p2;
        zext_ln171_reg_569[12 : 0] <= zext_ln171_fu_369_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ret_V_2_reg_624 <= ret_V_2_fu_455_p2;
        ret_V_reg_619 <= ret_V_fu_429_p2;
    end
end

always @ (*) begin
    if (((icmp_ln156_fu_488_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state112))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln156_fu_488_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state112))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_471_ap_start = 1'b1;
    end else begin
        grp_fu_471_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        y_I_d_V_address0 = zext_ln171_fu_369_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        y_I_d_V_address0 = zext_ln150_fu_328_p1;
    end else begin
        y_I_d_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9))) begin
        y_I_d_V_ce0 = 1'b1;
    end else begin
        y_I_d_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        y_I_d_V_ce1 = 1'b1;
    end else begin
        y_I_d_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_I_d_V_we0 = 1'b1;
    end else begin
        y_I_d_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_I_fpb_V_address0 = zext_ln150_1_fu_323_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        y_I_fpb_V_address0 = grp_fir_fu_287_y_V_address0;
    end else begin
        y_I_fpb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_I_fpb_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        y_I_fpb_V_ce0 = grp_fir_fu_287_y_V_ce0;
    end else begin
        y_I_fpb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_I_fpb_V_we0 = grp_fir_fu_287_y_V_we0;
    end else begin
        y_I_fpb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_I_s_V_address0 = grp_fir_fu_287_x_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_I_s_V_address0 = grp_shift_fu_271_ary_r_s_V_address0;
    end else begin
        y_I_s_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_I_s_V_ce0 = grp_fir_fu_287_x_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_I_s_V_ce0 = grp_shift_fu_271_ary_r_s_V_ce0;
    end else begin
        y_I_s_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_I_s_V_we0 = grp_shift_fu_271_ary_r_s_V_we0;
    end else begin
        y_I_s_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        y_Q_d_V_address0 = zext_ln171_fu_369_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        y_Q_d_V_address0 = zext_ln150_2_fu_358_p1;
    end else begin
        y_Q_d_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        y_Q_d_V_ce0 = 1'b1;
    end else begin
        y_Q_d_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        y_Q_d_V_ce1 = 1'b1;
    end else begin
        y_Q_d_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        y_Q_d_V_we0 = 1'b1;
    end else begin
        y_Q_d_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        y_Q_fpb_V_address0 = zext_ln150_3_fu_353_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        y_Q_fpb_V_address0 = grp_fir_fu_295_y_V_address0;
    end else begin
        y_Q_fpb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        y_Q_fpb_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        y_Q_fpb_V_ce0 = grp_fir_fu_295_y_V_ce0;
    end else begin
        y_Q_fpb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_Q_fpb_V_we0 = grp_fir_fu_295_y_V_we0;
    end else begin
        y_Q_fpb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_Q_s_V_address0 = grp_fir_fu_295_x_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_Q_s_V_address0 = grp_shift_fu_271_ary_i_s_V_address0;
    end else begin
        y_Q_s_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_Q_s_V_ce0 = grp_fir_fu_295_x_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_Q_s_V_ce0 = grp_shift_fu_271_ary_i_s_V_ce0;
    end else begin
        y_Q_s_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_Q_s_V_we0 = grp_shift_fu_271_ary_i_s_V_we0;
    end else begin
        y_Q_s_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        y_demod_d_V_ce0 = 1'b1;
    end else begin
        y_demod_d_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        y_demod_d_V_we0 = 1'b1;
    end else begin
        y_demod_d_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        y_demod_nd_V_address0 = zext_ln158_1_fu_530_p1;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        y_demod_nd_V_address0 = zext_ln171_reg_569;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        y_demod_nd_V_address0 = 64'd0;
    end else begin
        y_demod_nd_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state7))) begin
        y_demod_nd_V_ce0 = 1'b1;
    end else begin
        y_demod_nd_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        y_demod_nd_V_d0 = {{grp_fu_471_p2[47:16]}};
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        y_demod_nd_V_d0 = 32'd0;
    end else begin
        y_demod_nd_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln148_1_fu_333_p2 == 1'd1)))) begin
        y_demod_nd_V_we0 = 1'b1;
    end else begin
        y_demod_nd_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_shift_fu_271_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln148_fu_303_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln148_1_fu_333_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln169_fu_363_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state112 : begin
            if (((icmp_ln156_fu_488_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state112))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state113;
            end
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln158_fu_524_p2 = (zext_ln158_3_fu_520_p1 + zext_ln158_2_fu_508_p1);

assign add_ln171_fu_375_p2 = ($signed(q_0_i_reg_248) + $signed(13'd8191));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_fir_fu_295_ap_done == 1'b0) | (grp_fir_fu_287_ap_done == 1'b0));
end

assign ap_return = 32'd0;

assign dii_V_fu_393_p0 = y_I_d_V_q0;

assign dii_V_fu_393_p2 = ($signed(dii_V_fu_393_p0) - $signed(y_I_d_V_q1));

assign dqq_V_fu_399_p0 = y_Q_d_V_q0;

assign dqq_V_fu_399_p2 = ($signed(dqq_V_fu_399_p0) - $signed(y_Q_d_V_q1));

assign grp_fir_fu_287_ap_start = grp_fir_fu_287_ap_start_reg;

assign grp_fir_fu_295_ap_start = grp_fir_fu_295_ap_start_reg;

assign grp_fu_471_p0 = {{ret_V_reg_619}, {32'd0}};

assign grp_shift_fu_271_ap_start = grp_shift_fu_271_ap_start_reg;

assign icmp_ln148_1_fu_333_p2 = ((n_0_i3_reg_236 == 13'd5000) ? 1'b1 : 1'b0);

assign icmp_ln148_fu_303_p2 = ((n_0_i_reg_224 == 13'd5000) ? 1'b1 : 1'b0);

assign icmp_ln156_fu_488_p2 = ((n_0_i13_reg_259 == 9'd500) ? 1'b1 : 1'b0);

assign icmp_ln169_fu_363_p2 = ((q_0_i_reg_248 == 13'd5000) ? 1'b1 : 1'b0);

assign lhs_V_fu_447_p1 = $signed(r_V_8_fu_435_p2);

assign n_1_fu_339_p2 = (n_0_i3_reg_236 + 13'd1);

assign n_2_fu_494_p2 = (n_0_i13_reg_259 + 9'd1);

assign n_fu_309_p2 = (n_0_i_reg_224 + 13'd1);

assign q_fu_387_p2 = (q_0_i_reg_248 + 13'd1);

assign r_V_2_fu_417_p1 = p_Val2_11_reg_609;

assign r_V_6_fu_411_p0 = dqq_V_reg_614;

assign r_V_6_fu_411_p1 = r_V_fu_405_p1;

assign r_V_6_fu_411_p2 = ($signed(r_V_6_fu_411_p0) * $signed(r_V_6_fu_411_p1));

assign r_V_7_fu_423_p0 = r_V_2_fu_417_p1;

assign r_V_7_fu_423_p1 = dii_V_reg_604;

assign r_V_7_fu_423_p2 = ($signed(r_V_7_fu_423_p0) * $signed(r_V_7_fu_423_p1));

assign r_V_8_fu_435_p0 = r_V_fu_405_p1;

assign r_V_8_fu_435_p1 = r_V_fu_405_p1;

assign r_V_8_fu_435_p2 = ($signed(r_V_8_fu_435_p0) * $signed(r_V_8_fu_435_p1));

assign r_V_9_fu_441_p0 = r_V_2_fu_417_p1;

assign r_V_9_fu_441_p1 = r_V_2_fu_417_p1;

assign r_V_9_fu_441_p2 = ($signed(r_V_9_fu_441_p0) * $signed(r_V_9_fu_441_p1));

assign r_V_fu_405_p1 = p_Val2_s_reg_599;

assign ret_V_2_fu_455_p2 = ($signed(rhs_V_fu_451_p1) + $signed(lhs_V_fu_447_p1));

assign ret_V_fu_429_p2 = (r_V_6_fu_411_p2 - r_V_7_fu_423_p2);

assign rhs_V_fu_451_p1 = $signed(r_V_9_fu_441_p2);

assign shl_ln150_1_fu_345_p3 = {{n_0_i3_reg_236}, {3'd0}};

assign shl_ln158_1_fu_512_p3 = {{n_0_i13_reg_259}, {1'd0}};

assign shl_ln1_fu_500_p3 = {{n_0_i13_reg_259}, {3'd0}};

assign shl_ln_fu_315_p3 = {{n_0_i_reg_224}, {3'd0}};

assign y_I_V_address0 = grp_shift_fu_271_ary_r_V_address0;

assign y_I_V_ce0 = grp_shift_fu_271_ary_r_V_ce0;

assign y_I_d_V_address1 = zext_ln171_1_fu_381_p1;

assign y_Q_V_address0 = grp_shift_fu_271_ary_i_V_address0;

assign y_Q_V_ce0 = grp_shift_fu_271_ary_i_V_ce0;

assign y_Q_d_V_address1 = zext_ln171_1_fu_381_p1;

assign y_demod_d_V_address0 = zext_ln158_fu_535_p1;

assign y_demod_d_V_d0 = y_demod_nd_V_q0;

assign zext_ln150_1_fu_323_p1 = shl_ln_fu_315_p3;

assign zext_ln150_2_fu_358_p1 = n_0_i3_reg_236;

assign zext_ln150_3_fu_353_p1 = shl_ln150_1_fu_345_p3;

assign zext_ln150_fu_328_p1 = n_0_i_reg_224;

assign zext_ln158_1_fu_530_p1 = add_ln158_fu_524_p2;

assign zext_ln158_2_fu_508_p1 = shl_ln1_fu_500_p3;

assign zext_ln158_3_fu_520_p1 = shl_ln158_1_fu_512_p3;

assign zext_ln158_fu_535_p1 = n_0_i13_reg_259;

assign zext_ln171_1_fu_381_p1 = add_ln171_fu_375_p2;

assign zext_ln171_fu_369_p1 = q_0_i_reg_248;

always @ (posedge ap_clk) begin
    zext_ln171_reg_569[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
end

endmodule //demodulationFM
