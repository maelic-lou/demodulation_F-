// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shift (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ary_r_V_address0,
        ary_r_V_ce0,
        ary_r_V_q0,
        ary_i_V_address0,
        ary_i_V_ce0,
        ary_i_V_q0,
        ary_r_s_V_address0,
        ary_r_s_V_ce0,
        ary_r_s_V_we0,
        ary_r_s_V_d0,
        ary_i_s_V_address0,
        ary_i_s_V_ce0,
        ary_i_s_V_we0,
        ary_i_s_V_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] ary_r_V_address0;
output   ary_r_V_ce0;
input  [31:0] ary_r_V_q0;
output  [15:0] ary_i_V_address0;
output   ary_i_V_ce0;
input  [31:0] ary_i_V_q0;
output  [15:0] ary_r_s_V_address0;
output   ary_r_s_V_ce0;
output   ary_r_s_V_we0;
output  [31:0] ary_r_s_V_d0;
output  [15:0] ary_i_s_V_address0;
output   ary_i_s_V_ce0;
output   ary_i_s_V_we0;
output  [31:0] ary_i_s_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ary_r_V_ce0;
reg ary_i_V_ce0;
reg[15:0] ary_r_s_V_address0;
reg ary_r_s_V_ce0;
reg ary_r_s_V_we0;
reg[31:0] ary_r_s_V_d0;
reg[15:0] ary_i_s_V_address0;
reg ary_i_s_V_ce0;
reg ary_i_s_V_we0;
reg[31:0] ary_i_s_V_d0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] cos_table_address0;
reg    cos_table_ce0;
wire   [8:0] cos_table_q0;
wire   [6:0] sin_table_address0;
reg    sin_table_ce0;
wire   [8:0] sin_table_q0;
wire   [15:0] m_fu_189_p2;
reg   [15:0] m_reg_449;
wire    ap_CS_fsm_state2;
wire   [30:0] add_ln128_fu_195_p2;
reg   [30:0] add_ln128_reg_454;
wire   [0:0] icmp_ln126_fu_183_p2;
wire   [62:0] mul_ln128_fu_205_p2;
reg   [62:0] mul_ln128_reg_459;
reg   [5:0] idx_reg_464;
wire   [0:0] icmp_ln96_fu_231_p2;
reg   [0:0] icmp_ln96_reg_469;
reg   [0:0] tmp_reg_475;
wire   [0:0] icmp_ln104_fu_245_p2;
reg   [0:0] icmp_ln104_reg_482;
wire   [0:0] icmp_ln132_fu_251_p2;
reg   [0:0] icmp_ln132_reg_487;
wire   [0:0] and_ln104_fu_275_p2;
reg   [0:0] and_ln104_reg_491;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln130_fu_300_p1;
reg   [63:0] zext_ln130_reg_501;
wire   [8:0] p_Val2_1_fu_339_p3;
reg   [8:0] p_Val2_1_reg_524;
wire    ap_CS_fsm_state4;
reg   [31:0] ary_r_V_load_reg_529;
wire   [8:0] p_Val2_3_fu_358_p3;
reg   [8:0] p_Val2_3_reg_534;
reg   [31:0] ary_i_V_load_reg_539;
reg   [31:0] real_V_reg_544;
wire    ap_CS_fsm_state5;
reg   [31:0] imag_V_reg_550;
reg   [15:0] m_0_reg_160;
wire    ap_CS_fsm_state6;
reg   [30:0] phi_mul_reg_172;
wire   [63:0] zext_ln1265_fu_294_p1;
wire   [15:0] ary_r_s_V_addr_gep_fu_144_p3;
wire   [15:0] ary_i_s_V_addr_gep_fu_152_p3;
wire   [31:0] sub_ln703_fu_434_p2;
wire   [31:0] sub_ln703_1_fu_440_p2;
wire   [30:0] mul_ln128_fu_205_p1;
wire   [7:0] n_fu_221_p4;
wire   [6:0] zext_ln105_fu_266_p1;
wire   [6:0] idx_1_fu_269_p2;
wire   [6:0] trunc_ln_fu_257_p4;
wire   [6:0] idx_2_fu_279_p3;
wire   [6:0] idx_3_fu_287_p3;
wire   [0:0] xor_ln100_fu_306_p2;
wire   [0:0] xor_ln96_fu_311_p2;
wire   [0:0] and_ln100_fu_316_p2;
wire   [0:0] or_ln104_fu_322_p2;
wire   [0:0] and_ln96_fu_327_p2;
wire   [8:0] sub_ln703_2_fu_333_p2;
wire   [0:0] and_ln60_fu_347_p2;
wire   [8:0] sub_ln703_3_fu_352_p2;
wire  signed [8:0] mul_ln700_fu_378_p0;
wire  signed [39:0] sext_ln1118_1_fu_369_p1;
wire  signed [31:0] mul_ln700_fu_378_p1;
wire  signed [39:0] sext_ln1118_fu_366_p1;
wire  signed [8:0] mul_ln1192_fu_384_p0;
wire  signed [39:0] sext_ln1118_3_fu_375_p1;
wire  signed [31:0] mul_ln1192_fu_384_p1;
wire  signed [39:0] sext_ln1118_2_fu_372_p1;
wire   [39:0] mul_ln1192_fu_384_p2;
wire   [39:0] mul_ln700_fu_378_p2;
wire   [39:0] ret_V_fu_390_p2;
wire  signed [8:0] mul_ln700_1_fu_406_p0;
wire  signed [31:0] mul_ln700_1_fu_406_p1;
wire  signed [8:0] mul_ln1193_fu_412_p0;
wire  signed [31:0] mul_ln1193_fu_412_p1;
wire   [39:0] mul_ln700_1_fu_406_p2;
wire   [39:0] mul_ln1193_fu_412_p2;
wire   [39:0] ret_V_1_fu_418_p2;
reg   [5:0] ap_NS_fsm;
wire   [62:0] mul_ln128_fu_205_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

shift_cos_table #(
    .DataWidth( 9 ),
    .AddressRange( 65 ),
    .AddressWidth( 7 ))
cos_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cos_table_address0),
    .ce0(cos_table_ce0),
    .q0(cos_table_q0)
);

shift_sin_table #(
    .DataWidth( 9 ),
    .AddressRange( 65 ),
    .AddressWidth( 7 ))
sin_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sin_table_address0),
    .ce0(sin_table_ce0),
    .q0(sin_table_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        m_0_reg_160 <= m_reg_449;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_0_reg_160 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        phi_mul_reg_172 <= add_ln128_reg_454;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_172 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln126_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln128_reg_454 <= add_ln128_fu_195_p2;
        icmp_ln104_reg_482 <= icmp_ln104_fu_245_p2;
        icmp_ln132_reg_487 <= icmp_ln132_fu_251_p2;
        icmp_ln96_reg_469 <= icmp_ln96_fu_231_p2;
        idx_reg_464 <= {{mul_ln128_fu_205_p2[48:43]}};
        mul_ln128_reg_459 <= mul_ln128_fu_205_p2;
        tmp_reg_475 <= mul_ln128_fu_205_p2[32'd50];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        and_ln104_reg_491 <= and_ln104_fu_275_p2;
        zext_ln130_reg_501[15 : 0] <= zext_ln130_fu_300_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ary_i_V_load_reg_539 <= ary_i_V_q0;
        ary_r_V_load_reg_529 <= ary_r_V_q0;
        p_Val2_1_reg_524 <= p_Val2_1_fu_339_p3;
        p_Val2_3_reg_534 <= p_Val2_3_fu_358_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        imag_V_reg_550 <= {{ret_V_1_fu_418_p2[39:8]}};
        real_V_reg_544 <= {{ret_V_fu_390_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m_reg_449 <= m_fu_189_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln126_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ary_i_V_ce0 = 1'b1;
    end else begin
        ary_i_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        if ((icmp_ln132_reg_487 == 1'd1)) begin
            ary_i_s_V_address0 = ary_i_s_V_addr_gep_fu_152_p3;
        end else if ((icmp_ln132_reg_487 == 1'd0)) begin
            ary_i_s_V_address0 = zext_ln130_reg_501;
        end else begin
            ary_i_s_V_address0 = 'bx;
        end
    end else begin
        ary_i_s_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln132_reg_487 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln132_reg_487 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        ary_i_s_V_ce0 = 1'b1;
    end else begin
        ary_i_s_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        if ((icmp_ln132_reg_487 == 1'd1)) begin
            ary_i_s_V_d0 = sub_ln703_1_fu_440_p2;
        end else if ((icmp_ln132_reg_487 == 1'd0)) begin
            ary_i_s_V_d0 = imag_V_reg_550;
        end else begin
            ary_i_s_V_d0 = 'bx;
        end
    end else begin
        ary_i_s_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln132_reg_487 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln132_reg_487 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        ary_i_s_V_we0 = 1'b1;
    end else begin
        ary_i_s_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ary_r_V_ce0 = 1'b1;
    end else begin
        ary_r_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        if ((icmp_ln132_reg_487 == 1'd1)) begin
            ary_r_s_V_address0 = ary_r_s_V_addr_gep_fu_144_p3;
        end else if ((icmp_ln132_reg_487 == 1'd0)) begin
            ary_r_s_V_address0 = zext_ln130_reg_501;
        end else begin
            ary_r_s_V_address0 = 'bx;
        end
    end else begin
        ary_r_s_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln132_reg_487 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln132_reg_487 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        ary_r_s_V_ce0 = 1'b1;
    end else begin
        ary_r_s_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        if ((icmp_ln132_reg_487 == 1'd1)) begin
            ary_r_s_V_d0 = sub_ln703_fu_434_p2;
        end else if ((icmp_ln132_reg_487 == 1'd0)) begin
            ary_r_s_V_d0 = real_V_reg_544;
        end else begin
            ary_r_s_V_d0 = 'bx;
        end
    end else begin
        ary_r_s_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln132_reg_487 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln132_reg_487 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        ary_r_s_V_we0 = 1'b1;
    end else begin
        ary_r_s_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cos_table_ce0 = 1'b1;
    end else begin
        cos_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sin_table_ce0 = 1'b1;
    end else begin
        sin_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln126_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln128_fu_195_p2 = (31'd45568 + phi_mul_reg_172);

assign and_ln100_fu_316_p2 = (xor_ln96_fu_311_p2 & xor_ln100_fu_306_p2);

assign and_ln104_fu_275_p2 = (tmp_reg_475 & icmp_ln104_reg_482);

assign and_ln60_fu_347_p2 = (xor_ln96_fu_311_p2 & tmp_reg_475);

assign and_ln96_fu_327_p2 = (xor_ln96_fu_311_p2 & or_ln104_fu_322_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ary_i_V_address0 = zext_ln130_fu_300_p1;

assign ary_i_s_V_addr_gep_fu_152_p3 = zext_ln130_reg_501;

assign ary_r_V_address0 = zext_ln130_fu_300_p1;

assign ary_r_s_V_addr_gep_fu_144_p3 = zext_ln130_reg_501;

assign cos_table_address0 = zext_ln1265_fu_294_p1;

assign icmp_ln104_fu_245_p2 = ((n_fu_221_p4 < 8'd192) ? 1'b1 : 1'b0);

assign icmp_ln126_fu_183_p2 = ((m_0_reg_160 == 16'd40000) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_251_p2 = ((n_fu_221_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_231_p2 = ((n_fu_221_p4 < 8'd65) ? 1'b1 : 1'b0);

assign idx_1_fu_269_p2 = ($signed(7'd64) - $signed(zext_ln105_fu_266_p1));

assign idx_2_fu_279_p3 = ((and_ln104_fu_275_p2[0:0] === 1'b1) ? zext_ln105_fu_266_p1 : idx_1_fu_269_p2);

assign idx_3_fu_287_p3 = ((icmp_ln96_reg_469[0:0] === 1'b1) ? trunc_ln_fu_257_p4 : idx_2_fu_279_p3);

assign m_fu_189_p2 = (m_0_reg_160 + 16'd1);

assign mul_ln1192_fu_384_p0 = sext_ln1118_3_fu_375_p1;

assign mul_ln1192_fu_384_p1 = sext_ln1118_2_fu_372_p1;

assign mul_ln1192_fu_384_p2 = ($signed(mul_ln1192_fu_384_p0) * $signed(mul_ln1192_fu_384_p1));

assign mul_ln1193_fu_412_p0 = sext_ln1118_3_fu_375_p1;

assign mul_ln1193_fu_412_p1 = sext_ln1118_fu_366_p1;

assign mul_ln1193_fu_412_p2 = ($signed(mul_ln1193_fu_412_p0) * $signed(mul_ln1193_fu_412_p1));

assign mul_ln128_fu_205_p1 = mul_ln128_fu_205_p10;

assign mul_ln128_fu_205_p10 = phi_mul_reg_172;

assign mul_ln128_fu_205_p2 = (63'd3518437209 * mul_ln128_fu_205_p1);

assign mul_ln700_1_fu_406_p0 = sext_ln1118_1_fu_369_p1;

assign mul_ln700_1_fu_406_p1 = sext_ln1118_2_fu_372_p1;

assign mul_ln700_1_fu_406_p2 = ($signed(mul_ln700_1_fu_406_p0) * $signed(mul_ln700_1_fu_406_p1));

assign mul_ln700_fu_378_p0 = sext_ln1118_1_fu_369_p1;

assign mul_ln700_fu_378_p1 = sext_ln1118_fu_366_p1;

assign mul_ln700_fu_378_p2 = ($signed(mul_ln700_fu_378_p0) * $signed(mul_ln700_fu_378_p1));

assign n_fu_221_p4 = {{mul_ln128_fu_205_p2[50:43]}};

assign or_ln104_fu_322_p2 = (and_ln104_reg_491 | and_ln100_fu_316_p2);

assign p_Val2_1_fu_339_p3 = ((and_ln96_fu_327_p2[0:0] === 1'b1) ? sub_ln703_2_fu_333_p2 : cos_table_q0);

assign p_Val2_3_fu_358_p3 = ((and_ln60_fu_347_p2[0:0] === 1'b1) ? sub_ln703_3_fu_352_p2 : sin_table_q0);

assign ret_V_1_fu_418_p2 = (mul_ln700_1_fu_406_p2 - mul_ln1193_fu_412_p2);

assign ret_V_fu_390_p2 = (mul_ln1192_fu_384_p2 + mul_ln700_fu_378_p2);

assign sext_ln1118_1_fu_369_p1 = $signed(p_Val2_1_reg_524);

assign sext_ln1118_2_fu_372_p1 = $signed(ary_i_V_load_reg_539);

assign sext_ln1118_3_fu_375_p1 = $signed(p_Val2_3_reg_534);

assign sext_ln1118_fu_366_p1 = $signed(ary_r_V_load_reg_529);

assign sin_table_address0 = zext_ln1265_fu_294_p1;

assign sub_ln703_1_fu_440_p2 = (32'd0 - imag_V_reg_550);

assign sub_ln703_2_fu_333_p2 = (9'd0 - cos_table_q0);

assign sub_ln703_3_fu_352_p2 = (9'd0 - sin_table_q0);

assign sub_ln703_fu_434_p2 = (32'd0 - real_V_reg_544);

assign trunc_ln_fu_257_p4 = {{mul_ln128_reg_459[49:43]}};

assign xor_ln100_fu_306_p2 = (tmp_reg_475 ^ 1'd1);

assign xor_ln96_fu_311_p2 = (icmp_ln96_reg_469 ^ 1'd1);

assign zext_ln105_fu_266_p1 = idx_reg_464;

assign zext_ln1265_fu_294_p1 = idx_3_fu_287_p3;

assign zext_ln130_fu_300_p1 = m_0_reg_160;

always @ (posedge ap_clk) begin
    zext_ln130_reg_501[63:16] <= 48'b000000000000000000000000000000000000000000000000;
end

endmodule //shift
