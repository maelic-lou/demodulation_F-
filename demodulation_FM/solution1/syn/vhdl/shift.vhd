-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shift is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ary_r_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ary_r_V_ce0 : OUT STD_LOGIC;
    ary_r_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ary_i_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ary_i_V_ce0 : OUT STD_LOGIC;
    ary_i_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ary_r_s_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ary_r_s_V_ce0 : OUT STD_LOGIC;
    ary_r_s_V_we0 : OUT STD_LOGIC;
    ary_r_s_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ary_i_s_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ary_i_s_V_ce0 : OUT STD_LOGIC;
    ary_i_s_V_we0 : OUT STD_LOGIC;
    ary_i_s_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of shift is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_9C40 : STD_LOGIC_VECTOR (15 downto 0) := "1001110001000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv31_B200 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001011001000000000";
    constant ap_const_lv63_D1B71759 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000011010001101101110001011101011001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv8_41 : STD_LOGIC_VECTOR (7 downto 0) := "01000001";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cos_table_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cos_table_ce0 : STD_LOGIC;
    signal cos_table_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sin_table_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sin_table_ce0 : STD_LOGIC;
    signal sin_table_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_fu_189_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_reg_449 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln128_fu_195_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln128_reg_454 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln126_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln128_fu_205_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln128_reg_459 : STD_LOGIC_VECTOR (62 downto 0);
    signal idx_reg_464 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln96_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_469 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_475 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_reg_482 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_reg_487 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_reg_491 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln130_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_reg_501 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_1_fu_339_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_1_reg_524 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ary_r_V_load_reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_fu_358_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_3_reg_534 : STD_LOGIC_VECTOR (8 downto 0);
    signal ary_i_V_load_reg_539 : STD_LOGIC_VECTOR (31 downto 0);
    signal real_V_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal imag_V_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_0_reg_160 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal phi_mul_reg_172 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1265_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ary_r_s_V_addr_gep_fu_144_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ary_i_s_V_addr_gep_fu_152_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln703_fu_434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln703_1_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln128_fu_205_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal n_fu_221_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln105_fu_266_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal idx_1_fu_269_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln_fu_257_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal idx_2_fu_279_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal idx_3_fu_287_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln100_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln96_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln100_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln104_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln96_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_2_fu_333_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln60_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_3_fu_352_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln700_fu_378_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_1_fu_369_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln700_fu_378_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1118_fu_366_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_fu_384_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_3_fu_375_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1118_2_fu_372_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_fu_384_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln700_fu_378_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_fu_390_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln700_1_fu_406_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln700_1_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1193_fu_412_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1193_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_1_fu_406_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1193_fu_412_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_1_fu_418_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln128_fu_205_p10 : STD_LOGIC_VECTOR (62 downto 0);

    component shift_cos_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component shift_sin_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    cos_table_U : component shift_cos_table
    generic map (
        DataWidth => 9,
        AddressRange => 65,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_table_address0,
        ce0 => cos_table_ce0,
        q0 => cos_table_q0);

    sin_table_U : component shift_sin_table
    generic map (
        DataWidth => 9,
        AddressRange => 65,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sin_table_address0,
        ce0 => sin_table_ce0,
        q0 => sin_table_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    m_0_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                m_0_reg_160 <= m_reg_449;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                m_0_reg_160 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                phi_mul_reg_172 <= add_ln128_reg_454;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_172 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln128_reg_454 <= add_ln128_fu_195_p2;
                icmp_ln104_reg_482 <= icmp_ln104_fu_245_p2;
                icmp_ln132_reg_487 <= icmp_ln132_fu_251_p2;
                icmp_ln96_reg_469 <= icmp_ln96_fu_231_p2;
                idx_reg_464 <= mul_ln128_fu_205_p2(48 downto 43);
                mul_ln128_reg_459 <= mul_ln128_fu_205_p2;
                tmp_reg_475 <= mul_ln128_fu_205_p2(50 downto 50);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                and_ln104_reg_491 <= and_ln104_fu_275_p2;
                    zext_ln130_reg_501(15 downto 0) <= zext_ln130_fu_300_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ary_i_V_load_reg_539 <= ary_i_V_q0;
                ary_r_V_load_reg_529 <= ary_r_V_q0;
                p_Val2_1_reg_524 <= p_Val2_1_fu_339_p3;
                p_Val2_3_reg_534 <= p_Val2_3_fu_358_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                imag_V_reg_550 <= ret_V_1_fu_418_p2(39 downto 8);
                real_V_reg_544 <= ret_V_fu_390_p2(39 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                m_reg_449 <= m_fu_189_p2;
            end if;
        end if;
    end process;
    zext_ln130_reg_501(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln126_fu_183_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln126_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln128_fu_195_p2 <= std_logic_vector(unsigned(ap_const_lv31_B200) + unsigned(phi_mul_reg_172));
    and_ln100_fu_316_p2 <= (xor_ln96_fu_311_p2 and xor_ln100_fu_306_p2);
    and_ln104_fu_275_p2 <= (tmp_reg_475 and icmp_ln104_reg_482);
    and_ln60_fu_347_p2 <= (xor_ln96_fu_311_p2 and tmp_reg_475);
    and_ln96_fu_327_p2 <= (xor_ln96_fu_311_p2 and or_ln104_fu_322_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln126_fu_183_p2)
    begin
        if ((((icmp_ln126_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln126_fu_183_p2)
    begin
        if (((icmp_ln126_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ary_i_V_address0 <= zext_ln130_fu_300_p1(16 - 1 downto 0);

    ary_i_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ary_i_V_ce0 <= ap_const_logic_1;
        else 
            ary_i_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ary_i_s_V_addr_gep_fu_152_p3 <= zext_ln130_reg_501(16 - 1 downto 0);

    ary_i_s_V_address0_assign_proc : process(icmp_ln132_reg_487, zext_ln130_reg_501, ap_CS_fsm_state6, ary_i_s_V_addr_gep_fu_152_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((icmp_ln132_reg_487 = ap_const_lv1_1)) then 
                ary_i_s_V_address0 <= ary_i_s_V_addr_gep_fu_152_p3;
            elsif ((icmp_ln132_reg_487 = ap_const_lv1_0)) then 
                ary_i_s_V_address0 <= zext_ln130_reg_501(16 - 1 downto 0);
            else 
                ary_i_s_V_address0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            ary_i_s_V_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ary_i_s_V_ce0_assign_proc : process(icmp_ln132_reg_487, ap_CS_fsm_state6)
    begin
        if ((((icmp_ln132_reg_487 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln132_reg_487 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            ary_i_s_V_ce0 <= ap_const_logic_1;
        else 
            ary_i_s_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ary_i_s_V_d0_assign_proc : process(icmp_ln132_reg_487, imag_V_reg_550, ap_CS_fsm_state6, sub_ln703_1_fu_440_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((icmp_ln132_reg_487 = ap_const_lv1_1)) then 
                ary_i_s_V_d0 <= sub_ln703_1_fu_440_p2;
            elsif ((icmp_ln132_reg_487 = ap_const_lv1_0)) then 
                ary_i_s_V_d0 <= imag_V_reg_550;
            else 
                ary_i_s_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ary_i_s_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ary_i_s_V_we0_assign_proc : process(icmp_ln132_reg_487, ap_CS_fsm_state6)
    begin
        if ((((icmp_ln132_reg_487 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln132_reg_487 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            ary_i_s_V_we0 <= ap_const_logic_1;
        else 
            ary_i_s_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ary_r_V_address0 <= zext_ln130_fu_300_p1(16 - 1 downto 0);

    ary_r_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ary_r_V_ce0 <= ap_const_logic_1;
        else 
            ary_r_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ary_r_s_V_addr_gep_fu_144_p3 <= zext_ln130_reg_501(16 - 1 downto 0);

    ary_r_s_V_address0_assign_proc : process(icmp_ln132_reg_487, zext_ln130_reg_501, ap_CS_fsm_state6, ary_r_s_V_addr_gep_fu_144_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((icmp_ln132_reg_487 = ap_const_lv1_1)) then 
                ary_r_s_V_address0 <= ary_r_s_V_addr_gep_fu_144_p3;
            elsif ((icmp_ln132_reg_487 = ap_const_lv1_0)) then 
                ary_r_s_V_address0 <= zext_ln130_reg_501(16 - 1 downto 0);
            else 
                ary_r_s_V_address0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            ary_r_s_V_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ary_r_s_V_ce0_assign_proc : process(icmp_ln132_reg_487, ap_CS_fsm_state6)
    begin
        if ((((icmp_ln132_reg_487 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln132_reg_487 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            ary_r_s_V_ce0 <= ap_const_logic_1;
        else 
            ary_r_s_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ary_r_s_V_d0_assign_proc : process(icmp_ln132_reg_487, real_V_reg_544, ap_CS_fsm_state6, sub_ln703_fu_434_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((icmp_ln132_reg_487 = ap_const_lv1_1)) then 
                ary_r_s_V_d0 <= sub_ln703_fu_434_p2;
            elsif ((icmp_ln132_reg_487 = ap_const_lv1_0)) then 
                ary_r_s_V_d0 <= real_V_reg_544;
            else 
                ary_r_s_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ary_r_s_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ary_r_s_V_we0_assign_proc : process(icmp_ln132_reg_487, ap_CS_fsm_state6)
    begin
        if ((((icmp_ln132_reg_487 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln132_reg_487 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            ary_r_s_V_we0 <= ap_const_logic_1;
        else 
            ary_r_s_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cos_table_address0 <= zext_ln1265_fu_294_p1(7 - 1 downto 0);

    cos_table_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cos_table_ce0 <= ap_const_logic_1;
        else 
            cos_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln104_fu_245_p2 <= "1" when (unsigned(n_fu_221_p4) < unsigned(ap_const_lv8_C0)) else "0";
    icmp_ln126_fu_183_p2 <= "1" when (m_0_reg_160 = ap_const_lv16_9C40) else "0";
    icmp_ln132_fu_251_p2 <= "1" when (n_fu_221_p4 = ap_const_lv8_0) else "0";
    icmp_ln96_fu_231_p2 <= "1" when (unsigned(n_fu_221_p4) < unsigned(ap_const_lv8_41)) else "0";
    idx_1_fu_269_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(zext_ln105_fu_266_p1));
    idx_2_fu_279_p3 <= 
        zext_ln105_fu_266_p1 when (and_ln104_fu_275_p2(0) = '1') else 
        idx_1_fu_269_p2;
    idx_3_fu_287_p3 <= 
        trunc_ln_fu_257_p4 when (icmp_ln96_reg_469(0) = '1') else 
        idx_2_fu_279_p3;
    m_fu_189_p2 <= std_logic_vector(unsigned(m_0_reg_160) + unsigned(ap_const_lv16_1));
    mul_ln1192_fu_384_p0 <= sext_ln1118_3_fu_375_p1(9 - 1 downto 0);
    mul_ln1192_fu_384_p1 <= sext_ln1118_2_fu_372_p1(32 - 1 downto 0);
    mul_ln1192_fu_384_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_fu_384_p0) * signed(mul_ln1192_fu_384_p1))), 40));
    mul_ln1193_fu_412_p0 <= sext_ln1118_3_fu_375_p1(9 - 1 downto 0);
    mul_ln1193_fu_412_p1 <= sext_ln1118_fu_366_p1(32 - 1 downto 0);
    mul_ln1193_fu_412_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1193_fu_412_p0) * signed(mul_ln1193_fu_412_p1))), 40));
    mul_ln128_fu_205_p1 <= mul_ln128_fu_205_p10(31 - 1 downto 0);
    mul_ln128_fu_205_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_172),63));
    mul_ln128_fu_205_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv63_D1B71759) * unsigned(mul_ln128_fu_205_p1), 63));
    mul_ln700_1_fu_406_p0 <= sext_ln1118_1_fu_369_p1(9 - 1 downto 0);
    mul_ln700_1_fu_406_p1 <= sext_ln1118_2_fu_372_p1(32 - 1 downto 0);
    mul_ln700_1_fu_406_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_1_fu_406_p0) * signed(mul_ln700_1_fu_406_p1))), 40));
    mul_ln700_fu_378_p0 <= sext_ln1118_1_fu_369_p1(9 - 1 downto 0);
    mul_ln700_fu_378_p1 <= sext_ln1118_fu_366_p1(32 - 1 downto 0);
    mul_ln700_fu_378_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_fu_378_p0) * signed(mul_ln700_fu_378_p1))), 40));
    n_fu_221_p4 <= mul_ln128_fu_205_p2(50 downto 43);
    or_ln104_fu_322_p2 <= (and_ln104_reg_491 or and_ln100_fu_316_p2);
    p_Val2_1_fu_339_p3 <= 
        sub_ln703_2_fu_333_p2 when (and_ln96_fu_327_p2(0) = '1') else 
        cos_table_q0;
    p_Val2_3_fu_358_p3 <= 
        sub_ln703_3_fu_352_p2 when (and_ln60_fu_347_p2(0) = '1') else 
        sin_table_q0;
    ret_V_1_fu_418_p2 <= std_logic_vector(unsigned(mul_ln700_1_fu_406_p2) - unsigned(mul_ln1193_fu_412_p2));
    ret_V_fu_390_p2 <= std_logic_vector(unsigned(mul_ln1192_fu_384_p2) + unsigned(mul_ln700_fu_378_p2));
        sext_ln1118_1_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_reg_524),40));

        sext_ln1118_2_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ary_i_V_load_reg_539),40));

        sext_ln1118_3_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_3_reg_534),40));

        sext_ln1118_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ary_r_V_load_reg_529),40));

    sin_table_address0 <= zext_ln1265_fu_294_p1(7 - 1 downto 0);

    sin_table_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sin_table_ce0 <= ap_const_logic_1;
        else 
            sin_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln703_1_fu_440_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(imag_V_reg_550));
    sub_ln703_2_fu_333_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(cos_table_q0));
    sub_ln703_3_fu_352_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sin_table_q0));
    sub_ln703_fu_434_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(real_V_reg_544));
    trunc_ln_fu_257_p4 <= mul_ln128_reg_459(49 downto 43);
    xor_ln100_fu_306_p2 <= (tmp_reg_475 xor ap_const_lv1_1);
    xor_ln96_fu_311_p2 <= (icmp_ln96_reg_469 xor ap_const_lv1_1);
    zext_ln105_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_reg_464),7));
    zext_ln1265_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_3_fu_287_p3),64));
    zext_ln130_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_160),64));
end behav;
